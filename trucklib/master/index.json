{
  "TruckLib.Core/README.html": {
    "href": "TruckLib.Core/README.html",
    "title": "TruckLib.Core | TruckLib",
    "keywords": "TruckLib.Core Shared functionality across all TruckLib packages. See sk-zk/TruckLib for the main repo. Install dotnet add package TruckLib.Core"
  },
  "TruckLib.HashFs/README.html": {
    "href": "TruckLib.HashFs/README.html",
    "title": "TruckLib.HashFs | TruckLib",
    "keywords": "TruckLib.HashFs The HashFS namespace of TruckLib. See sk-zk/TruckLib for the main repo. Install dotnet add package TruckLib.HashFs"
  },
  "TruckLib.Models/README.html": {
    "href": "TruckLib.Models/README.html",
    "title": "TruckLib.Models | TruckLib",
    "keywords": "TruckLib.Models The Models namespace of TruckLib. See sk-zk/TruckLib for the main repo. Install dotnet add package TruckLib.Models"
  },
  "TruckLib.Sii/README.html": {
    "href": "TruckLib.Sii/README.html",
    "title": "TruckLib.Sii | TruckLib",
    "keywords": "TruckLib.Sii The SII namespace of TruckLib. See sk-zk/TruckLib for the main repo. Install dotnet add package TruckLib.Sii"
  },
  "api/TruckLib.CatmullRomSpline.html": {
    "href": "api/TruckLib.CatmullRomSpline.html",
    "title": "Class CatmullRomSpline | TruckLib",
    "keywords": "Class CatmullRomSpline Namespace TruckLib Assembly TruckLib.dll Functions for interpolating Catmull-Rom splines. public static class CatmullRomSpline Inheritance object CatmullRomSpline Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ApproximateLength(Vector3, Vector3, Vector3, Vector3) public static float ApproximateLength(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3) Parameters p0 Vector3 p1 Vector3 p2 Vector3 p3 Vector3 Returns float Derivative(Vector3, Vector3, Vector3, Vector3, float) public static Vector3 Derivative(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t) Parameters p0 Vector3 p1 Vector3 p2 Vector3 p3 Vector3 t float Returns Vector3 Interpolate(Vector3, Vector3, Vector3, Vector3, float) public static Vector3 Interpolate(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t) Parameters p0 Vector3 p1 Vector3 p2 Vector3 p3 Vector3 t float Returns Vector3"
  },
  "api/TruckLib.DiskFileSystem.html": {
    "href": "api/TruckLib.DiskFileSystem.html",
    "title": "Class DiskFileSystem | TruckLib",
    "keywords": "Class DiskFileSystem Namespace TruckLib Assembly TruckLib.Core.dll public class DiskFileSystem : IFileSystem Inheritance object DiskFileSystem Implements IFileSystem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DirectorySeparator The character used to separate directory levels in a path string. public char DirectorySeparator { get; } Property Value char Methods FileExists(string) Determines whether the specified file exists. public bool FileExists(string path) Parameters path string The file to check. Returns bool true if the caller has the required permissions and path contains the name of an existing file; otherwise, false. GetFiles(string) Returns the names of files (including their paths) in the specified directory. public IList<string> GetFiles(string path) Parameters path string The absolute path to the directory to search. Returns IList<string> An array of the full names (including paths) for the files in the specified directory, or an empty array if no files are found. GetParent(string) Retrieves the parent directory of the specified path. public string GetParent(string path) Parameters path string The path for which to retrieve the parent directory. Returns string The parent directory, or null if path is the root directory. Open(string) Opens a stream on the specified path. public Stream Open(string path) Parameters path string The file to open. Returns Stream A stream for reading the file. ReadAllBytes(string) Opens a binary file, reads the contents of the file into a byte array, and then closes the file. public byte[] ReadAllBytes(string path) Parameters path string The file to open for reading. Returns byte[] A byte array containing the contents of the file. ReadAllText(string) Opens a text file, reads all the text in the file into a string, and then closes the file. public string ReadAllText(string path) Parameters path string The file to open for reading. Returns string A string containing all the text in the file. ReadAllText(string, Encoding) Opens a file, reads all text in the file with the specified encoding, and then closes the file. public string ReadAllText(string path, Encoding encoding) Parameters path string The file to open for reading. encoding Encoding The encoding applied to the contents of the file. Returns string"
  },
  "api/TruckLib.FlagField.html": {
    "href": "api/TruckLib.FlagField.html",
    "title": "Struct FlagField | TruckLib",
    "keywords": "Struct FlagField Namespace TruckLib Assembly TruckLib.Core.dll Represents a 32-bit flag field. public struct FlagField Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FlagField(uint) Initializes a new flag field with the given value. public FlagField(uint bits) Parameters bits uint The initial value of the flag field. Properties Bits Gets or sets the underlying value. public uint Bits { get; set; } Property Value uint this[int] Gets or sets one flag of the flag field as Boolean. public bool this[int index] { get; set; } Parameters index int The index of the flag, where 0 is the LSB. Property Value bool Methods Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetBitString(int, int) Returns a sub-bitstring of the flag field. public uint GetBitString(int start, int length) Parameters start int The index of the first bit, where 0 is the LSB. length int The length in bits. Returns uint Exceptions IndexOutOfRangeException GetByte(int) Returns a byte of the flag field. public byte GetByte(int index) Parameters index int The index of the byte, where 0 is the LSB. Returns byte GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. SetBitString(int, int, uint) Sets a sub-bitstring of the flag field. public void SetBitString(int start, int length, uint value) Parameters start int The index of the first bit, where 0 is the LSB. length int The length in bits. value uint The value to set. Exceptions IndexOutOfRangeException SetByte(int, byte) Sets a byte of the flag field. public void SetByte(int index, byte value) Parameters index int The index of the byte, where 0 is the LSB. value byte The value to set. ToBoolArray() Converts the flag field to a bool array. public bool[] ToBoolArray() Returns bool[] The flag field as bool array. ToString() Returns the content of the flag field as a binary string. public override string ToString() Returns string The content of the flag field as a binary string. Operators operator ==(FlagField, FlagField) public static bool operator ==(FlagField left, FlagField right) Parameters left FlagField right FlagField Returns bool operator !=(FlagField, FlagField) public static bool operator !=(FlagField left, FlagField right) Parameters left FlagField right FlagField Returns bool"
  },
  "api/TruckLib.HashFs.CityHash.html": {
    "href": "api/TruckLib.HashFs.CityHash.html",
    "title": "Class CityHash | TruckLib",
    "keywords": "Class CityHash Namespace TruckLib.HashFs Assembly TruckLib.HashFs.dll Google's CityHash function, which is the hash function used by HashFS. public static class CityHash Inheritance object CityHash Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CityHash64(byte[], ulong) public static ulong CityHash64(byte[] s, ulong len) Parameters s byte[] len ulong Returns ulong"
  },
  "api/TruckLib.HashFs.Dds.DxgiFormat.html": {
    "href": "api/TruckLib.HashFs.Dds.DxgiFormat.html",
    "title": "Enum DxgiFormat | TruckLib",
    "keywords": "Enum DxgiFormat Namespace TruckLib.HashFs.Dds Assembly TruckLib.HashFs.dll public enum DxgiFormat Fields A4B4G4R4_UNORM = 191 A8P8 = 114 A8_UNORM = 65 AI44 = 111 AYUV = 100 B4G4R4A4_UNORM = 115 B5G5R5A1_UNORM = 86 B5G6R5_UNORM = 85 B8G8R8A8_TYPELESS = 90 B8G8R8A8_UNORM = 87 B8G8R8A8_UNORM_SRGB = 91 B8G8R8X8_TYPELESS = 92 B8G8R8X8_UNORM = 88 B8G8R8X8_UNORM_SRGB = 93 BC1_TYPELESS = 70 BC1_UNORM = 71 BC1_UNORM_SRGB = 72 BC2_TYPELESS = 73 BC2_UNORM = 74 BC2_UNORM_SRGB = 75 BC3_TYPELESS = 76 BC3_UNORM = 77 BC3_UNORM_SRGB = 78 BC4_SNORM = 81 BC4_TYPELESS = 79 BC4_UNORM = 80 BC5_SNORM = 84 BC5_TYPELESS = 82 BC5_UNORM = 83 BC6H_SF16 = 96 BC6H_TYPELESS = 94 BC6H_UF16 = 95 BC7_TYPELESS = 97 BC7_UNORM = 98 BC7_UNORM_SRGB = 99 D16_UNORM = 55 D24_UNORM_S8_UINT = 45 D32_FLOAT = 40 D32_FLOAT_S8X24_UINT = 20 FORCE_UINT = -1 G8R8_G8B8_UNORM = 69 IA44 = 112 NV11 = 110 NV12 = 103 P010 = 104 P016 = 105 P208 = 130 P8 = 113 R10G10B10A2_TYPELESS = 23 R10G10B10A2_UINT = 25 R10G10B10A2_UNORM = 24 R10G10B10_XR_BIAS_A2_UNORM = 89 R11G11B10_FLOAT = 26 R16G16B16A16_FLOAT = 10 R16G16B16A16_SINT = 14 R16G16B16A16_SNORM = 13 R16G16B16A16_TYPELESS = 9 R16G16B16A16_UINT = 12 R16G16B16A16_UNORM = 11 R16G16_FLOAT = 34 R16G16_SINT = 38 R16G16_SNORM = 37 R16G16_TYPELESS = 33 R16G16_UINT = 36 R16G16_UNORM = 35 R16_FLOAT = 54 R16_SINT = 59 R16_SNORM = 58 R16_TYPELESS = 53 R16_UINT = 57 R16_UNORM = 56 R1_UNORM = 66 R24G8_TYPELESS = 44 R24_UNORM_X8_TYPELESS = 46 R32G32B32A32_FLOAT = 2 R32G32B32A32_SINT = 4 R32G32B32A32_TYPELESS = 1 R32G32B32A32_UINT = 3 R32G32B32_FLOAT = 6 R32G32B32_SINT = 8 R32G32B32_TYPELESS = 5 R32G32B32_UINT = 7 R32G32_FLOAT = 16 R32G32_SINT = 18 R32G32_TYPELESS = 15 R32G32_UINT = 17 R32G8X24_TYPELESS = 19 R32_FLOAT = 41 R32_FLOAT_X8X24_TYPELESS = 21 R32_SINT = 43 R32_TYPELESS = 39 R32_UINT = 42 R8G8B8A8_SINT = 32 R8G8B8A8_SNORM = 31 R8G8B8A8_TYPELESS = 27 R8G8B8A8_UINT = 30 R8G8B8A8_UNORM = 28 R8G8B8A8_UNORM_SRGB = 29 R8G8_B8G8_UNORM = 68 R8G8_SINT = 52 R8G8_SNORM = 51 R8G8_TYPELESS = 48 R8G8_UINT = 50 R8G8_UNORM = 49 R8_SINT = 64 R8_SNORM = 63 R8_TYPELESS = 60 R8_UINT = 62 R8_UNORM = 61 R9G9B9E5_SHAREDEXP = 67 SAMPLER_FEEDBACK_MIN_MIP_OPAQUE = 189 SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE = 190 UNKNOWN = 0 V208 = 131 V408 = 132 X24_TYPELESS_G8_UINT = 47 X32_TYPELESS_G8X24_UINT = 22 Y210 = 108 Y216 = 109 Y410 = 101 Y416 = 102 YUY2 = 107 _420_OPAQUE = 106"
  },
  "api/TruckLib.HashFs.Dds.html": {
    "href": "api/TruckLib.HashFs.Dds.html",
    "title": "Namespace TruckLib.HashFs.Dds | TruckLib",
    "keywords": "Namespace TruckLib.HashFs.Dds Enums DxgiFormat"
  },
  "api/TruckLib.HashFs.DirectoryListing.html": {
    "href": "api/TruckLib.HashFs.DirectoryListing.html",
    "title": "Class DirectoryListing | TruckLib",
    "keywords": "Class DirectoryListing Namespace TruckLib.HashFs Assembly TruckLib.HashFs.dll Represents a directory listing file in a HashFS archive. public record DirectoryListing : IEquatable<DirectoryListing> Inheritance object DirectoryListing Implements IEquatable<DirectoryListing> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DirectoryListing(List<string>, List<string>) Represents a directory listing file in a HashFS archive. public DirectoryListing(List<string> Subdirectories, List<string> Files) Parameters Subdirectories List<string> The names of subdirectories in this directory. Files List<string> The names of files in this directory. Properties Files The names of files in this directory. public List<string> Files { get; init; } Property Value List<string> Subdirectories The names of subdirectories in this directory. public List<string> Subdirectories { get; init; } Property Value List<string>"
  },
  "api/TruckLib.HashFs.EntryType.html": {
    "href": "api/TruckLib.HashFs.EntryType.html",
    "title": "Enum EntryType | TruckLib",
    "keywords": "Enum EntryType Namespace TruckLib.HashFs Assembly TruckLib.HashFs.dll Return type for HashFsReader.EntryExists(). public enum EntryType Fields Directory = 1 The path points to a directory listing. File = 0 The path points to a file. NotFound = -1 The path does not exist in the archive."
  },
  "api/TruckLib.HashFs.EntryV1.html": {
    "href": "api/TruckLib.HashFs.EntryV1.html",
    "title": "Struct EntryV1 | TruckLib",
    "keywords": "Struct EntryV1 Namespace TruckLib.HashFs Assembly TruckLib.HashFs.dll Represents the metadata of an entry in a HashFS v1 archive. public struct EntryV1 : IEntry Implements IEntry Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties CompressedSize Size of the file in the archive. public readonly uint CompressedSize { get; } Property Value uint Crc CRC32 checksum of the file. public readonly uint Crc { get; } Property Value uint Hash Hash of the full path of the file. public readonly ulong Hash { get; } Property Value ulong IsCompressed Whether the file is compressed. public bool IsCompressed { get; } Property Value bool IsDirectory If true, the entry is a directory listing. public bool IsDirectory { get; set; } Property Value bool IsEncrypted public bool IsEncrypted { get; } Property Value bool Offset Start of the file contents in the archive. public readonly ulong Offset { get; } Property Value ulong Size Size of the file when uncompressed. public readonly uint Size { get; } Property Value uint Verify public bool Verify { get; } Property Value bool"
  },
  "api/TruckLib.HashFs.EntryV2.html": {
    "href": "api/TruckLib.HashFs.EntryV2.html",
    "title": "Struct EntryV2 | TruckLib",
    "keywords": "Struct EntryV2 Namespace TruckLib.HashFs Assembly TruckLib.HashFs.dll Represents the metadata of an entry in a HashFS v2 archive. public struct EntryV2 : IEntry Implements IEntry Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties CompressedSize Size of the file in the archive. public readonly uint CompressedSize { get; } Property Value uint Hash Hash of the full path of the file. public readonly ulong Hash { get; } Property Value ulong IsCompressed Whether the file is compressed. public readonly bool IsCompressed { get; } Property Value bool IsDirectory If true, the entry is a directory listing. public bool IsDirectory { readonly get; set; } Property Value bool Offset Start of the file contents in the archive. public readonly ulong Offset { get; } Property Value ulong Size Size of the file when uncompressed. public readonly uint Size { get; } Property Value uint TobjMetadata .tobj/.dds metadata if this entry is a packed .tobj/.dds file. public readonly PackedTobjDdsMetadata? TobjMetadata { get; } Property Value PackedTobjDdsMetadata?"
  },
  "api/TruckLib.HashFs.HashFsReader.html": {
    "href": "api/TruckLib.HashFs.HashFsReader.html",
    "title": "Class HashFsReader | TruckLib",
    "keywords": "Class HashFsReader Namespace TruckLib.HashFs Assembly TruckLib.HashFs.dll Static factory class for creating the appropriate HashFsV*Reader depending on the HashFS version. public static class HashFsReader Inheritance object HashFsReader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Open(string, bool) Opens a HashFS archive. public static IHashFsReader Open(string path, bool forceEntryTableAtEnd = false) Parameters path string The path to the HashFS archive. forceEntryTableAtEnd bool If true, the entry table will be read from the end of the file, regardless of where the archive header says they are located. Only supported for v1. Returns IHashFsReader A IHashFsReader."
  },
  "api/TruckLib.HashFs.IEntry.html": {
    "href": "api/TruckLib.HashFs.IEntry.html",
    "title": "Interface IEntry | TruckLib",
    "keywords": "Interface IEntry Namespace TruckLib.HashFs Assembly TruckLib.HashFs.dll Represents the metadata of an entry in a HashFS archive. public interface IEntry Properties CompressedSize Size of the file in the archive. uint CompressedSize { get; } Property Value uint Hash Hash of the full path of the file. ulong Hash { get; } Property Value ulong IsCompressed Whether the file is compressed. bool IsCompressed { get; } Property Value bool IsDirectory If true, the entry is a directory listing. bool IsDirectory { get; set; } Property Value bool Offset Start of the file contents in the archive. ulong Offset { get; } Property Value ulong Size Size of the file when uncompressed. uint Size { get; } Property Value uint"
  },
  "api/TruckLib.HashFs.IHashFsReader.html": {
    "href": "api/TruckLib.HashFs.IHashFsReader.html",
    "title": "Interface IHashFsReader | TruckLib",
    "keywords": "Interface IHashFsReader Namespace TruckLib.HashFs Assembly TruckLib.HashFs.dll A HashFS reader for extracting files from HashFS archives. public interface IHashFsReader : IDisposable, IFileSystem Inherited Members IDisposable.Dispose() IFileSystem.FileExists(string) IFileSystem.GetFiles(string) IFileSystem.ReadAllBytes(string) IFileSystem.ReadAllText(string) IFileSystem.ReadAllText(string, Encoding) IFileSystem.Open(string) IFileSystem.GetParent(string) IFileSystem.DirectorySeparator Properties Entries The entries in this archive. Dictionary<ulong, IEntry> Entries { get; } Property Value Dictionary<ulong, IEntry> Path Gets the file path of the HashFS archive which this reader is reading from. string Path { get; } Property Value string Salt Gets or sets the salt which is prepended to paths before hashing them. ushort Salt { get; set; } Property Value ushort Version The HashFS version of the archive. ushort Version { get; } Property Value ushort Methods EntryExists(string) Checks if an entry exists and returns its type if it does. EntryType EntryExists(string path) Parameters path string The path of the entry in the archive. Returns EntryType Its type. Extract(string) Extracts and decompresses an entry to memory. byte[][] Extract(string path) Parameters path string The path of the entry in the archive. Returns byte[][] The extracted file(s) as byte array. This will always be one file, with one special case: In HashFS v2, extracting a packed .tobj/.dds entry will return the reconstructed .tobj and .dds files in that order. Extract(IEntry, string) Extracts and decompresses an entry to memory. byte[][] Extract(IEntry entry, string path) Parameters entry IEntry The entry metadata of the file to extract. path string The path of the entry in the archive. Returns byte[][] The extracted file(s) as byte array. This will always be one file, with one special case: In HashFS v2, extracting a packed .tobj entry will return the reconstructed .tobj and .dds files in that order. ExtractToFile(string, string) Extracts and decompresses an entry to a file. In HashFS v2, when extracting a packed .tobj entry, both the reconstructed .tobj and .dds files will be written. void ExtractToFile(string entryPath, string outputPath) Parameters entryPath string The path of the entry in the archive. outputPath string The output path. ExtractToFile(IEntry, string, string) Extracts and decompresses an entry to a file. In HashFS v2, when extracting a packed .tobj entry, both the reconstructed .tobj and .dds files will be written. void ExtractToFile(IEntry entry, string entryPath, string outputPath) Parameters entry IEntry The entry metadata of the file to extract. entryPath string The path of the entry in the archive. outputPath string The output path. GetDirectoryListing(string, bool, bool) Returns a list of subdirectories and files in the given directory. DirectoryListing GetDirectoryListing(string path, bool filesOnly = false, bool returnAbsolute = true) Parameters path string The path of the directory in the archive. filesOnly bool Whether only files should be returned. returnAbsolute bool Whether the returned paths should be made absolute. Returns DirectoryListing A list of subdirectories and files in the given directory. GetDirectoryListing(IEntry, bool) Returns a list of subdirectories and files in the given directory. DirectoryListing GetDirectoryListing(IEntry entry, bool filesOnly = false) Parameters entry IEntry The entry metadata of the directory. filesOnly bool Whether only files should be returned. Returns DirectoryListing A list of subdirectories and files in the given directory. GetEntry(string) Retrieves the entry metadata for the given path. IEntry GetEntry(string path) Parameters path string The path. Returns IEntry The entry metadata. HashPath(string, uint?) Hashes a file path. ulong HashPath(string path, uint? salt = null) Parameters path string The path. salt uint? If set, this salt will be used to hash the path rather than the one specified by the archive's header. Returns ulong The hash of the path."
  },
  "api/TruckLib.HashFs.PackedTobjDdsMetadata.html": {
    "href": "api/TruckLib.HashFs.PackedTobjDdsMetadata.html",
    "title": "Struct PackedTobjDdsMetadata | TruckLib",
    "keywords": "Struct PackedTobjDdsMetadata Namespace TruckLib.HashFs Assembly TruckLib.HashFs.dll Represents the metadata table values of a packed .tobj/.dds entry. public struct PackedTobjDdsMetadata Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields TextureHeight public int TextureHeight Field Value int TextureWidth public int TextureWidth Field Value int Properties AddrU public TobjAddr AddrU { get; } Property Value TobjAddr AddrV public TobjAddr AddrV { get; } Property Value TobjAddr AddrW public TobjAddr AddrW { get; } Property Value TobjAddr FaceCount public uint FaceCount { get; } Property Value uint Format public DxgiFormat Format { get; } Property Value DxgiFormat ImageAlignment public int ImageAlignment { get; } Property Value int IsCube public bool IsCube { get; } Property Value bool MagFilter public TobjFilter MagFilter { get; } Property Value TobjFilter MinFilter public TobjFilter MinFilter { get; } Property Value TobjFilter MipFilter public TobjMipFilter MipFilter { get; } Property Value TobjMipFilter MipmapCount public uint MipmapCount { get; } Property Value uint PitchAlignment public int PitchAlignment { get; } Property Value int Methods AsTobj(string) Creates a Tobj object from the metadata. public Tobj AsTobj(string tobjPath) Parameters tobjPath string The absolute path of the .tobj file, e.g. \"/model/wall/anti_noise.tobj\". Returns Tobj A Tobj object."
  },
  "api/TruckLib.HashFs.Platform.html": {
    "href": "api/TruckLib.HashFs.Platform.html",
    "title": "Enum Platform | TruckLib",
    "keywords": "Enum Platform Namespace TruckLib.HashFs Assembly TruckLib.HashFs.dll public enum Platform Fields PC = 0 PS4 = 3 PS5 = 4 XboxOne = 1 XboxSeries = 2"
  },
  "api/TruckLib.HashFs.html": {
    "href": "api/TruckLib.HashFs.html",
    "title": "Namespace TruckLib.HashFs | TruckLib",
    "keywords": "Namespace TruckLib.HashFs Classes CityHash Google's CityHash function, which is the hash function used by HashFS. DirectoryListing Represents a directory listing file in a HashFS archive. HashFsReader Static factory class for creating the appropriate HashFsV*Reader depending on the HashFS version. Structs EntryV1 Represents the metadata of an entry in a HashFS v1 archive. EntryV2 Represents the metadata of an entry in a HashFS v2 archive. PackedTobjDdsMetadata Represents the metadata table values of a packed .tobj/.dds entry. Interfaces IEntry Represents the metadata of an entry in a HashFS archive. IHashFsReader A HashFS reader for extracting files from HashFS archives. Enums EntryType Return type for HashFsReader.EntryExists(). Platform"
  },
  "api/TruckLib.IBinarySerializable.html": {
    "href": "api/TruckLib.IBinarySerializable.html",
    "title": "Interface IBinarySerializable | TruckLib",
    "keywords": "Interface IBinarySerializable Namespace TruckLib Assembly TruckLib.Core.dll Interface for classes which can de/serialize themselves to a binary format. public interface IBinarySerializable Methods Deserialize(BinaryReader, uint?) Reads the object from a BinaryReader whose position is at the start of the object. void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader A BinaryReader whose position is at the start of the object. version uint? The version number of the file format. Serialize(BinaryWriter) Writes the object to a BinaryWriter. void Serialize(BinaryWriter w) Parameters w BinaryWriter A BinaryWriter."
  },
  "api/TruckLib.IFileSystem.html": {
    "href": "api/TruckLib.IFileSystem.html",
    "title": "Interface IFileSystem | TruckLib",
    "keywords": "Interface IFileSystem Namespace TruckLib Assembly TruckLib.Core.dll Interface which abstracts read-only file system access to enable methods to read from either disk or HashFS. public interface IFileSystem Properties DirectorySeparator The character used to separate directory levels in a path string. char DirectorySeparator { get; } Property Value char Methods FileExists(string) Determines whether the specified file exists. bool FileExists(string path) Parameters path string The file to check. Returns bool true if the caller has the required permissions and path contains the name of an existing file; otherwise, false. GetFiles(string) Returns the names of files (including their paths) in the specified directory. IList<string> GetFiles(string path) Parameters path string The absolute path to the directory to search. Returns IList<string> An array of the full names (including paths) for the files in the specified directory, or an empty array if no files are found. GetParent(string) Retrieves the parent directory of the specified path. string GetParent(string path) Parameters path string The path for which to retrieve the parent directory. Returns string The parent directory, or null if path is the root directory. Open(string) Opens a stream on the specified path. Stream Open(string path) Parameters path string The file to open. Returns Stream A stream for reading the file. ReadAllBytes(string) Opens a binary file, reads the contents of the file into a byte array, and then closes the file. byte[] ReadAllBytes(string path) Parameters path string The file to open for reading. Returns byte[] A byte array containing the contents of the file. ReadAllText(string) Opens a text file, reads all the text in the file into a string, and then closes the file. string ReadAllText(string path) Parameters path string The file to open for reading. Returns string A string containing all the text in the file. ReadAllText(string, Encoding) Opens a file, reads all text in the file with the specified encoding, and then closes the file. string ReadAllText(string path, Encoding encoding) Parameters path string The file to open for reading. encoding Encoding The encoding applied to the contents of the file. Returns string"
  },
  "api/TruckLib.IOExtensions.html": {
    "href": "api/TruckLib.IOExtensions.html",
    "title": "Class IOExtensions | TruckLib",
    "keywords": "Class IOExtensions Namespace TruckLib Assembly TruckLib.dll public static class IOExtensions Inheritance object IOExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadColor(BinaryReader) Reads a Color in RGBA format from the current stream and advances the current position of the stream by four bytes. public static Color ReadColor(this BinaryReader r) Parameters r BinaryReader A BinaryReader. Returns Color A Color read from the current stream. ReadMatrix4x4(BinaryReader) Reads a Matrix4x4 from the current stream and advances the current position of the stream by 64 bytes. public static Matrix4x4 ReadMatrix4x4(this BinaryReader r) Parameters r BinaryReader A BinaryReader. Returns Matrix4x4 A Matrix4x4 read from the current stream. ReadObjectList<T>(BinaryReader, uint, uint?) Reads a list of IBinarySerializable objects or various other types from the current stream and advances the current position of the stream. public static List<T> ReadObjectList<T>(this BinaryReader r, uint count, uint? version = null) where T : new() Parameters r BinaryReader A BinaryReader. count uint The number of objects to read. version uint? Returns List<T> A list of type T read from the current stream. Type Parameters T The type of the list. ReadPascalString(BinaryReader) Reads a string in the format used in SCS's binary formats from the current stream and advances the current position of the stream. public static string ReadPascalString(this BinaryReader r) Parameters r BinaryReader A BinaryReader. Returns string A string read from the current stream. ReadQuaternion(BinaryReader) Reads a quaternion in WXYZ format from the current stream and advances the current position of the stream by 16 bytes. public static Quaternion ReadQuaternion(this BinaryReader r) Parameters r BinaryReader A BinaryReader. Returns Quaternion A quaternion read from the current stream. ReadToken(BinaryReader) Reads a Token from the current stream and advances the current position of the stream by eight bytes. public static Token ReadToken(this BinaryReader r) Parameters r BinaryReader A BinaryReader. Returns Token A token read from the current stream. ReadVector2(BinaryReader) Reads a Vector2 from the current stream and advances the current position of the stream by eight bytes. public static Vector2 ReadVector2(this BinaryReader r) Parameters r BinaryReader A BinaryReader. Returns Vector2 A Vector2 read from the current stream. ReadVector3(BinaryReader) Reads a Vector3 from the current stream and advances the current position of the stream by 12 bytes. public static Vector3 ReadVector3(this BinaryReader r) Parameters r BinaryReader A BinaryReader. Returns Vector3 A Vector3 read from the current stream. ReadVector4(BinaryReader) Reads a Vector4 from the current stream and advances the current position of the stream by 16 bytes. public static Vector4 ReadVector4(this BinaryReader r) Parameters r BinaryReader A BinaryReader. Returns Vector4 A Vector4 read from the current stream. Write(BinaryWriter, Color) Writes a Color in RGBA format to the current stream and advances the stream position by four bytes. public static void Write(this BinaryWriter w, Color color) Parameters w BinaryWriter The BinaryWriter. color Color The value to write. Write(BinaryWriter, Matrix4x4) Writes a Matrix4x4 to the current stream and advances the stream position by 64 bytes. public static void Write(this BinaryWriter w, Matrix4x4 m) Parameters w BinaryWriter The BinaryWriter. m Matrix4x4 Write(BinaryWriter, Quaternion) Writes a quaternion in WXYZ format to the current stream and advances the stream position by 16 bytes. public static void Write(this BinaryWriter w, Quaternion q) Parameters w BinaryWriter The BinaryWriter. q Quaternion The value to write. Write(BinaryWriter, Vector2) Writes a Vector2 to the current stream and advances the stream position by eight bytes. public static void Write(this BinaryWriter w, Vector2 vector) Parameters w BinaryWriter The BinaryWriter. vector Vector2 The value to write. Write(BinaryWriter, Vector3) Writes a Vector3 to the current stream and advances the stream position by 12 bytes. public static void Write(this BinaryWriter w, Vector3 vector) Parameters w BinaryWriter The BinaryWriter. vector Vector3 The value to write. Write(BinaryWriter, Vector4) Writes a Vector4 to the current stream and advances the stream position by 16 bytes. public static void Write(this BinaryWriter w, Vector4 vector) Parameters w BinaryWriter The BinaryWriter. vector Vector4 The value to write. Write(BinaryWriter, Token) Writes a token to the current stream and advances the stream position by eight bytes. public static void Write(this BinaryWriter w, Token token) Parameters w BinaryWriter The BinaryWriter. token Token The value to write. WriteObjectList<T>(BinaryWriter, List<T>) Writes a list of IBinarySerializable objects or various other types to the current stream and advances the stream position. public static void WriteObjectList<T>(this BinaryWriter w, List<T> list) Parameters w BinaryWriter The BinaryWriter. list List<T> The list to write. Type Parameters T The type of the list. Exceptions NotImplementedException WritePascalString(BinaryWriter, string) Writes a string in the format used in SCS's binary formats to the current stream and advances the stream position. public static void WritePascalString(this BinaryWriter w, string str) Parameters w BinaryWriter The BinaryWriter. str string The value to write."
  },
  "api/TruckLib.MathExtensions.html": {
    "href": "api/TruckLib.MathExtensions.html",
    "title": "Class MathExtensions | TruckLib",
    "keywords": "Class MathExtensions Namespace TruckLib Assembly TruckLib.Core.dll public static class MathExtensions Inheritance object MathExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToEuler(Quaternion) Converts a quaternion to Euler angles in YXZ order. public static Vector3 ToEuler(this Quaternion q) Parameters q Quaternion The quaternion. Returns Vector3 Euler angles in radians. ToEulerDeg(Quaternion) Converts a quaternion to Euler angles in degrees. public static Vector3 ToEulerDeg(this Quaternion q) Parameters q Quaternion The quaternion. Returns Vector3 Euler angles in degrees."
  },
  "api/TruckLib.MiscExtensions.html": {
    "href": "api/TruckLib.MiscExtensions.html",
    "title": "Class MiscExtensions | TruckLib",
    "keywords": "Class MiscExtensions Namespace TruckLib Assembly TruckLib.Core.dll public static class MiscExtensions Inheritance object MiscExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Push<T>(T[], T) Increases the size of the given array by one and adds the given item to it. If the array is null, a new array will be created. public static T[] Push<T>(this T[] arr, T item) Parameters arr T[] The array to append to. item T The object to append. Returns T[] The modified array. Type Parameters T The type of the array. ToByte(bool) Converts bool to byte. public static byte ToByte(this bool b) Parameters b bool The bool. Returns byte 1 if true, 0 if false."
  },
  "api/TruckLib.Models.AxisAlignedBox.html": {
    "href": "api/TruckLib.Models.AxisAlignedBox.html",
    "title": "Class AxisAlignedBox | TruckLib",
    "keywords": "Class AxisAlignedBox Namespace TruckLib.Models Assembly TruckLib.Models.dll Axis-aligned bounding box (AABB). public class AxisAlignedBox : IBinarySerializable Inheritance object AxisAlignedBox Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties End public Vector3 End { get; set; } Property Value Vector3 Start public Vector3 Start { get; set; } Property Value Vector3 Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.Models.Bone.html": {
    "href": "api/TruckLib.Models.Bone.html",
    "title": "Class Bone | TruckLib",
    "keywords": "Class Bone Namespace TruckLib.Models Assembly TruckLib.Models.dll public class Bone : IBinarySerializable Inheritance object Bone Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Name public Token Name { get; set; } Property Value Token Parent public int Parent { get; set; } Property Value int Rotation public Quaternion Rotation { get; set; } Property Value Quaternion Scale public Vector3 Scale { get; set; } Property Value Vector3 SignOfDeterminantOfMatrix public float SignOfDeterminantOfMatrix { get; set; } Property Value float Stretch public Quaternion Stretch { get; set; } Property Value Quaternion Transformation public Matrix4x4 Transformation { get; set; } Property Value Matrix4x4 TransformationReserved public Matrix4x4 TransformationReserved { get; set; } Property Value Matrix4x4 Translation public Vector3 Translation { get; set; } Property Value Vector3 Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/TruckLib.Models.Locator.html": {
    "href": "api/TruckLib.Models.Locator.html",
    "title": "Class Locator | TruckLib",
    "keywords": "Class Locator Namespace TruckLib.Models Assembly TruckLib.Models.dll public class Locator : IBinarySerializable Inheritance object Locator Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties HookupOffset public int HookupOffset { get; set; } Property Value int Name public Token Name { get; set; } Property Value Token Position public Vector3 Position { get; set; } Property Value Vector3 Rotation public Quaternion Rotation { get; set; } Property Value Quaternion Scale public float Scale { get; set; } Property Value float Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/TruckLib.Models.Look.html": {
    "href": "api/TruckLib.Models.Look.html",
    "title": "Class Look | TruckLib",
    "keywords": "Class Look Namespace TruckLib.Models Assembly TruckLib.Models.dll public class Look Inheritance object Look Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Look() public Look() Look(Token) public Look(Token name) Parameters name Token Properties Materials public List<string> Materials { get; set; } Property Value List<string> Name public Token Name { get; set; } Property Value Token Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/TruckLib.Models.Model.html": {
    "href": "api/TruckLib.Models.Model.html",
    "title": "Class Model | TruckLib",
    "keywords": "Class Model Namespace TruckLib.Models Assembly TruckLib.Models.dll Represents the metadata and geometry of a model. public class Model Inheritance object Model Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Model() public Model() Properties BoundingBox public AxisAlignedBox BoundingBox { get; set; } Property Value AxisAlignedBox BoundingBoxCenter public Vector3 BoundingBoxCenter { get; set; } Property Value Vector3 BoundingBoxDiagonalSize public float BoundingBoxDiagonalSize { get; set; } Property Value float Looks public List<Look> Looks { get; set; } Property Value List<Look> Parts public List<Part> Parts { get; set; } Property Value List<Part> Skeleton public List<Bone> Skeleton { get; set; } Property Value List<Bone> Variants public List<Variant> Variants { get; set; } Property Value List<Variant> Methods Load(byte[], byte[]) Loads a model from memory. public static Model Load(byte[] pmdBuffer, byte[] pmgBuffer) Parameters pmdBuffer byte[] The buffer containing the pmd file. pmgBuffer byte[] The buffer containing the pmg file. Returns Model A Model object. Load(Stream, Stream) Loads a model from memory. public static Model Load(Stream pmdStream, Stream pmgStream) Parameters pmdStream Stream pmgStream Stream Returns Model A Model object. Open(string) Reads a model from disk. public static Model Open(string pmdPath) Parameters pmdPath string The path to the pmd file of the model. Returns Model A Model object. Open(string, IFileSystem) Reads a model. public static Model Open(string pmdPath, IFileSystem fs) Parameters pmdPath string The path to the pmd file of the model. fs IFileSystem The file system to load the model files from. Returns Model A Model object. Save(string, string) public void Save(string directory, string name) Parameters directory string name string"
  },
  "api/TruckLib.Models.Part.html": {
    "href": "api/TruckLib.Models.Part.html",
    "title": "Class Part | TruckLib",
    "keywords": "Class Part Namespace TruckLib.Models Assembly TruckLib.Models.dll public class Part Inheritance object Part Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Part() public Part() Part(Token) public Part(Token name) Parameters name Token Properties Locators public List<Locator> Locators { get; set; } Property Value List<Locator> Name public Token Name { get; set; } Property Value Token Pieces public List<Piece> Pieces { get; set; } Property Value List<Piece> Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/TruckLib.Models.PartAttribute.html": {
    "href": "api/TruckLib.Models.PartAttribute.html",
    "title": "Class PartAttribute | TruckLib",
    "keywords": "Class PartAttribute Namespace TruckLib.Models Assembly TruckLib.Models.dll public class PartAttribute Inheritance object PartAttribute Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Tag public Token Tag { get; set; } Property Value Token Type public int Type { get; set; } Property Value int Value public uint Value { get; set; } Property Value uint Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/TruckLib.Models.Piece.html": {
    "href": "api/TruckLib.Models.Piece.html",
    "title": "Class Piece | TruckLib",
    "keywords": "Class Piece Namespace TruckLib.Models Assembly TruckLib.Models.dll public class Piece : IBinarySerializable Inheritance object Piece Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BoundingBox public AxisAlignedBox BoundingBox { get; set; } Property Value AxisAlignedBox BoundingBoxCenter public Vector3 BoundingBoxCenter { get; set; } Property Value Vector3 BoundingBoxDiagonalSize public float BoundingBoxDiagonalSize { get; set; } Property Value float Material public uint Material { get; set; } Property Value uint TextureCoordinateWidth public int TextureCoordinateWidth { get; set; } Property Value int Triangles public List<Triangle> Triangles { get; set; } Property Value List<Triangle> UseBoneIndexes public bool UseBoneIndexes { get; set; } Property Value bool UseBoneWeights public bool UseBoneWeights { get; set; } Property Value bool UseSecondaryColor public bool UseSecondaryColor { get; set; } Property Value bool UseTangents public bool UseTangents { get; set; } Property Value bool UseTextureCoordinates public bool UseTextureCoordinates { get; set; } Property Value bool Vertices public List<Vertex> Vertices { get; set; } Property Value List<Vertex> Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter WriteHeaderPart(BinaryWriter, int, int) public void WriteHeaderPart(BinaryWriter w, int vertStart, int trisStart) Parameters w BinaryWriter vertStart int trisStart int WriteTriangles(BinaryWriter) public void WriteTriangles(BinaryWriter w) Parameters w BinaryWriter WriteVertPart(BinaryWriter) public void WriteVertPart(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.Models.Ppd.AllowedVehicles.html": {
    "href": "api/TruckLib.Models.Ppd.AllowedVehicles.html",
    "title": "Enum AllowedVehicles | TruckLib",
    "keywords": "Enum AllowedVehicles Namespace TruckLib.Models.Ppd Assembly TruckLib.Models.dll public enum AllowedVehicles Fields AllVehicles = 3 LargeVehicles = 2 PlayerOnly = 0 SmallVehicles = 1"
  },
  "api/TruckLib.Models.Ppd.BlinkerType.html": {
    "href": "api/TruckLib.Models.Ppd.BlinkerType.html",
    "title": "Enum BlinkerType | TruckLib",
    "keywords": "Enum BlinkerType Namespace TruckLib.Models.Ppd Assembly TruckLib.Models.dll public enum BlinkerType Fields LeftBlinker = 4 NoBlinker = 0 NoBlinkerForced = 1 RightBlinker = 2"
  },
  "api/TruckLib.Models.Ppd.ControlNode.html": {
    "href": "api/TruckLib.Models.Ppd.ControlNode.html",
    "title": "Class ControlNode | TruckLib",
    "keywords": "Class ControlNode Namespace TruckLib.Models.Ppd Assembly TruckLib.Models.dll Represents a control node. public class ControlNode : IBinarySerializable Inheritance object ControlNode Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Direction public Vector3 Direction { get; set; } Property Value Vector3 InputLines public int[] InputLines { get; set; } Property Value int[] OutputLines public int[] OutputLines { get; set; } Property Value int[] Position public Vector3 Position { get; set; } Property Value Vector3 TerrainPointCount public uint TerrainPointCount { get; set; } Property Value uint TerrainPointIndex public uint TerrainPointIndex { get; set; } Property Value uint VariantCount public uint VariantCount { get; set; } Property Value uint VariantIdx public uint VariantIdx { get; set; } Property Value uint Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.Models.Ppd.CustomColor.html": {
    "href": "api/TruckLib.Models.Ppd.CustomColor.html",
    "title": "Enum CustomColor | TruckLib",
    "keywords": "Enum CustomColor Namespace TruckLib.Models.Ppd Assembly TruckLib.Models.dll Color of prefab MapPoint polygons. public enum CustomColor Fields Dark = 2 Used for buildings. Green = 4 Used for grass and inaccessible prefab areas. Light = 1 Used for accessible prefab areas. None = 0"
  },
  "api/TruckLib.Models.Ppd.Intersection.html": {
    "href": "api/TruckLib.Models.Ppd.Intersection.html",
    "title": "Class Intersection | TruckLib",
    "keywords": "Class Intersection Namespace TruckLib.Models.Ppd Assembly TruckLib.Models.dll public class Intersection : IBinarySerializable Inheritance object Intersection Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CurveId public uint CurveId { get; set; } Property Value uint Flags public FlagField Flags { get; set; } Property Value FlagField Position public float Position { get; set; } Property Value float Radius public float Radius { get; set; } Property Value float Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.Models.Ppd.Lookup.PriorityModifier.html": {
    "href": "api/TruckLib.Models.Ppd.Lookup.PriorityModifier.html",
    "title": "Class PriorityModifier | TruckLib",
    "keywords": "Class PriorityModifier Namespace TruckLib.Models.Ppd.Lookup Assembly TruckLib.Models.dll public static class PriorityModifier Inheritance object PriorityModifier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields MajorRoadLeft public static readonly byte MajorRoadLeft Field Value byte MajorRoadRight public static readonly byte MajorRoadRight Field Value byte MajorRoadStraight public static readonly byte MajorRoadStraight Field Value byte MinorRoadLeft public static readonly byte MinorRoadLeft Field Value byte MinorRoadRight public static readonly byte MinorRoadRight Field Value byte MinorRoadStraight public static readonly byte MinorRoadStraight Field Value byte"
  },
  "api/TruckLib.Models.Ppd.Lookup.html": {
    "href": "api/TruckLib.Models.Ppd.Lookup.html",
    "title": "Namespace TruckLib.Models.Ppd.Lookup | TruckLib",
    "keywords": "Namespace TruckLib.Models.Ppd.Lookup Classes PriorityModifier"
  },
  "api/TruckLib.Models.Ppd.MapPoint.html": {
    "href": "api/TruckLib.Models.Ppd.MapPoint.html",
    "title": "Class MapPoint | TruckLib",
    "keywords": "Class MapPoint Namespace TruckLib.Models.Ppd Assembly TruckLib.Models.dll Represents a map point which is used to draw a representation of the item to the UI map. public class MapPoint : IBinarySerializable Inheritance object MapPoint Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Arrow Determines if the UI map will display green arrows or not. This is useful in the case prefabs are using more that 2 control nodes and paths for navigation are still clear. public bool Arrow { get; set; } Property Value bool Color Color of the polygon if RoadSize is set to Polygon. public CustomColor Color { get; set; } Property Value CustomColor ExtValue TODO: What is this? public byte ExtValue { get; set; } Property Value byte Neighbours public int[] Neighbours { get; set; } Property Value int[] Outline Property marking no outline drawing. This might be useful for buildings drawing. public bool Outline { get; set; } Property Value bool Position public Vector3 Position { get; set; } Property Value Vector3 PrefabExit Mark the approximate location of the prefab exit. (useful for company prefabs where navigation will navigate from/to this point.) public bool PrefabExit { get; set; } Property Value bool RoadOffset The distance between road lanes. public RoadOffset RoadOffset { get; set; } Property Value RoadOffset RoadOffsetLane TODO: What is this? public bool RoadOffsetLane { get; set; } Property Value bool RoadOver Determines if this map point will be drawn on top of all map points without this flag. public bool RoadOver { get; set; } Property Value bool RoadSize The type of road this map point should visualize. If set to Polygon, this map point will be used for visualizing polygons instead of a road and has to be connected to three other points to form a quad. public RoadSize RoadSize { get; set; } Property Value RoadSize Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.Models.Ppd.NavCurve.html": {
    "href": "api/TruckLib.Models.Ppd.NavCurve.html",
    "title": "Class NavCurve | TruckLib",
    "keywords": "Class NavCurve Namespace TruckLib.Models.Ppd Assembly TruckLib.Models.dll Represents a navigation curve, used to define AI traffic paths and GPS navigation. public class NavCurve : IBinarySerializable Inheritance object NavCurve Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AdditivePriority Determines if the PriorityModifier value will be added to already existing priority for this lane. public bool AdditivePriority { get; set; } Property Value bool AllowedVehicles Determines which AI vehicles can use this curve. AI vehicles will try to go into most suitable curve, but if there will be none, they can also use any other even if they are not allowed to. public AllowedVehicles AllowedVehicles { get; set; } Property Value AllowedVehicles Blinker public BlinkerType Blinker { get; set; } Property Value BlinkerType CountNext public uint CountNext { get; set; } Property Value uint CountPrevious public uint CountPrevious { get; set; } Property Value uint EndPosition public Vector3 EndPosition { get; set; } Property Value Vector3 EndRotation public Quaternion EndRotation { get; set; } Property Value Quaternion LeadsToNodes public (byte EndNode, byte EndLane, byte StartNode, byte StartLane) LeadsToNodes { get; set; } Property Value (byte EndNode, byte EndLane, byte StartNode, byte StartLane) Length public float Length { get; set; } Property Value float LimitDisplacement Property defining extra limited displacement for AI vehicles. public bool LimitDisplacement { get; set; } Property Value bool LowProbability Determines if the probability of AI vehicles entering this (prefab? nav. path?) is lowered. public bool LowProbability { get; set; } Property Value bool Name public Token Name { get; set; } Property Value Token NewData1Id public uint NewData1Id { get; set; } Property Value uint NextLines public int[] NextLines { get; set; } Property Value int[] PreviousLines public int[] PreviousLines { get; set; } Property Value int[] PriorityModifier public Nibble PriorityModifier { get; set; } Property Value Nibble SemaphoreId public int SemaphoreId { get; set; } Property Value int StartPosition public Vector3 StartPosition { get; set; } Property Value Vector3 StartRotation public Quaternion StartRotation { get; set; } Property Value Quaternion TrafficRule public Token TrafficRule { get; set; } Property Value Token Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Deserialize15(BinaryReader) public void Deserialize15(BinaryReader r) Parameters r BinaryReader Deserialize16to18(BinaryReader) public void Deserialize16to18(BinaryReader r) Parameters r BinaryReader Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.Models.Ppd.PrefabDescriptor.html": {
    "href": "api/TruckLib.Models.Ppd.PrefabDescriptor.html",
    "title": "Class PrefabDescriptor | TruckLib",
    "keywords": "Class PrefabDescriptor Namespace TruckLib.Models.Ppd Assembly TruckLib.Models.dll Represents a prefab descriptor (.ppd) file. public class PrefabDescriptor : IBinarySerializable Inheritance object PrefabDescriptor Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Intersections public List<Intersection> Intersections { get; set; } Property Value List<Intersection> MapPoints public List<MapPoint> MapPoints { get; set; } Property Value List<MapPoint> NavCurves public List<NavCurve> NavCurves { get; set; } Property Value List<NavCurve> Nodes public List<ControlNode> Nodes { get; set; } Property Value List<ControlNode> Semaphores public List<Semaphore> Semaphores { get; set; } Property Value List<Semaphore> Signs public List<Sign> Signs { get; set; } Property Value List<Sign> SpawnPoints public List<SpawnPoint> SpawnPoints { get; set; } Property Value List<SpawnPoint> TerrainPointNormals public List<Vector3> TerrainPointNormals { get; set; } Property Value List<Vector3> TerrainPointPositions public List<Vector3> TerrainPointPositions { get; set; } Property Value List<Vector3> TerrainPointVariants public List<TerrainPointVariant> TerrainPointVariants { get; set; } Property Value List<TerrainPointVariant> TriggerPoints public List<TriggerPoint> TriggerPoints { get; set; } Property Value List<TriggerPoint> Unknown public List<uint[]> Unknown { get; set; } Property Value List<uint[]> Version public uint Version { get; } Property Value uint Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Exceptions NotSupportedException Thrown if the descriptor version is not supported. Load(byte[]) Reads a ppd file from memory. public static PrefabDescriptor Load(byte[] ppdBuffer) Parameters ppdBuffer byte[] The buffer containing the file. Returns PrefabDescriptor The prefab descriptor. Exceptions NotSupportedException Thrown if the descriptor version is not supported. Load(Stream) Reads a ppd file from memory. public static PrefabDescriptor Load(Stream ppdStream) Parameters ppdStream Stream The stream containing the file. Returns PrefabDescriptor The prefab descriptor. Exceptions NotSupportedException Thrown if the descriptor version is not supported. Open(string) Reads a ppd file from disk. public static PrefabDescriptor Open(string path) Parameters path string The path to the file. Returns PrefabDescriptor The prefab descriptor. Exceptions NotSupportedException Thrown if the descriptor version is not supported. Open(string, IFileSystem) Reads a ppd file from disk. public static PrefabDescriptor Open(string path, IFileSystem fs) Parameters path string The path to the file. fs IFileSystem The file system to load the file from. Returns PrefabDescriptor The prefab descriptor. Exceptions NotSupportedException Thrown if the descriptor version is not supported. Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.Models.Ppd.RoadOffset.html": {
    "href": "api/TruckLib.Models.Ppd.RoadOffset.html",
    "title": "Enum RoadOffset | TruckLib",
    "keywords": "Enum RoadOffset Namespace TruckLib.Models.Ppd Assembly TruckLib.Models.dll Distance between road lanes in the UI map representation of a prefab road. public enum RoadOffset Fields Meters0 = 0 Meters1 = 1 Meters10 = 4 Meters15 = 5 Meters2 = 2 Meters20 = 6 Meters25 = 7 Meters5 = 3"
  },
  "api/TruckLib.Models.Ppd.RoadSize.html": {
    "href": "api/TruckLib.Models.Ppd.RoadSize.html",
    "title": "Enum RoadSize | TruckLib",
    "keywords": "Enum RoadSize Namespace TruckLib.Models.Ppd Assembly TruckLib.Models.dll The type of road to draw as the UI map representation of a prefab road. public enum RoadSize Fields Auto = 14 FourLaneSplit = 7 FourLanes = 4 OneLane = 1 OneWay = 0 Polygon = 13 ThreeLaneSplit = 6 ThreeLanes = 3 ThreeLanesOneWay = 8 TwoLaneSplit = 5 TwoLanes = 2"
  },
  "api/TruckLib.Models.Ppd.Semaphore.html": {
    "href": "api/TruckLib.Models.Ppd.Semaphore.html",
    "title": "Class Semaphore | TruckLib",
    "keywords": "Class Semaphore Namespace TruckLib.Models.Ppd Assembly TruckLib.Models.dll Represents a semaphore locator. public class Semaphore : IBinarySerializable Inheritance object Semaphore Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CycleDelay Delay for which each semaphore cycle will be delayed before starting again. Enabled only if Type is not UseProfile. public float CycleDelay { get; set; } Property Value float Intervals Intervals/distances for each state of a semaphore. Enabled only if Type is not UseProfile. public Vector4 Intervals { get; set; } Property Value Vector4 Position public Vector3 Position { get; set; } Property Value Vector3 Profile public Token Profile { get; set; } Property Value Token Rotation public Quaternion Rotation { get; set; } Property Value Quaternion SemaphoreId public uint SemaphoreId { get; set; } Property Value uint Type public SemaphoreType Type { get; set; } Property Value SemaphoreType Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.Models.Ppd.SemaphoreType.html": {
    "href": "api/TruckLib.Models.Ppd.SemaphoreType.html",
    "title": "Enum SemaphoreType | TruckLib",
    "keywords": "Enum SemaphoreType Namespace TruckLib.Models.Ppd Assembly TruckLib.Models.dll Type of a prefab semaphore. public enum SemaphoreType Fields BarrierAutomatic = 10 BarrierDistanceActivated = 6 BarrierGas = 8 BarrierManualTimed = 5 ModelOnly = 1 TrafficLight = 2 TrafficLightBlockable = 7 TrafficLightMajor = 4 TrafficLightMinor = 3 TrafficLightVirtual = 9 UseProfile = 0"
  },
  "api/TruckLib.Models.Ppd.Sign.html": {
    "href": "api/TruckLib.Models.Ppd.Sign.html",
    "title": "Class Sign | TruckLib",
    "keywords": "Class Sign Namespace TruckLib.Models.Ppd Assembly TruckLib.Models.dll Represents a point where a sign or other static models will be added at runtime. public class Sign : IBinarySerializable Inheritance object Sign Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Model public Token Model { get; set; } Property Value Token Name public Token Name { get; set; } Property Value Token Part public Token Part { get; set; } Property Value Token Position public Vector3 Position { get; set; } Property Value Vector3 Rotation public Quaternion Rotation { get; set; } Property Value Quaternion Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.Models.Ppd.SpawnPoint.html": {
    "href": "api/TruckLib.Models.Ppd.SpawnPoint.html",
    "title": "Class SpawnPoint | TruckLib",
    "keywords": "Class SpawnPoint Namespace TruckLib.Models.Ppd Assembly TruckLib.Models.dll Represents a locator for various activators and spawn points prefabs use. public class SpawnPoint : IBinarySerializable Inheritance object SpawnPoint Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Position public Vector3 Position { get; set; } Property Value Vector3 Rotation public Quaternion Rotation { get; set; } Property Value Quaternion Type public SpawnPointType Type { get; set; } Property Value SpawnPointType Unknown public uint Unknown { get; set; } Property Value uint Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.Models.Ppd.SpawnPointType.html": {
    "href": "api/TruckLib.Models.Ppd.SpawnPointType.html",
    "title": "Enum SpawnPointType | TruckLib",
    "keywords": "Enum SpawnPointType Namespace TruckLib.Models.Ppd Assembly TruckLib.Models.dll Spawn type of a SpawnPoint prefab locator. public enum SpawnPointType Fields BusStation = 18 BuyPoint = 15 The point where a garage can be bought. CameraPoint = 17 CompanyPoint = 13 CompanyUnload = 23 Custom = 9 GaragePoint = 14 GasStation = 3 Hotel = 8 LongTrailer = 25 Meet = 12 None = 0 Parking = 10 Recruitment = 16 ServiceStation = 4 Task = 11 Trailer = 1 TrailerSpawn = 24 The point where an owned trailer is spawned at a garage. TruckDealer = 7 TruckStop = 5 UnloadEasy = 2 UnloadHard = 20 UnloadMedium = 19 UnloadRigid = 21 WeighStation = 6 WeighStationCat = 22"
  },
  "api/TruckLib.Models.Ppd.TerrainPointVariant.html": {
    "href": "api/TruckLib.Models.Ppd.TerrainPointVariant.html",
    "title": "Class TerrainPointVariant | TruckLib",
    "keywords": "Class TerrainPointVariant Namespace TruckLib.Models.Ppd Assembly TruckLib.Models.dll public class TerrainPointVariant : IBinarySerializable Inheritance object TerrainPointVariant Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Attach0 public uint Attach0 { get; set; } Property Value uint Attach1 public uint Attach1 { get; set; } Property Value uint Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.Models.Ppd.TriggerPoint.html": {
    "href": "api/TruckLib.Models.Ppd.TriggerPoint.html",
    "title": "Class TriggerPoint | TruckLib",
    "keywords": "Class TriggerPoint Namespace TruckLib.Models.Ppd Assembly TruckLib.Models.dll Represents an area that triggers an action, such as a rest area. public class TriggerPoint : IBinarySerializable Inheritance object TriggerPoint Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Action The trigger action. public Token Action { get; set; } Property Value Token ManualActivation Determines if the player has to activate the trigger action manually. public bool ManualActivation { get; set; } Property Value bool Neighbours public int[] Neighbours { get; set; } Property Value int[] OneTimeActivation Determines if this trigger point can only be activated once. public bool OneTimeActivation { get; set; } Property Value bool PartialActivation Determines if the trigger activates as soon as the player touches the border. public bool PartialActivation { get; set; } Property Value bool Position public Vector3 Position { get; set; } Property Value Vector3 Range Range of the trigger point or area of activation. If SphereTrigger is true, this property defines the radius around the trigger point. Otherwise, it defines the vertical range of the trigger area. public float Range { get; set; } Property Value float ResetDelay How long the player has to be outside the trigger area until it can be activated again, in seconds. public float ResetDelay { get; set; } Property Value float ResetDistance public float ResetDistance { get; set; } Property Value float SphereTrigger Determines if this trigger point is a sphere trigger. In this case, this point should not be connected to any other trigger point. public bool SphereTrigger { get; set; } Property Value bool TriggerId public uint TriggerId { get; set; } Property Value uint Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.Models.Ppd.html": {
    "href": "api/TruckLib.Models.Ppd.html",
    "title": "Namespace TruckLib.Models.Ppd | TruckLib",
    "keywords": "Namespace TruckLib.Models.Ppd Classes ControlNode Represents a control node. Intersection MapPoint Represents a map point which is used to draw a representation of the item to the UI map. NavCurve Represents a navigation curve, used to define AI traffic paths and GPS navigation. PrefabDescriptor Represents a prefab descriptor (.ppd) file. Semaphore Represents a semaphore locator. Sign Represents a point where a sign or other static models will be added at runtime. SpawnPoint Represents a locator for various activators and spawn points prefabs use. TerrainPointVariant TriggerPoint Represents an area that triggers an action, such as a rest area. Enums AllowedVehicles BlinkerType CustomColor Color of prefab MapPoint polygons. RoadOffset Distance between road lanes in the UI map representation of a prefab road. RoadSize The type of road to draw as the UI map representation of a prefab road. SemaphoreType Type of a prefab semaphore. SpawnPointType Spawn type of a SpawnPoint prefab locator."
  },
  "api/TruckLib.Models.Tobj.html": {
    "href": "api/TruckLib.Models.Tobj.html",
    "title": "Class Tobj | TruckLib",
    "keywords": "Class Tobj Namespace TruckLib.Models Assembly TruckLib.Models.dll Represents a texture object file. public class Tobj : IBinarySerializable Inheritance object Tobj Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AddrU public TobjAddr AddrU { get; set; } Property Value TobjAddr AddrV public TobjAddr AddrV { get; set; } Property Value TobjAddr AddrW public TobjAddr AddrW { get; set; } Property Value TobjAddr Anisotropic public bool Anisotropic { get; set; } Property Value bool Bias public byte Bias { get; set; } Property Value byte ColorSpace public byte ColorSpace { get; set; } Property Value byte Compress public bool Compress { get; set; } Property Value bool MagFilter public TobjFilter MagFilter { get; set; } Property Value TobjFilter MinFilter public TobjFilter MinFilter { get; set; } Property Value TobjFilter MipFilter public TobjMipFilter MipFilter { get; set; } Property Value TobjMipFilter TexturePaths public List<string> TexturePaths { get; set; } Property Value List<string> Type public TobjType Type { get; set; } Property Value TobjType Unknown10 public byte Unknown10 { get; set; } Property Value byte Unknown4 public ushort Unknown4 { get; set; } Property Value ushort Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Load(byte[]) public static Tobj Load(byte[] tobjBytes) Parameters tobjBytes byte[] Returns Tobj Open(string) public static Tobj Open(string tobjPath) Parameters tobjPath string Returns Tobj Save(string) public void Save(string tobjPath) Parameters tobjPath string Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.Models.TobjAddr.html": {
    "href": "api/TruckLib.Models.TobjAddr.html",
    "title": "Enum TobjAddr | TruckLib",
    "keywords": "Enum TobjAddr Namespace TruckLib.Models Assembly TruckLib.Models.dll public enum TobjAddr Fields Clamp = 1 ClampToBorder = 3 ClampToEdge = 2 Mirror = 4 MirrorClamp = 5 MirrorClampToEdge = 6 Repeat = 0"
  },
  "api/TruckLib.Models.TobjFilter.html": {
    "href": "api/TruckLib.Models.TobjFilter.html",
    "title": "Enum TobjFilter | TruckLib",
    "keywords": "Enum TobjFilter Namespace TruckLib.Models Assembly TruckLib.Models.dll public enum TobjFilter Fields Default = 3 Linear = 1 Nearest = 0 NoMips = 2"
  },
  "api/TruckLib.Models.TobjMipFilter.html": {
    "href": "api/TruckLib.Models.TobjMipFilter.html",
    "title": "Enum TobjMipFilter | TruckLib",
    "keywords": "Enum TobjMipFilter Namespace TruckLib.Models Assembly TruckLib.Models.dll public enum TobjMipFilter Fields Default = 3 Nearest = 0 NoMips = 2 Trilinear = 1"
  },
  "api/TruckLib.Models.TobjType.html": {
    "href": "api/TruckLib.Models.TobjType.html",
    "title": "Enum TobjType | TruckLib",
    "keywords": "Enum TobjType Namespace TruckLib.Models Assembly TruckLib.Models.dll public enum TobjType Fields CubeMap = 5 Map1D = 1 Map2D = 2 Map3D = 3"
  },
  "api/TruckLib.Models.Triangle.html": {
    "href": "api/TruckLib.Models.Triangle.html",
    "title": "Struct Triangle | TruckLib",
    "keywords": "Struct Triangle Namespace TruckLib.Models Assembly TruckLib.Models.dll public struct Triangle : IBinarySerializable Implements IBinarySerializable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Triangle(ushort, ushort, ushort) public Triangle(ushort a, ushort b, ushort c) Parameters a ushort b ushort c ushort Properties A public ushort A { readonly get; set; } Property Value ushort B public ushort B { readonly get; set; } Property Value ushort C public ushort C { readonly get; set; } Property Value ushort Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? InvertOrder() Inverts the order of vertices from CW to CCW or vice versa. public void InvertOrder() Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/TruckLib.Models.Variant.html": {
    "href": "api/TruckLib.Models.Variant.html",
    "title": "Class Variant | TruckLib",
    "keywords": "Class Variant Namespace TruckLib.Models Assembly TruckLib.Models.dll public class Variant Inheritance object Variant Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Variant(Token) public Variant(Token name) Parameters name Token Properties Attributes public List<PartAttribute> Attributes { get; set; } Property Value List<PartAttribute> Name public Token Name { get; set; } Property Value Token Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/TruckLib.Models.Vertex.html": {
    "href": "api/TruckLib.Models.Vertex.html",
    "title": "Class Vertex | TruckLib",
    "keywords": "Class Vertex Namespace TruckLib.Models Assembly TruckLib.Models.dll public class Vertex Inheritance object Vertex Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Vertex(Vector3) public Vertex(Vector3 position) Parameters position Vector3 Vertex(Vector3, Vector3) public Vertex(Vector3 position, Vector3 normal) Parameters position Vector3 normal Vector3 Vertex(float, float, float) public Vertex(float x, float y, float z) Parameters x float y float z float Properties BoneIndexes public byte[] BoneIndexes { get; set; } Property Value byte[] BoneWeights public byte[] BoneWeights { get; set; } Property Value byte[] Color public Color Color { get; set; } Property Value Color Normal public Vector3 Normal { get; set; } Property Value Vector3 Position public Vector3 Position { get; set; } Property Value Vector3 SecondaryColor public Color? SecondaryColor { get; set; } Property Value Color? Tangent public Vector4? Tangent { get; set; } Property Value Vector4? TextureCoordinates public List<Vector2> TextureCoordinates { get; set; } Property Value List<Vector2> Methods Clone() public Vertex Clone() Returns Vertex ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/TruckLib.Models.html": {
    "href": "api/TruckLib.Models.html",
    "title": "Namespace TruckLib.Models | TruckLib",
    "keywords": "Namespace TruckLib.Models Classes AxisAlignedBox Axis-aligned bounding box (AABB). Bone Locator Look Model Represents the metadata and geometry of a model. Part PartAttribute Piece Tobj Represents a texture object file. Variant Vertex Structs Triangle Enums TobjAddr TobjFilter TobjMipFilter TobjType"
  },
  "api/TruckLib.Nibble.html": {
    "href": "api/TruckLib.Nibble.html",
    "title": "Struct Nibble | TruckLib",
    "keywords": "Struct Nibble Namespace TruckLib Assembly TruckLib.Core.dll Represents an unsigned half-byte integer. public struct Nibble Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Nibble(byte) Instantiates a nibble. public Nibble(byte value) Parameters value byte The initial value. Fields MaxValue Represents the largest possible value of a nibble. public const byte MaxValue = 15 Field Value byte MinValue Represents the smallest possible value of a nibble. public const byte MinValue = 0 Field Value byte Methods Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Converts the nibble to string. public override string ToString() Returns string The nibble as string. Operators operator +(int, Nibble) public static Nibble operator +(int a, Nibble b) Parameters a int b Nibble Returns Nibble operator +(Nibble, int) public static Nibble operator +(Nibble a, int b) Parameters a Nibble b int Returns Nibble operator +(Nibble, Nibble) public static Nibble operator +(Nibble a, Nibble b) Parameters a Nibble b Nibble Returns Nibble operator --(Nibble) public static Nibble operator --(Nibble a) Parameters a Nibble Returns Nibble operator ==(int, Nibble) public static bool operator ==(int a, Nibble b) Parameters a int b Nibble Returns bool operator ==(Nibble, int) public static bool operator ==(Nibble a, int b) Parameters a Nibble b int Returns bool operator ==(Nibble, Nibble) public static bool operator ==(Nibble a, Nibble b) Parameters a Nibble b Nibble Returns bool explicit operator Nibble(byte) public static explicit operator Nibble(byte b) Parameters b byte Returns Nibble explicit operator Nibble(short) public static explicit operator Nibble(short i) Parameters i short Returns Nibble explicit operator Nibble(int) public static explicit operator Nibble(int i) Parameters i int Returns Nibble explicit operator Nibble(ushort) public static explicit operator Nibble(ushort i) Parameters i ushort Returns Nibble explicit operator Nibble(uint) public static explicit operator Nibble(uint i) Parameters i uint Returns Nibble explicit operator byte(Nibble) public static explicit operator byte(Nibble n) Parameters n Nibble Returns byte operator >(int, Nibble) public static bool operator >(int a, Nibble b) Parameters a int b Nibble Returns bool operator >(Nibble, int) public static bool operator >(Nibble a, int b) Parameters a Nibble b int Returns bool operator >(Nibble, Nibble) public static bool operator >(Nibble a, Nibble b) Parameters a Nibble b Nibble Returns bool operator ++(Nibble) public static Nibble operator ++(Nibble a) Parameters a Nibble Returns Nibble operator !=(int, Nibble) public static bool operator !=(int a, Nibble b) Parameters a int b Nibble Returns bool operator !=(Nibble, int) public static bool operator !=(Nibble a, int b) Parameters a Nibble b int Returns bool operator !=(Nibble, Nibble) public static bool operator !=(Nibble a, Nibble b) Parameters a Nibble b Nibble Returns bool operator <(int, Nibble) public static bool operator <(int a, Nibble b) Parameters a int b Nibble Returns bool operator <(Nibble, int) public static bool operator <(Nibble a, int b) Parameters a Nibble b int Returns bool operator <(Nibble, Nibble) public static bool operator <(Nibble a, Nibble b) Parameters a Nibble b Nibble Returns bool operator -(int, Nibble) public static Nibble operator -(int a, Nibble b) Parameters a int b Nibble Returns Nibble operator -(Nibble, int) public static Nibble operator -(Nibble a, int b) Parameters a Nibble b int Returns Nibble operator -(Nibble, Nibble) public static Nibble operator -(Nibble a, Nibble b) Parameters a Nibble b Nibble Returns Nibble"
  },
  "api/TruckLib.ScsMap.ActionBase.html": {
    "href": "api/TruckLib.ScsMap.ActionBase.html",
    "title": "Class ActionBase | TruckLib",
    "keywords": "Class ActionBase Namespace TruckLib.ScsMap Assembly TruckLib.dll Base class for CutsceneAction and TriggerAction. public abstract class ActionBase : IBinarySerializable Inheritance object ActionBase Implements IBinarySerializable Derived CutsceneAction TriggerAction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ActionFlags protected FlagField ActionFlags Field Value FlagField Properties NumParams public List<float> NumParams { get; set; } Property Value List<float> StringParams public List<string> StringParams { get; set; } Property Value List<string> TargetRange public float TargetRange { get; set; } Property Value float TargetTags public List<Token> TargetTags { get; set; } Property Value List<Token> Methods Deserialize(BinaryReader, uint?) public virtual void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public virtual void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.ScsMap.ActionType.html": {
    "href": "api/TruckLib.ScsMap.ActionType.html",
    "title": "Enum ActionType | TruckLib",
    "keywords": "Enum ActionType Namespace TruckLib.ScsMap Assembly TruckLib.dll Action type for triggers. public enum ActionType Fields Condition = 1 ConditionRetry = 4 Default = 0 Fallback = 2 Mandatory = 3"
  },
  "api/TruckLib.ScsMap.AnimatedModel.html": {
    "href": "api/TruckLib.ScsMap.AnimatedModel.html",
    "title": "Class AnimatedModel | TruckLib",
    "keywords": "Class AnimatedModel Namespace TruckLib.ScsMap Assembly TruckLib.dll TODO: What even is this? [Obsolete] public class AnimatedModel : SingleNodeItem, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem AnimatedModel Implements IMapItem IMapObject Inherited Members SingleNodeItem.Node SingleNodeItem.Move(Vector3) SingleNodeItem.Translate(Vector3) MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Removed from the editor item menu, but it's still in the game and the item properties dialog still works. Constructors AnimatedModel() public AnimatedModel() Properties DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort InitHidden public bool InitHidden { get; set; } Property Value bool ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Model Unit name of the model. public Token Model { get; set; } Property Value Token Tags public List<Token> Tags { get; set; } Property Value List<Token> Methods Add(IItemContainer, Vector3, Token, List<Token>) Adds an AnimatedModel to the map. public static AnimatedModel Add(IItemContainer map, Vector3 position, Token model, List<Token> tags = null) Parameters map IItemContainer The map. position Vector3 The position of the item. model Token The unit name of the model. tags List<Token> A list of tags, Returns AnimatedModel The newly created AnimatedModel. Init() Sets the item's properties to its default values. protected override void Init()"
  },
  "api/TruckLib.ScsMap.BezierPatch.html": {
    "href": "api/TruckLib.ScsMap.BezierPatch.html",
    "title": "Class BezierPatch | TruckLib",
    "keywords": "Class BezierPatch Namespace TruckLib.ScsMap Assembly TruckLib.dll A piece of terrain created by a Bézier surface. public class BezierPatch : SingleNodeItem, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem BezierPatch Implements IMapItem IMapObject Inherited Members SingleNodeItem.Node SingleNodeItem.Move(Vector3) SingleNodeItem.Translate(Vector3) MapItem.ItemFile MapItem.Uid MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BezierPatch() public BezierPatch() Properties Collision Gets or sets if collision is enabled. public bool Collision { get; set; } Property Value bool ControlPoints Control points of the bezier patch, relative to the item node. public Vector3[,] ControlPoints { get; set; } Property Value Vector3[,] DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort DetailVegetation Gets or sets if detail vegetation (small clumps of grass etc.) is rendered if the selected terrain material supports it. public bool DetailVegetation { get; set; } Property Value bool IgnoreCutPlanes Gets or sets if this item will render behind a cut plane. public bool IgnoreCutPlanes { get; set; } Property Value bool InvertVegetationSpheres Gets or sets if vegetation spheres are inverted, only placing vegetation inside rather than outisde of them. public bool InvertVegetationSpheres { get; set; } Property Value bool ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType LowPolyVegetation Gets or sets if vegetation is rendered as flat textures only. public bool LowPolyVegetation { get; set; } Property Value bool NoisePower Gets or sets the strength of random noise applied to the vertices of the terrain. public TerrainNoise NoisePower { get; set; } Property Value TerrainNoise QuadData Gets or sets the terrain quad data of this Bézier patch. public TerrainQuadData QuadData { get; set; } Property Value TerrainQuadData RandomSeed Gets or sets the seed for the RNG which determines which vegetation models to place. The position of the models does not appear to be affected by this. public uint RandomSeed { get; set; } Property Value uint SmoothDetailVegetation Gets or sets if detail vegetation transitions smoothly in places where it is affected by brushes. public bool SmoothDetailVegetation { get; set; } Property Value bool TerrainShadows public bool TerrainShadows { get; set; } Property Value bool Vegetation The vegetation on this Bézier patch. A maximum of three vegetation types can be used. public Vegetation[] Vegetation { get; } Property Value Vegetation[] VegetationCollision Gets or sets if the player can collide with vegetation. public bool VegetationCollision { get; set; } Property Value bool VegetationSpheres The vegetation spheres on this Bézier patch. public List<VegetationSphere> VegetationSpheres { get; set; } Property Value List<VegetationSphere> ViewDistance Gets or sets the view distance of the item in meters. public ushort ViewDistance { get; set; } Property Value ushort WaterReflection Gets or sets if the item is reflected on water surfaces. public bool WaterReflection { get; set; } Property Value bool XTesselation Amount of quads on the X axis. public ushort XTesselation { get; set; } Property Value ushort ZTesselation Amount of quads on the Z axis. public ushort ZTesselation { get; set; } Property Value ushort Methods Add(IItemContainer, Vector3, Vector3[,]) Adds a new Bézier patch to the map. public static BezierPatch Add(IItemContainer map, Vector3 position, Vector3[,] controlPoints) Parameters map IItemContainer The map. position Vector3 The center point of the item. controlPoints Vector3[,] The control points of the item. Returns BezierPatch The newly created Bézier patch. Add(IItemContainer, Vector3, float, float) Adds a new Bézier patch to the map. public static BezierPatch Add(IItemContainer map, Vector3 position, float width, float height) Parameters map IItemContainer The map. position Vector3 The center point of the item. width float Width of the item. height float Height of the item. Returns BezierPatch The newly created Bézier patch. Init() Sets the item's properties to its default values. protected override void Init()"
  },
  "api/TruckLib.ScsMap.BlinkerType.html": {
    "href": "api/TruckLib.ScsMap.BlinkerType.html",
    "title": "Enum BlinkerType | TruckLib",
    "keywords": "Enum BlinkerType Namespace TruckLib.ScsMap Assembly TruckLib.dll Blinker type for Trajectory items. public enum BlinkerType Fields LeftBlinker = 4 NoBlinker = 0 NoBlinkerForced = 1 RightBlinker = 2"
  },
  "api/TruckLib.ScsMap.Buildings.html": {
    "href": "api/TruckLib.ScsMap.Buildings.html",
    "title": "Class Buildings | TruckLib",
    "keywords": "Class Buildings Namespace TruckLib.ScsMap Assembly TruckLib.dll A Buildings segment, which repeats one or more models along a path. public class Buildings : PolylineItem, IMapItem, IMapObject Inheritance object MapItem PolylineItem Buildings Implements IMapItem IMapObject Inherited Members PolylineItem.BackwardItem PolylineItem.ForwardItem PolylineItem.Node PolylineItem.ForwardNode PolylineItem.Length PolylineItem.FindFirstItem() PolylineItem.FindLastItem() PolylineItem.Recalculate() PolylineItem.Move(Vector3) PolylineItem.Translate(Vector3) MapItem.ItemFile MapItem.Uid MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Buildings() public Buildings() Properties Accessories Gets or sets if accessories are enabled. public bool Accessories { get; set; } Property Value bool Collision Gets or sets if collision is enabled. public bool Collision { get; set; } Property Value bool ColorVariant 1-indexed color variant of the model. Set to 0 if there aren't any. public byte ColorVariant { get; set; } Property Value byte DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort DlcGuard public byte DlcGuard { get; set; } Property Value byte HeightOffsets Height offsets for individual elements of the building. Offsets are applied to elements in order. For instance, if you want the third element to have an offset of 5, the content of the list should be [0, 0, 5]. public List<float> HeightOffsets { get; set; } Property Value List<float> IgnoreCutPlanes Gets or sets if this item will render behind a cut plane. public bool IgnoreCutPlanes { get; set; } Property Value bool ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Look The look of the building model. public Token Look { get; set; } Property Value Token MirrorReflection Gets or sets if this item is visible in mirrors. public bool MirrorReflection { get; set; } Property Value bool Name The unit name of the building scheme, as defined in /def/world/building_scheme.sii. public Token Name { get; set; } Property Value Token RandomSeed Gets or sets the seed for the RNG which determines which vegetation models to place. The position of the models does not appear to be affected by this. public uint RandomSeed { get; set; } Property Value uint Shadows Gets or sets if the item casts shadows. public bool Shadows { get; set; } Property Value bool Stretch Coefficient for stretching the scheme along the path. For some buildings, this stretches the model; for others, it places its elements further apart. public float Stretch { get; set; } Property Value float ViewDistance Gets or sets the view distance of the item in meters. public ushort ViewDistance { get; set; } Property Value ushort WaterReflection Gets or sets if the item is reflected on water surfaces. public bool WaterReflection { get; set; } Property Value bool Methods Add(IItemContainer, Vector3, Vector3, Token) Adds a building segment to the map. public static Buildings Add(IItemContainer map, Vector3 backwardPos, Vector3 forwardPos, Token name) Parameters map IItemContainer The map. backwardPos Vector3 The position of the backward (red) node. forwardPos Vector3 The position of the forward (green) node. name Token Unit name of the building. Returns Buildings The newly created building segment. Append(Vector3, bool) Appends a building segment to the end of this one, using the same model and look. public Buildings Append(Vector3 position, bool cloneSettings = true) Parameters position Vector3 The position of the ForwardNode of the new building segment. cloneSettings bool Whether the new segment should have the same settings as this one. If false, the defaults will be used. Returns Buildings The newly created building segment. Append(Vector3, Token, Token) Appends a building segment to the end of this one with the given model and look. public Buildings Append(Vector3 position, Token name, Token look) Parameters position Vector3 The position of the ForwardNode of the new building segment. name Token The unit name of the building. look Token The look. Returns Buildings The newly created building segment. Init() Sets the item's properties to its default values. protected override void Init()"
  },
  "api/TruckLib.ScsMap.BusStop.html": {
    "href": "api/TruckLib.ScsMap.BusStop.html",
    "title": "Class BusStop | TruckLib",
    "keywords": "Class BusStop Namespace TruckLib.ScsMap Assembly TruckLib.dll A prefab slave item which is placed for the BusStop spawn point type of a prefab. public class BusStop : PrefabSlaveItem, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem PrefabSlaveItem BusStop Implements IMapItem IMapObject Inherited Members PrefabSlaveItem.DefaultItemFile PrefabSlaveItem.DefaultViewDistance PrefabSlaveItem.Prefab PrefabSlaveItem.Add<T>(IItemContainer, Prefab, Vector3) PrefabSlaveItem.Move(Vector3) PrefabSlaveItem.Translate(Vector3) PrefabSlaveItem.UpdateItemReferences(Dictionary<ulong, MapItem>) SingleNodeItem.Node MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BusStop() public BusStop() Properties CityName Unit name of the city this is a bus stop for, as defined in /def/city.sii. public Token CityName { get; set; } Property Value Token ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Methods Add(IItemContainer, Prefab, Vector3) Adds a bus stop item to the map. public static BusStop Add(IItemContainer map, Prefab parent, Vector3 position) Parameters map IItemContainer The map. parent Prefab The prefab this item is linked to. position Vector3 The (global) position of the bus stop node. Returns BusStop The newly created bus stop. Init() Sets the item's properties to its default values. protected override void Init()"
  },
  "api/TruckLib.ScsMap.CameraPath.html": {
    "href": "api/TruckLib.ScsMap.CameraPath.html",
    "title": "Class CameraPath | TruckLib",
    "keywords": "Class CameraPath Namespace TruckLib.ScsMap Assembly TruckLib.dll Defines a tracking shot through the map for use in cutscenes. public class CameraPath : PathItem, IMapItem, IMapObject Inheritance object MapItem PathItem CameraPath Implements IMapItem IMapObject Inherited Members PathItem.Nodes PathItem.Move(Vector3) PathItem.Move(Vector3, int) PathItem.Translate(Vector3) PathItem.CreateNodes(IList<Vector3>) PathItem.Recalculate() MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CameraPath() public CameraPath() Properties CameraSpeed The main camera speed. public float CameraSpeed { get; set; } Property Value float ControlNodes Control points of the spline. If null or empty, the defaults will be used. If any of them need to be different, all nodes must be explicitly created, not just the ones you wish to change. public List<INode> ControlNodes { get; set; } Property Value List<INode> DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Keyframes Keyframe properties; one per node. public List<Keyframe> Keyframes { get; set; } Property Value List<Keyframe> Tags Tags of this item. public List<Token> Tags { get; set; } Property Value List<Token> TrackPoints Track points the camera will look at. If null or empty, it will interpolate between the rotations of the nodes instead. Note that, while the map format itself supports multiple track points, the game does not. Only the first node in this list will be used, and the rest are ignored. public List<INode> TrackPoints { get; set; } Property Value List<INode> Methods Add(IItemContainer, IList<Vector3>) public static CameraPath Add(IItemContainer map, IList<Vector3> positions) Parameters map IItemContainer positions IList<Vector3> Returns CameraPath Init() Sets the item's properties to its default values. protected override void Init() RecalculateRotation(int) Recalculates the rotation of one node. protected override void RecalculateRotation(int i) Parameters i int The index of the node."
  },
  "api/TruckLib.ScsMap.CameraPoint.html": {
    "href": "api/TruckLib.ScsMap.CameraPoint.html",
    "title": "Class CameraPoint | TruckLib",
    "keywords": "Class CameraPoint Namespace TruckLib.ScsMap Assembly TruckLib.dll Defines the tracking point for various cutscenes and is also used to create random events. public class CameraPoint : SingleNodeItem, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem CameraPoint Implements IMapItem IMapObject Inherited Members SingleNodeItem.Node SingleNodeItem.Move(Vector3) SingleNodeItem.Translate(Vector3) MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CameraPoint() public CameraPoint() Properties DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Tags Tags of this item. public List<Token> Tags { get; set; } Property Value List<Token> Methods Add(IItemContainer, Vector3, List<Token>) Adds a camera point to the map. public static CameraPoint Add(IItemContainer map, Vector3 position, List<Token> tags) Parameters map IItemContainer The map. position Vector3 The position of the item. tags List<Token> The tags of the item. Returns CameraPoint The newly created camera point. Init() Sets the item's properties to its default values. protected override void Init()"
  },
  "api/TruckLib.ScsMap.CenterVegetation.html": {
    "href": "api/TruckLib.ScsMap.CenterVegetation.html",
    "title": "Class CenterVegetation | TruckLib",
    "keywords": "Class CenterVegetation Namespace TruckLib.ScsMap Assembly TruckLib.dll Properties of vegetation in the center of a dual carriageway road. public class CenterVegetation : Vegetation Inheritance object Vegetation CenterVegetation Inherited Members Vegetation.Name Vegetation.Scale Vegetation.Density object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Offset Offset from the center of the road, in meters. public float Offset { get; set; } Property Value float Methods Clone() public CenterVegetation Clone() Returns CenterVegetation"
  },
  "api/TruckLib.ScsMap.CityArea.html": {
    "href": "api/TruckLib.ScsMap.CityArea.html",
    "title": "Class CityArea | TruckLib",
    "keywords": "Class CityArea Namespace TruckLib.ScsMap Assembly TruckLib.dll A City item, which declares a rectangular area around the item's node as belonging to a city. public class CityArea : SingleNodeItem, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem CityArea Implements IMapItem IMapObject Inherited Members SingleNodeItem.Node SingleNodeItem.Move(Vector3) SingleNodeItem.Translate(Vector3) MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CityArea() public CityArea() Properties DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort Height The height of the area. public float Height { get; set; } Property Value float ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Name The unit name of the city, as defined in /def/city.sii. public Token Name { get; set; } Property Value Token ShowInUi Gets or sets if the city name is displayed on UI maps. public bool ShowInUi { get; set; } Property Value bool TriggerVisit Gets or sets if entering this area can trigger the \"first visit\" message. public bool TriggerVisit { get; set; } Property Value bool Width The width of the area. public float Width { get; set; } Property Value float Methods Add(IItemContainer, Vector3, Token, float, float) Adds a city area to the map. public static CityArea Add(IItemContainer map, Vector3 position, Token name, float width, float height) Parameters map IItemContainer The map. position Vector3 The center point of the area. name Token The unit name of the city. width float The width of the area. height float The height of the area. Returns CityArea The newly created city area. Init() Sets the item's properties to its default values. protected override void Init()"
  },
  "api/TruckLib.ScsMap.Collections.CurveLocatorList.html": {
    "href": "api/TruckLib.ScsMap.Collections.CurveLocatorList.html",
    "title": "Class CurveLocatorList | TruckLib",
    "keywords": "Class CurveLocatorList Namespace TruckLib.ScsMap.Collections Assembly TruckLib.dll Reperesents a list of curve locator points. Has a maximum size of 2. public class CurveLocatorList : IList<INode>, ICollection<INode>, IEnumerable<INode>, IEnumerable Inheritance object CurveLocatorList Implements IList<INode> ICollection<INode> IEnumerable<INode> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CurveLocatorList(Curve) Instantiates an empty list. public CurveLocatorList(Curve parent) Parameters parent Curve The Curve item which parents these models. Fields MaxSize The maximum size of the list. public const int MaxSize = 2 Field Value int Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[int] Gets or sets the element at the specified index. public INode this[int index] { get; set; } Parameters index int The zero-based index of the element to get or set. Property Value INode The element at the specified index. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The property is set and the IList<T> is read-only. Parent The Curve item which parents these nodes. public Curve Parent { get; init; } Property Value Curve Methods Add(Vector3, Quaternion) Creates a locator node at the specified position and adds it to the end of the list. public void Add(Vector3 position, Quaternion rotation) Parameters position Vector3 The position of the node. rotation Quaternion The rotation of the node. Exceptions IndexOutOfRangeException Thrown if the list is full. Add(INode) Adds an item to the ICollection<T>. public void Add(INode item) Parameters item INode The object to add to the ICollection<T>. Exceptions IndexOutOfRangeException Thrown if the list is full. NotSupportedException The ICollection<T> is read-only. Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. Contains(INode) Determines whether the ICollection<T> contains a specific value. public bool Contains(INode item) Parameters item INode The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. CopyTo(INode[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(INode[] array, int arrayIndex) Parameters array INode[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<INode> GetEnumerator() Returns IEnumerator<INode> An enumerator that can be used to iterate through the collection. IndexOf(INode) Determines the index of a specific item in the IList<T>. public int IndexOf(INode item) Parameters item INode The object to locate in the IList<T>. Returns int The index of item if found in the list; otherwise, -1. Insert(int, Vector3, Quaternion) Creates a locator node at the specified position and inserts it with the given properties at the specified index. public void Insert(int index, Vector3 position, Quaternion rotation) Parameters index int The zero-based index at which the object should be inserted. position Vector3 The position of the node. rotation Quaternion The rotation of the node. Exceptions IndexOutOfRangeException Thrown if the list is full. Insert(int, INode) Inserts an item to the IList<T> at the specified index. public void Insert(int index, INode item) Parameters index int The zero-based index at which item should be inserted. item INode The object to insert into the IList<T>. Exceptions IndexOutOfRangeException Thrown if the list is full. ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. Remove(INode) Removes the first occurrence of the specified node from the list and deletes it from the map if it is not connected to anything else. public bool Remove(INode item) Parameters item INode The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. RemoveAt(int) Removes the node at the specified index from the list and deletes it if it is not connected to anything else. public void RemoveAt(int index) Parameters index int The zero-based index of the item to remove. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only."
  },
  "api/TruckLib.ScsMap.Collections.FarModelDataList.html": {
    "href": "api/TruckLib.ScsMap.Collections.FarModelDataList.html",
    "title": "Class FarModelDataList | TruckLib",
    "keywords": "Class FarModelDataList Namespace TruckLib.ScsMap.Collections Assembly TruckLib.dll Reperesents a list of Far Model models. public class FarModelDataList : IList<FarModelData>, ICollection<FarModelData>, IEnumerable<FarModelData>, IEnumerable Inheritance object FarModelDataList Implements IList<FarModelData> ICollection<FarModelData> IEnumerable<FarModelData> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FarModelDataList(FarModel) Instantiates an empty list. public FarModelDataList(FarModel parent) Parameters parent FarModel The Far Model item which parents these models. Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[int] Gets or sets the element at the specified index. public FarModelData this[int index] { get; set; } Parameters index int The zero-based index of the element to get or set. Property Value FarModelData The element at the specified index. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The property is set and the IList<T> is read-only. Parent The Far Model item which parents these models. public FarModel Parent { get; init; } Property Value FarModel Methods Add(Vector3, Token, Vector3) Creates a map node at the specified position and adds a FarModelData object with the given properties to the end of the list. public void Add(Vector3 position, Token model, Vector3 scale) Parameters position Vector3 The position of the node. model Token The unit name of the model. scale Vector3 The scale of the model. Add(FarModelData) Adds an item to the ICollection<T>. public void Add(FarModelData item) Parameters item FarModelData The object to add to the ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. Contains(FarModelData) Determines whether the ICollection<T> contains a specific value. public bool Contains(FarModelData item) Parameters item FarModelData The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. CopyTo(FarModelData[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(FarModelData[] array, int arrayIndex) Parameters array FarModelData[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<FarModelData> GetEnumerator() Returns IEnumerator<FarModelData> An enumerator that can be used to iterate through the collection. IndexOf(FarModelData) Determines the index of a specific item in the IList<T>. public int IndexOf(FarModelData item) Parameters item FarModelData The object to locate in the IList<T>. Returns int The index of item if found in the list; otherwise, -1. Insert(int, Vector3, Token, Vector3) Creates a map node at the specified position and inserts a FarModelData object with the given properties at the specified index. public void Insert(int index, Vector3 position, Token model, Vector3 scale) Parameters index int The zero-based index at which the object should be inserted. position Vector3 The position of the node. model Token The unit name of the model. scale Vector3 The scale of the model. Insert(int, FarModelData) Inserts an item to the IList<T> at the specified index. public void Insert(int index, FarModelData item) Parameters index int The zero-based index at which item should be inserted. item FarModelData The object to insert into the IList<T>. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. Remove(FarModelData) Removes the first occurrence of the specified object from the list and deletes its map node if it is not connected to anything else. public bool Remove(FarModelData item) Parameters item FarModelData The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. RemoveAt(int) Removes the element at the specified index from the list and deletes its map node if it is not connected to anything else. public void RemoveAt(int index) Parameters index int The zero-based index of the item to remove. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only."
  },
  "api/TruckLib.ScsMap.Collections.GateActivationPointList.html": {
    "href": "api/TruckLib.ScsMap.Collections.GateActivationPointList.html",
    "title": "Class GateActivationPointList | TruckLib",
    "keywords": "Class GateActivationPointList Namespace TruckLib.ScsMap.Collections Assembly TruckLib.dll Reperesents a list of gate activation points. Has a maximum size of 2. public class GateActivationPointList : IList<GateActivationPoint>, ICollection<GateActivationPoint>, IEnumerable<GateActivationPoint>, IEnumerable Inheritance object GateActivationPointList Implements IList<GateActivationPoint> ICollection<GateActivationPoint> IEnumerable<GateActivationPoint> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GateActivationPointList(Gate) Instantiates an empty list. public GateActivationPointList(Gate parent) Parameters parent Gate The Gate item which parents these models. Fields MaxSize The maximum size of the list. public const int MaxSize = 2 Field Value int Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[int] Gets or sets the element at the specified index. public GateActivationPoint this[int index] { get; set; } Parameters index int The zero-based index of the element to get or set. Property Value GateActivationPoint The element at the specified index. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The property is set and the IList<T> is read-only. Parent The Gate item which parents these models. public Gate Parent { get; init; } Property Value Gate Methods Add(Vector3, string) Creates a map node at the specified position and adds a GateActivationPoint object with the given properties to the end of the list. public void Add(Vector3 position, string trigger) Parameters position Vector3 The position of the node. trigger string The name of the trigger. Exceptions IndexOutOfRangeException Thrown if the list is full. Add(GateActivationPoint) Adds an item to the ICollection<T>. public void Add(GateActivationPoint item) Parameters item GateActivationPoint The object to add to the ICollection<T>. Exceptions IndexOutOfRangeException Thrown if the list is full. NotSupportedException The ICollection<T> is read-only. Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. Contains(GateActivationPoint) Determines whether the ICollection<T> contains a specific value. public bool Contains(GateActivationPoint item) Parameters item GateActivationPoint The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. CopyTo(GateActivationPoint[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(GateActivationPoint[] array, int arrayIndex) Parameters array GateActivationPoint[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<GateActivationPoint> GetEnumerator() Returns IEnumerator<GateActivationPoint> An enumerator that can be used to iterate through the collection. IndexOf(GateActivationPoint) Determines the index of a specific item in the IList<T>. public int IndexOf(GateActivationPoint item) Parameters item GateActivationPoint The object to locate in the IList<T>. Returns int The index of item if found in the list; otherwise, -1. Insert(int, Vector3, string) Creates a map node at the specified position and inserts a GateActivationPoint object with the given properties at the specified index. public void Insert(int index, Vector3 position, string trigger) Parameters index int The zero-based index at which the object should be inserted. position Vector3 The position of the node. trigger string The name of the trigger. Exceptions IndexOutOfRangeException Thrown if the list is full. Insert(int, GateActivationPoint) Inserts an item to the IList<T> at the specified index. public void Insert(int index, GateActivationPoint item) Parameters index int The zero-based index at which item should be inserted. item GateActivationPoint The object to insert into the IList<T>. Exceptions IndexOutOfRangeException Thrown if the list is full. ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. Remove(GateActivationPoint) Removes the first occurrence of the specified object from the list and deletes its map node if it is not connected to anything else. public bool Remove(GateActivationPoint item) Parameters item GateActivationPoint The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. RemoveAt(int) Removes the element at the specified index from the list and deletes its map node if it is not connected to anything else. public void RemoveAt(int index) Parameters index int The zero-based index of the item to remove. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only."
  },
  "api/TruckLib.ScsMap.Collections.NodeDictionary.html": {
    "href": "api/TruckLib.ScsMap.Collections.NodeDictionary.html",
    "title": "Class NodeDictionary | TruckLib",
    "keywords": "Class NodeDictionary Namespace TruckLib.ScsMap.Collections Assembly TruckLib.dll A collection for map nodes which combines a dictionary and R-tree. public class NodeDictionary : IDictionary<ulong, INode>, ICollection<KeyValuePair<ulong, INode>>, IEnumerable<KeyValuePair<ulong, INode>>, IEnumerable Inheritance object NodeDictionary Implements IDictionary<ulong, INode> ICollection<KeyValuePair<ulong, INode>> IEnumerable<KeyValuePair<ulong, INode>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[ulong] Gets or sets the element with the specified key. public INode this[ulong key] { get; set; } Parameters key ulong The key of the element to get or set. Property Value INode The element with the specified key. Exceptions ArgumentNullException key is null. KeyNotFoundException The property is retrieved and key is not found. NotSupportedException The property is set and the IDictionary<TKey, TValue> is read-only. Keys Gets an ICollection<T> containing the keys of the IDictionary<TKey, TValue>. public ICollection<ulong> Keys { get; } Property Value ICollection<ulong> An ICollection<T> containing the keys of the object that implements IDictionary<TKey, TValue>. Values Gets an ICollection<T> containing the values in the IDictionary<TKey, TValue>. public ICollection<INode> Values { get; } Property Value ICollection<INode> An ICollection<T> containing the values in the object that implements IDictionary<TKey, TValue>. Methods Add(KeyValuePair<ulong, INode>) Adds an item to the ICollection<T>. public void Add(KeyValuePair<ulong, INode> item) Parameters item KeyValuePair<ulong, INode> The object to add to the ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Add(ulong, INode) Adds an element with the provided key and value to the IDictionary<TKey, TValue>. public void Add(ulong key, INode value) Parameters key ulong The object to use as the key of the element to add. value INode The object to use as the value of the element to add. Exceptions ArgumentNullException key is null. ArgumentException An element with the same key already exists in the IDictionary<TKey, TValue>. NotSupportedException The IDictionary<TKey, TValue> is read-only. Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. Contains(KeyValuePair<ulong, INode>) Determines whether the ICollection<T> contains a specific value. public bool Contains(KeyValuePair<ulong, INode> item) Parameters item KeyValuePair<ulong, INode> The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. ContainsKey(ulong) Determines whether the IDictionary<TKey, TValue> contains an element with the specified key. public bool ContainsKey(ulong key) Parameters key ulong The key to locate in the IDictionary<TKey, TValue>. Returns bool true if the IDictionary<TKey, TValue> contains an element with the key; otherwise, false. Exceptions ArgumentNullException key is null. ContainsValue(INode) public bool ContainsValue(INode value) Parameters value INode Returns bool CopyTo(KeyValuePair<ulong, INode>[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(KeyValuePair<ulong, INode>[] array, int arrayIndex) Parameters array KeyValuePair<ulong, INode>[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<KeyValuePair<ulong, INode>> GetEnumerator() Returns IEnumerator<KeyValuePair<ulong, INode>> An enumerator that can be used to iterate through the collection. Remove(KeyValuePair<ulong, INode>) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(KeyValuePair<ulong, INode> item) Parameters item KeyValuePair<ulong, INode> The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Remove(ulong) Removes the element with the specified key from the IDictionary<TKey, TValue>. public bool Remove(ulong key) Parameters key ulong The key of the element to remove. Returns bool true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the original IDictionary<TKey, TValue>. Exceptions ArgumentNullException key is null. NotSupportedException The IDictionary<TKey, TValue> is read-only. TryGetValue(ulong, out INode) Gets the value associated with the specified key. public bool TryGetValue(ulong key, out INode value) Parameters key ulong The key whose value to get. value INode When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns bool true if the object that implements IDictionary<TKey, TValue> contains an element with the specified key; otherwise, false. Exceptions ArgumentNullException key is null. Within(double, double, double, double) Retrieves nodes within the given bounding box. public IReadOnlyList<Node> Within(double minX, double minZ, double maxX, double maxZ) Parameters minX double The minimum X coordinate. minZ double The minimum Z coordinate. maxX double The maximum X coordinate. maxZ double The maximum Z coordinate.> Returns IReadOnlyList<Node> A list of nodes contained within this bounding box."
  },
  "api/TruckLib.ScsMap.Collections.PathNodeList.html": {
    "href": "api/TruckLib.ScsMap.Collections.PathNodeList.html",
    "title": "Class PathNodeList | TruckLib",
    "keywords": "Class PathNodeList Namespace TruckLib.ScsMap.Collections Assembly TruckLib.dll Contains the nodes of a path item. public class PathNodeList : IList<INode>, ICollection<INode>, IEnumerable<INode>, IEnumerable Inheritance object PathNodeList Implements IList<INode> ICollection<INode> IEnumerable<INode> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PathNodeList(PathItem) Instantiates an empty list. public PathNodeList(PathItem parent) Parameters parent PathItem The path item which parents these models. Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[int] Gets or sets the element at the specified index. public INode this[int index] { get; set; } Parameters index int The zero-based index of the element to get or set. Property Value INode The element at the specified index. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The property is set and the IList<T> is read-only. Lengths Cached lengths of the path segments, if the parent is a Mover or Walker. public List<float> Lengths { get; } Property Value List<float> Parent The path item which parents these nodes. public PathItem Parent { get; init; } Property Value PathItem Methods Add(Vector3) Creates a map node at the specified position and adds it to the end of the list. public void Add(Vector3 position) Parameters position Vector3 The position of the node. Add(INode) Adds an item to the ICollection<T>. public void Add(INode item) Parameters item INode The object to add to the ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. AddRange(IEnumerable<Vector3>) Creates map nodes at the specified positions and adds them to the end of the list. public void AddRange(IEnumerable<Vector3> positions) Parameters positions IEnumerable<Vector3> The positions of the nodes. AddRange(IEnumerable<INode>) Adds nodes to the end of list. public void AddRange(IEnumerable<INode> items) Parameters items IEnumerable<INode> The nodes to add to the list. Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. Contains(INode) Determines whether the ICollection<T> contains a specific value. public bool Contains(INode item) Parameters item INode The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. CopyTo(INode[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(INode[] array, int arrayIndex) Parameters array INode[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<INode> GetEnumerator() Returns IEnumerator<INode> An enumerator that can be used to iterate through the collection. IndexOf(INode) Determines the index of a specific item in the IList<T>. public int IndexOf(INode item) Parameters item INode The object to locate in the IList<T>. Returns int The index of item if found in the list; otherwise, -1. Insert(int, Vector3) Creates a map node at the specified position and inserts it with the given properties at the specified index. public void Insert(int index, Vector3 position) Parameters index int The zero-based index at which the object should be inserted. position Vector3 The position of the node. Insert(int, INode) Inserts an item to the IList<T> at the specified index. public void Insert(int index, INode item) Parameters index int The zero-based index at which item should be inserted. item INode The object to insert into the IList<T>. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. Remove(INode) Removes the first occurrence of the specified node from the list and deletes it from the map if it is not connected to anything else. public bool Remove(INode item) Parameters item INode The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. RemoveAt(int) Removes the node at the specified index from the list and deletes it if it is not connected to anything else. public void RemoveAt(int index) Parameters index int The zero-based index of the item to remove. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only."
  },
  "api/TruckLib.ScsMap.Collections.PolygonNodeList.html": {
    "href": "api/TruckLib.ScsMap.Collections.PolygonNodeList.html",
    "title": "Class PolygonNodeList | TruckLib",
    "keywords": "Class PolygonNodeList Namespace TruckLib.ScsMap.Collections Assembly TruckLib.dll Contains the nodes of a polygon item. public class PolygonNodeList : IList<INode>, ICollection<INode>, IEnumerable<INode>, IEnumerable Inheritance object PolygonNodeList Implements IList<INode> ICollection<INode> IEnumerable<INode> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PolygonNodeList(PolygonItem) Instantiates an empty list. public PolygonNodeList(PolygonItem parent) Parameters parent PolygonItem The polygon item which parents these models. Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[int] Gets or sets the element at the specified index. public INode this[int index] { get; set; } Parameters index int The zero-based index of the element to get or set. Property Value INode The element at the specified index. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The property is set and the IList<T> is read-only. Parent The polygon item which parents these nodes. public PolygonItem Parent { get; init; } Property Value PolygonItem Methods Add(Vector3) Creates a map node at the specified position and adds it to the end of the list. public void Add(Vector3 position) Parameters position Vector3 The position of the node. Add(INode) Adds an item to the ICollection<T>. public void Add(INode item) Parameters item INode The object to add to the ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. AddRange(IEnumerable<Vector3>) Creates map nodes at the specified positions and adds them to the end of the list. public void AddRange(IEnumerable<Vector3> positions) Parameters positions IEnumerable<Vector3> The positions of the nodes. AddRange(IEnumerable<INode>) Adds nodes to the end of list. public void AddRange(IEnumerable<INode> items) Parameters items IEnumerable<INode> The nodes to add to the list. Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. Contains(INode) Determines whether the ICollection<T> contains a specific value. public bool Contains(INode item) Parameters item INode The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. CopyTo(INode[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(INode[] array, int arrayIndex) Parameters array INode[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<INode> GetEnumerator() Returns IEnumerator<INode> An enumerator that can be used to iterate through the collection. IndexOf(INode) Determines the index of a specific item in the IList<T>. public int IndexOf(INode item) Parameters item INode The object to locate in the IList<T>. Returns int The index of item if found in the list; otherwise, -1. Insert(int, Vector3) Creates a map node at the specified position and inserts it with the given properties at the specified index. public void Insert(int index, Vector3 position) Parameters index int The zero-based index at which the object should be inserted. position Vector3 The position of the node. Insert(int, INode) Inserts an item to the IList<T> at the specified index. public void Insert(int index, INode item) Parameters index int The zero-based index at which item should be inserted. item INode The object to insert into the IList<T>. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. Remove(INode) Removes the first occurrence of the specified node from the list and deletes it from the map if it is not connected to anything else. public bool Remove(INode item) Parameters item INode The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. RemoveAt(int) Removes the node at the specified index from the list and deletes it if it is not connected to anything else. public void RemoveAt(int index) Parameters index int The zero-based index of the item to remove. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only."
  },
  "api/TruckLib.ScsMap.Collections.html": {
    "href": "api/TruckLib.ScsMap.Collections.html",
    "title": "Namespace TruckLib.ScsMap.Collections | TruckLib",
    "keywords": "Namespace TruckLib.ScsMap.Collections Classes CurveLocatorList Reperesents a list of curve locator points. Has a maximum size of 2. FarModelDataList Reperesents a list of Far Model models. GateActivationPointList Reperesents a list of gate activation points. Has a maximum size of 2. NodeDictionary A collection for map nodes which combines a dictionary and R-tree. PathNodeList Contains the nodes of a path item. PolygonNodeList Contains the nodes of a polygon item."
  },
  "api/TruckLib.ScsMap.Company.html": {
    "href": "api/TruckLib.ScsMap.Company.html",
    "title": "Class Company | TruckLib",
    "keywords": "Class Company Namespace TruckLib.ScsMap Assembly TruckLib.dll A prefab slave item which is placed for the CompanyPoint spawn point type of company prefabs. public class Company : PrefabSlaveItem, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem PrefabSlaveItem Company Implements IMapItem IMapObject Inherited Members PrefabSlaveItem.DefaultItemFile PrefabSlaveItem.DefaultViewDistance PrefabSlaveItem.Prefab PrefabSlaveItem.Add<T>(IItemContainer, Prefab, Vector3) PrefabSlaveItem.UpdateItemReferences(Dictionary<ulong, MapItem>) SingleNodeItem.Node MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Additional nodes are created for parking spots and trailer spawn points. Constructors Company() public Company() Properties CityName Unit name of the city in which this company is located, as defined in /def/city.sii. public Token CityName { get; set; } Property Value Token CompanyName Unit name of the company. public Token CompanyName { get; set; } Property Value Token ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType SpawnPoints Additional nodes placed for parking spots and trailer spawn points. public List<CompanySpawnPoint> SpawnPoints { get; set; } Property Value List<CompanySpawnPoint> Methods Add(IItemContainer, Prefab, Vector3) Adds a new Company item to the map. public static Company Add(IItemContainer map, Prefab parent, Vector3 position) Parameters map IItemContainer The map. parent Prefab The prefab this item is linked to. position Vector3 The position of the item's node. Returns Company The newly created Company item. Init() Sets the item's properties to its default values. protected override void Init() Move(Vector3) Moves the item to a different location. public override void Move(Vector3 newPos) Parameters newPos Vector3 The new position. Translate(Vector3) Translates the item by the given vector. public override void Translate(Vector3 translation) Parameters translation Vector3 The translation vector."
  },
  "api/TruckLib.ScsMap.CompanySpawnPoint.html": {
    "href": "api/TruckLib.ScsMap.CompanySpawnPoint.html",
    "title": "Struct CompanySpawnPoint | TruckLib",
    "keywords": "Struct CompanySpawnPoint Namespace TruckLib.ScsMap Assembly TruckLib.dll Represents a prefab spawn point belonging to a Company item. public struct CompanySpawnPoint Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors CompanySpawnPoint(INode, uint) Instantiates a new CompanySpawnPoint. public CompanySpawnPoint(INode node, uint flags) Parameters node INode The node of the spawn point. flags uint The flag field of the spawn point. CompanySpawnPoint(INode, CompanySpawnPointType) Instantiates a new CompanySpawnPoint. public CompanySpawnPoint(INode node, CompanySpawnPointType type) Parameters node INode The node of the spawn point. type CompanySpawnPointType The type of the spawn point. Properties Node The node of the spawn point. public INode Node { readonly get; set; } Property Value INode Type The spawn point type. public CompanySpawnPointType Type { get; set; } Property Value CompanySpawnPointType"
  },
  "api/TruckLib.ScsMap.CompanySpawnPointType.html": {
    "href": "api/TruckLib.ScsMap.CompanySpawnPointType.html",
    "title": "Enum CompanySpawnPointType | TruckLib",
    "keywords": "Enum CompanySpawnPointType Namespace TruckLib.ScsMap Assembly TruckLib.dll The spawn point type of a node belonging to a Company item. public enum CompanySpawnPointType Fields Trailer = 4 Trailer spawn point. UnloadEasy = 1 Easy difficulty (15 XP) parking spot. UnloadHard = 3 Hard difficulty (90 XP) parking spot. UnloadMedium = 2 Medium difficulty (40 XP) parking spot."
  },
  "api/TruckLib.ScsMap.Compound.html": {
    "href": "api/TruckLib.ScsMap.Compound.html",
    "title": "Class Compound | TruckLib",
    "keywords": "Class Compound Namespace TruckLib.ScsMap Assembly TruckLib.dll A compound item, which groups multiple aux items into one, with an additional parent node to which they are tethered. public class Compound : SingleNodeItem, IMapItem, IMapObject, IItemContainer Inheritance object MapItem SingleNodeItem Compound Implements IMapItem IMapObject IItemContainer Inherited Members SingleNodeItem.Node MapItem.ItemFile MapItem.Uid MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Both the items and the nodes of compounded items are contained within its compound parent rather than belonging to the sector itself. The editor does not allow signs to be added to compounds, but signs without traffic rules can be added externally and the game will load them without issues. Likewise, the editor requires a compound to consist of at least two items, but a compound of only one item is supported (albeit somewhat pointless) if created here. Constructors Compound() public Compound() Properties Collision public bool Collision { get; set; } Property Value bool DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort IgnoreCutPlanes Gets or sets if the compounded items will render behind a cut plane. public bool IgnoreCutPlanes { get; set; } Property Value bool ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType MapItems Contains all map items owned by this compound. public Dictionary<ulong, MapItem> MapItems { get; set; } Property Value Dictionary<ulong, MapItem> MirrorReflection public bool MirrorReflection { get; set; } Property Value bool Nodes Contains all nodes owned by this compound. public Dictionary<ulong, INode> Nodes { get; set; } Property Value Dictionary<ulong, INode> Shadows public bool Shadows { get; set; } Property Value bool ViewDistance Gets or sets the view distance of the item in meters. public ushort ViewDistance { get; set; } Property Value ushort WaterReflection Gets or sets if the items are reflected on water surfaces. public bool WaterReflection { get; set; } Property Value bool Methods Add(IItemContainer, Vector3) Adds a new, empty compound container to the map. public static Compound Add(IItemContainer map, Vector3 position) Parameters map IItemContainer The map. position Vector3 The position of the parent node. Returns Compound The newly created compound. AddNode(Vector3) Creates a new node and adds it to the compound. public Node AddNode(Vector3 position) Parameters position Vector3 The position of the new node. Returns Node The newly created node. AddNode(Vector3, bool) Creates a new node and adds it to the compound. public Node AddNode(Vector3 position, bool isRed) Parameters position Vector3 The position of the new node. isRed bool Whether the node is a red node. Returns Node The newly created node. Delete(INode) Deletes a node and the items attached to it. public void Delete(INode node) Parameters node INode The node to delete. Delete(MapItem) Deletes an item. Nodes that are only used by this item will also be deleted. public void Delete(MapItem item) Parameters item MapItem The item to delete. Init() Sets the item's properties to its default values. protected override void Init() Move(Vector3) Moves the parent node to a different location and moves the items contained in this compound relative to it. public override void Move(Vector3 newPos) Parameters newPos Vector3 The new position. RecalculateCenter() Moves the parent node of the compound to the center of its child items. The positions of the child items are not changed. public void RecalculateCenter() Translate(Vector3) Translates the parent node and its children by the given vector. public override void Translate(Vector3 translation) Parameters translation Vector3 The translation vector."
  },
  "api/TruckLib.ScsMap.Curve.html": {
    "href": "api/TruckLib.ScsMap.Curve.html",
    "title": "Class Curve | TruckLib",
    "keywords": "Class Curve Namespace TruckLib.ScsMap Assembly TruckLib.dll A curve segment, which repeats one or more models along a path. public class Curve : PolylineItem, IMapItem, IMapObject Inheritance object MapItem PolylineItem Curve Implements IMapItem IMapObject Inherited Members PolylineItem.BackwardItem PolylineItem.ForwardItem PolylineItem.Node PolylineItem.ForwardNode PolylineItem.Length PolylineItem.FindFirstItem() PolylineItem.FindLastItem() PolylineItem.Recalculate() MapItem.ItemFile MapItem.Uid MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Curve() public Curve() Properties CenterPartVariation Unit name of the center part variation. public Token CenterPartVariation { get; set; } Property Value Token Collision Gets or sets if collision is enabled. public bool Collision { get; set; } Property Value bool ColorVariant 1-indexed color variant of the model. Set to 0 if there aren't any. public Nibble ColorVariant { get; set; } Property Value Nibble DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort DetailVegetation Gets or sets if detail vegetation (small clumps of grass etc.) is rendered if the selected terrain material supports it. public bool DetailVegetation { get; set; } Property Value bool FirstPart Unit name of the first part, if applicable. public Token FirstPart { get; set; } Property Value Token FixedStep If not 0, the model will repeat every n meters, overriding the default. public float FixedStep { get; set; } Property Value float HeightOffsets Height offsets for individual elements of the curve. Offsets are applied to elements in order. For instance, if you want the third element to have an offset of 5, the content of the list should be [0, 0, 5]. public List<float> HeightOffsets { get; set; } Property Value List<float> IgnoreCutPlanes Gets or sets if this item will render behind a cut plane. public bool IgnoreCutPlanes { get; set; } Property Value bool InvertGeometry Flips the model on the axis formed by the curve's two nodes. public bool InvertGeometry { get; set; } Property Value bool ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType LastPart Unit name of the last part, if applicable. public Token LastPart { get; set; } Property Value Token Locators public CurveLocatorList Locators { get; set; } Property Value CurveLocatorList Look Unit name of the model look. public Token Look { get; set; } Property Value Token LowPolyVegetation Gets or sets if only flat textures are used as vegetation. public bool LowPolyVegetation { get; set; } Property Value bool MaxLength Maximum length of a Curve item. public float MaxLength { get; } Property Value float MinLength Minimum length of a Curve item. public float MinLength { get; } Property Value float MirrorReflection Gets or sets if this item is visible in mirrors. public bool MirrorReflection { get; set; } Property Value bool Model Unit name of the curve model, as defined in /def/world/curve_model.sii. public Token Model { get; set; } Property Value Token PerlinNoise Gets or sets if vertices of the model are covered in a random tint noise. That's what the editor tooltip says, anyway. I don't really see any difference. public bool PerlinNoise { get; set; } Property Value bool RandomSeed public uint RandomSeed { get; set; } Property Value uint Scale Relative scale of the model. public float Scale { get; set; } Property Value float Shadows Gets or sets if the item casts shadows. public bool Shadows { get; set; } Property Value bool SteppedGeometry Gets or sets if elements of a sloped item are rendered like stair steps rather than being stretched along the path. public bool SteppedGeometry { get; set; } Property Value bool Stretch Coefficient for stretching the scheme along the path. For some curves, this stretches the model; for others, it places its elements further apart. public float Stretch { get; set; } Property Value float TerrainColor Color tint of the terrain. public Color TerrainColor { get; set; } Property Value Color TerrainMaterial Unit name of the terrain material, if applicable. public Token TerrainMaterial { get; set; } Property Value Token TerrainRotation UV rotation of the terrain texture. public float TerrainRotation { get; set; } Property Value float UseLinearPath Makes the model follow a linear path from backward to forward node rather than the curved path created by the spline. public bool UseLinearPath { get; set; } Property Value bool ViewDistance Gets or sets the view distance of the item in meters. public ushort ViewDistance { get; set; } Property Value ushort WaterReflection Gets or sets if the item is reflected on water surfaces. public bool WaterReflection { get; set; } Property Value bool Methods Add(IItemContainer, Vector3, Vector3, Token) Adds a curve to the map. public static Curve Add(IItemContainer map, Vector3 backwardPos, Vector3 forwardPos, Token model) Parameters map IItemContainer The map. backwardPos Vector3 Position of the backward (red) node. forwardPos Vector3 Position of the forward (green) node. model Token Unit name of the curve model. Returns Curve The newly created curve. Append(Vector3, bool) Appends a curve segment to the end of this one. public Curve Append(Vector3 position, bool cloneSettings = true) Parameters position Vector3 The position of the ForwardNode of the new curve segment. cloneSettings bool Whether the new segment should have the same settings as this one. If false, the defaults will be used. Returns Curve The newly created curve segment. Append(Vector3, Token) Appends a curve segment to the end of this one. public Curve Append(Vector3 position, Token model) Parameters position Vector3 The position of the ForwardNode of the new curve segment. model Token Unit name of the curve model. Returns Curve The newly created curve. Init() Sets the item's properties to its default values. protected override void Init() Move(Vector3) Moves the item to a different location. public override void Move(Vector3 newPos) Parameters newPos Vector3 The new position. Translate(Vector3) Translates the item by the given vector. public override void Translate(Vector3 translation) Parameters translation Vector3 The translation vector."
  },
  "api/TruckLib.ScsMap.CutPlane.html": {
    "href": "api/TruckLib.ScsMap.CutPlane.html",
    "title": "Class CutPlane | TruckLib",
    "keywords": "Class CutPlane Namespace TruckLib.ScsMap Assembly TruckLib.dll Defines a path creating one or more planes perpendicular to the ground plane. Items which are fully behind these planes from the point of view of the camera are not rendered. public class CutPlane : PathItem, IMapItem, IMapObject Inheritance object MapItem PathItem CutPlane Implements IMapItem IMapObject Inherited Members PathItem.Nodes PathItem.Init() PathItem.Move(Vector3) PathItem.Move(Vector3, int) PathItem.Translate(Vector3) PathItem.CreateNodes(IList<Vector3>) PathItem.Recalculate() MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CutPlane() public CutPlane() Properties DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort EndNodeAngle public CutPlaneNodeAngle EndNodeAngle { get; set; } Property Value CutPlaneNodeAngle ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType OneSideOnly Gets or sets if the cut plane is only active when looking at it from the back. public bool OneSideOnly { get; set; } Property Value bool RotatedLimits public bool RotatedLimits { get; set; } Property Value bool StartNodeAngle public CutPlaneNodeAngle StartNodeAngle { get; set; } Property Value CutPlaneNodeAngle Methods Add(IItemContainer, IList<Vector3>, bool) Adds a cut plane to the map. public static CutPlane Add(IItemContainer map, IList<Vector3> positions, bool oneSideOnly = false) Parameters map IItemContainer The map. positions IList<Vector3> Positions of the nodes of the cut plane. oneSideOnly bool Whether the cut plane is only active when looking at it from the back. Returns CutPlane The newly created cut plane. Append(Vector3) Appends a new node to the cut plane. public void Append(Vector3 position) Parameters position Vector3 The position of the new node. RecalculateRotation(int) Recalculates the rotation of one node. protected override void RecalculateRotation(int i) Parameters i int The index of the node."
  },
  "api/TruckLib.ScsMap.CutPlaneNodeAngle.html": {
    "href": "api/TruckLib.ScsMap.CutPlaneNodeAngle.html",
    "title": "Struct CutPlaneNodeAngle | TruckLib",
    "keywords": "Struct CutPlaneNodeAngle Namespace TruckLib.ScsMap Assembly TruckLib.dll public struct CutPlaneNodeAngle Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Methods Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator ==(CutPlaneNodeAngle, CutPlaneNodeAngle) public static bool operator ==(CutPlaneNodeAngle left, CutPlaneNodeAngle right) Parameters left CutPlaneNodeAngle right CutPlaneNodeAngle Returns bool implicit operator CutPlaneNodeAngle(int) public static implicit operator CutPlaneNodeAngle(int v) Parameters v int Returns CutPlaneNodeAngle implicit operator sbyte(CutPlaneNodeAngle) public static implicit operator sbyte(CutPlaneNodeAngle c) Parameters c CutPlaneNodeAngle Returns sbyte operator !=(CutPlaneNodeAngle, CutPlaneNodeAngle) public static bool operator !=(CutPlaneNodeAngle left, CutPlaneNodeAngle right) Parameters left CutPlaneNodeAngle right CutPlaneNodeAngle Returns bool"
  },
  "api/TruckLib.ScsMap.Cutscene.html": {
    "href": "api/TruckLib.ScsMap.Cutscene.html",
    "title": "Class Cutscene | TruckLib",
    "keywords": "Class Cutscene Namespace TruckLib.ScsMap Assembly TruckLib.dll public class Cutscene : SingleNodeItem, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem Cutscene Implements IMapItem IMapObject Inherited Members SingleNodeItem.Node SingleNodeItem.Move(Vector3) SingleNodeItem.Translate(Vector3) MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Cutscene() public Cutscene() Properties Actions public List<CutsceneAction> Actions { get; set; } Property Value List<CutsceneAction> DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort DlcGuard public byte DlcGuard { get; set; } Property Value byte ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType SecretViewpoint Gets or sets if a viewpoint is only visible in the UI map once it has been discovered. public bool SecretViewpoint { get; set; } Property Value bool Tags Tags of the item. public List<Token> Tags { get; set; } Property Value List<Token> Type public CutsceneType Type { get; set; } Property Value CutsceneType Methods Add(IItemContainer, Vector3) Adds a cutscene item to the map. public static Cutscene Add(IItemContainer map, Vector3 position) Parameters map IItemContainer The map. position Vector3 The position of the item. Returns Cutscene The newly created cutscene item. Init() Sets the item's properties to its default values. protected override void Init()"
  },
  "api/TruckLib.ScsMap.CutsceneAction.html": {
    "href": "api/TruckLib.ScsMap.CutsceneAction.html",
    "title": "Class CutsceneAction | TruckLib",
    "keywords": "Class CutsceneAction Namespace TruckLib.ScsMap Assembly TruckLib.dll public class CutsceneAction : ActionBase, IBinarySerializable Inheritance object ActionBase CutsceneAction Implements IBinarySerializable Inherited Members ActionBase.NumParams ActionBase.StringParams ActionBase.TargetTags ActionBase.TargetRange ActionBase.ActionFlags ActionBase.Deserialize(BinaryReader, uint?) ActionBase.Serialize(BinaryWriter) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/TruckLib.ScsMap.CutsceneType.html": {
    "href": "api/TruckLib.ScsMap.CutsceneType.html",
    "title": "Enum CutsceneType | TruckLib",
    "keywords": "Enum CutsceneType Namespace TruckLib.ScsMap Assembly TruckLib.dll The type of a Cutscene item. public enum CutsceneType Fields Event = 1 MapScene = 2 Viewpoint = 0"
  },
  "api/TruckLib.ScsMap.EasingFunction.html": {
    "href": "api/TruckLib.ScsMap.EasingFunction.html",
    "title": "Enum EasingFunction | TruckLib",
    "keywords": "Enum EasingFunction Namespace TruckLib.ScsMap Assembly TruckLib.dll Easing functions used by keyframes. public enum EasingFunction Fields Custom = 0 EaseInCubic = 9 EaseInExpo = 11 EaseInOutCubic = 4 EaseInOutExpo = 6 EaseInOutQuad = 3 EaseInOutQuart = 5 EaseInOutSine = 2 EaseInQuad = 8 EaseInQuart = 10 EaseInSine = 7 EaseOutCubic = 14 EaseOutExpo = 16 EaseOutQuad = 13 EaseOutQuart = 15 EaseOutSine = 12 Linear = 1"
  },
  "api/TruckLib.ScsMap.EdgeOverride.html": {
    "href": "api/TruckLib.ScsMap.EdgeOverride.html",
    "title": "Struct EdgeOverride | TruckLib",
    "keywords": "Struct EdgeOverride Namespace TruckLib.ScsMap Assembly TruckLib.dll Represents an edge model override of a Road. public struct EdgeOverride : IBinarySerializable Implements IBinarySerializable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors EdgeOverride(Token, ushort, ushort) Instantiates an EdgeOverride. public EdgeOverride(Token edge, ushort offset, ushort length) Parameters edge Token Unit name of the edge model. offset ushort Offset of the section at which the override begins, counted in forward direction. length ushort Number of road sections for which the override will repeat. Properties Edge Unit name of the edge model, as defined in /def/world/road_edge.sii. public Token Edge { readonly get; set; } Property Value Token Length Number of sections for which the override will repeat. public ushort Length { readonly get; set; } Property Value ushort Remarks One section spans three road quads. Offset Offset of the section at which the override begins, counted in forward direction. public ushort Offset { readonly get; set; } Property Value ushort Remarks One section spans three road quads. Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.ScsMap.EdgeTerrain.html": {
    "href": "api/TruckLib.ScsMap.EdgeTerrain.html",
    "title": "Class EdgeTerrain | TruckLib",
    "keywords": "Class EdgeTerrain Namespace TruckLib.ScsMap Assembly TruckLib.dll Base class for RoadTerrain and PrefabTerrain. public abstract class EdgeTerrain Inheritance object EdgeTerrain Derived PrefabTerrain RoadTerrain Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields RowWidthSequence Widths of terrain rows in meters. After row 15, every row is 100 meters wide. public static readonly int[] RowWidthSequence Field Value int[] Properties Coefficient Vertical scale coefficient of the terrain profile. public float Coefficient { get; set; } Property Value float Profile Unit name of the terrain profile. public Token Profile { get; set; } Property Value Token QuadData Properties of the terrain quads. public TerrainQuadData QuadData { get; set; } Property Value TerrainQuadData Size Terrain size in meters. Must be between 0 and 6500. public float Size { get; set; } Property Value float Methods CalculateQuadRows(float) Calculates the amount of quad rows in this terrain. protected int CalculateQuadRows(float terrainSize) Parameters terrainSize float The terrain size. Returns int The amount of quad rows. GetRowWidthAt(int) Returns the width of a terrain quad row at the given index. public static int GetRowWidthAt(int index) Parameters index int The index. Returns int The width of a terrain quad row at that index. Init() Sets the RoadTerrain's properties to its default values. protected virtual void Init() UpdateQuadAmount() protected void UpdateQuadAmount()"
  },
  "api/TruckLib.ScsMap.EnvironmentArea.html": {
    "href": "api/TruckLib.ScsMap.EnvironmentArea.html",
    "title": "Class EnvironmentArea | TruckLib",
    "keywords": "Class EnvironmentArea Namespace TruckLib.ScsMap Assembly TruckLib.dll Defines a rectangular area in which public class EnvironmentArea : SingleNodeItem, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem EnvironmentArea Implements IMapItem IMapObject Inherited Members SingleNodeItem.Node SingleNodeItem.Move(Vector3) SingleNodeItem.Translate(Vector3) MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EnvironmentArea() public EnvironmentArea() Properties Climate Unit name of the climate profile, as defined in /def/climate.sii. public Token Climate { get; set; } Property Value Token DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort FogBehavior public FogMask FogBehavior { get; set; } Property Value FogMask Height Height of the area. public float Height { get; set; } Property Value float ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Precipitation public bool Precipitation { get; set; } Property Value bool ReflectionCube Unit name of the reflection cube, as defined in /def/relightable_cubemaps.sii(?). public Token ReflectionCube { get; set; } Property Value Token Width Width of the area. public float Width { get; set; } Property Value float Methods Add(IItemContainer, Vector3, float, float) Adds an environment area to the map. public static EnvironmentArea Add(IItemContainer map, Vector3 position, float width, float height) Parameters map IItemContainer The map. position Vector3 The position of the center of the area. width float The width of the area. height float The height of the area. Returns EnvironmentArea The newly created environment area. Init() Sets the item's properties to its default values. protected override void Init()"
  },
  "api/TruckLib.ScsMap.FarModel.html": {
    "href": "api/TruckLib.ScsMap.FarModel.html",
    "title": "Class FarModel | TruckLib",
    "keywords": "Class FarModel Namespace TruckLib.ScsMap Assembly TruckLib.dll Defines a rectangular area which ignores the usual view distance limit of 1500 m for specific items if the camera is inside it. public class FarModel : MapItem, IMapItem, IMapObject Inheritance object MapItem FarModel Implements IMapItem IMapObject Inherited Members MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FarModel() public FarModel() Properties Children Regular map items for which the view distance limit is ignored inside the area defined by this item. Used if UseMapItems is true. public List<IMapItem> Children { get; set; } Property Value List<IMapItem> DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort FarShadows Gets or sets whether far shadows will be rendered. public bool FarShadows { get; set; } Property Value bool Height Height of the area in which the models are visible. public float Height { get; set; } Property Value float ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Models Models specific to Far Model items which are only visible inside the area defined by this item. Used if UseMapItems is false. public FarModelDataList Models { get; set; } Property Value FarModelDataList Node The map node of this item. public INode Node { get; set; } Property Value INode UseMapItems If true, the item affects regular map items referenced in Children. If false, the game will place models unique to Far Model items specified in Models. public bool UseMapItems { get; set; } Property Value bool WaterReflection Gets or sets if the item is reflected on water surfaces. public bool WaterReflection { get; set; } Property Value bool Width Width of the area in which the models are visible. public float Width { get; set; } Property Value float Methods Add(IItemContainer, Vector3, float, float) Adds a Far Model item to the map. public static FarModel Add(IItemContainer map, Vector3 position, float width, float height) Parameters map IItemContainer The map. position Vector3 The position of the center node. width float The width of the area. height float The height of the area. Returns FarModel The newly created Far Model item. Init() Sets the item's properties to its default values. protected override void Init() Move(Vector3) Moves the item to a different location. public override void Move(Vector3 newPos) Parameters newPos Vector3 The new position. Translate(Vector3) Translates the item by the given vector. public override void Translate(Vector3 translation) Parameters translation Vector3 The translation vector. UpdateItemReferences(Dictionary<ulong, MapItem>) Searches a list of all map items for the map items referenced by UID in this map item and updates the respective references. This is used for loading a map and does not need to be called by the user at any point. public void UpdateItemReferences(Dictionary<ulong, MapItem> allItems) Parameters allItems Dictionary<ulong, MapItem> A dictionary of all items in the entire map."
  },
  "api/TruckLib.ScsMap.FarModelData.html": {
    "href": "api/TruckLib.ScsMap.FarModelData.html",
    "title": "Struct FarModelData | TruckLib",
    "keywords": "Struct FarModelData Namespace TruckLib.ScsMap Assembly TruckLib.dll Properties of a model specific to Far Model items. public struct FarModelData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FarModelData(INode, Token, Vector3) public FarModelData(INode node, Token model, Vector3 scale) Parameters node INode model Token scale Vector3 Properties Model Unit name of the model, as defined in /def/world/far_model.sii. public Token Model { readonly get; set; } Property Value Token Node The map node which defines the position and rotation of the model. public INode Node { readonly get; set; } Property Value INode Scale Relative scale per axis. public Vector3 Scale { readonly get; set; } Property Value Vector3"
  },
  "api/TruckLib.ScsMap.Ferry.html": {
    "href": "api/TruckLib.ScsMap.Ferry.html",
    "title": "Class Ferry | TruckLib",
    "keywords": "Class Ferry Namespace TruckLib.ScsMap Assembly TruckLib.dll The activation point for a ferry. public class Ferry : SingleNodeItem, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem Ferry Implements IMapItem IMapObject Inherited Members SingleNodeItem.Node SingleNodeItem.Move(Vector3) SingleNodeItem.Translate(Vector3) MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Ferry() public Ferry() Properties Cutscene public bool Cutscene { get; set; } Property Value bool DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Port Unit name of the port, as defined in /def/ferry.sii. public Token Port { get; set; } Property Value Token Prefab The prefab this ferry is linked to, if applicable. public IMapItem Prefab { get; set; } Property Value IMapItem TrainTransport Gets or sets if the item is actually a train transport. public bool TrainTransport { get; set; } Property Value bool UnloadOffset public Vector3 UnloadOffset { get; set; } Property Value Vector3 Methods Add(IItemContainer, Vector3, Token) Adds a ferry to the map. public static Ferry Add(IItemContainer map, Vector3 position, Token port) Parameters map IItemContainer The map. position Vector3 The position of the node. port Token Unit name of the port. Returns Ferry The newly created ferry. Init() Sets the item's properties to its default values. protected override void Init() UpdateItemReferences(Dictionary<ulong, MapItem>) Searches a list of all map items for the map items referenced by UID in this map item and updates the respective references. This is used for loading a map and does not need to be called by the user at any point. public void UpdateItemReferences(Dictionary<ulong, MapItem> allItems) Parameters allItems Dictionary<ulong, MapItem> A dictionary of all items in the entire map."
  },
  "api/TruckLib.ScsMap.FogMask.html": {
    "href": "api/TruckLib.ScsMap.FogMask.html",
    "title": "Enum FogMask | TruckLib",
    "keywords": "Enum FogMask Namespace TruckLib.ScsMap Assembly TruckLib.dll Fog behavior in a Environment Area. public enum FogMask Fields Indoor = 1 No fog falloff. None = 0 OpenArea = 4 Long bidirectional falloff. Overpass = 3 Long directional falloff. Tunnel = 2 Short directional falloff."
  },
  "api/TruckLib.ScsMap.FuelPump.html": {
    "href": "api/TruckLib.ScsMap.FuelPump.html",
    "title": "Class FuelPump | TruckLib",
    "keywords": "Class FuelPump Namespace TruckLib.ScsMap Assembly TruckLib.dll A prefab slave item which is placed for the GasStation spawn point type of a prefab. public class FuelPump : Service, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem PrefabSlaveItem Service FuelPump Implements IMapItem IMapObject Inherited Members Service.Nodes Service.ServiceType Service.Init() Service.Move(Vector3) Service.Translate(Vector3) PrefabSlaveItem.DefaultItemFile PrefabSlaveItem.DefaultViewDistance PrefabSlaveItem.Prefab PrefabSlaveItem.Add<T>(IItemContainer, Prefab, Vector3) PrefabSlaveItem.UpdateItemReferences(Dictionary<ulong, MapItem>) SingleNodeItem.Node MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Methods Add(IItemContainer, Prefab, Vector3) Adds a fuel pump to the map. public static FuelPump Add(IItemContainer map, Prefab parent, Vector3 position) Parameters map IItemContainer The map. parent Prefab The prefab this item is linked to. position Vector3 The position of the node. Returns FuelPump The newly created fuel pump."
  },
  "api/TruckLib.ScsMap.Garage.html": {
    "href": "api/TruckLib.ScsMap.Garage.html",
    "title": "Class Garage | TruckLib",
    "keywords": "Class Garage Namespace TruckLib.ScsMap Assembly TruckLib.dll A prefab slave item which is placed for the GaragePoint and BuyPoint spawn point types of a prefab. public class Garage : PrefabSlaveItem, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem PrefabSlaveItem Garage Implements IMapItem IMapObject Inherited Members PrefabSlaveItem.DefaultItemFile PrefabSlaveItem.DefaultViewDistance PrefabSlaveItem.Prefab PrefabSlaveItem.Add<T>(IItemContainer, Prefab, Vector3) PrefabSlaveItem.UpdateItemReferences(Dictionary<ulong, MapItem>) SingleNodeItem.Node MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks GaragePoint items additionally contain one node for each TrailerSpawn spawn point. Constructors Garage() public Garage() Properties CityName The city in which the garage is located, as defined in /def/city.sii. public Token CityName { get; set; } Property Value Token IsBuyPoint Gets or sets if this is the BuyPoint (true) or the GaragePoint (false). public bool IsBuyPoint { get; set; } Property Value bool ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType TrailerSpawnPoints Nodes representing the TrailerSpawn spawn point type of the prefab. public List<INode> TrailerSpawnPoints { get; set; } Property Value List<INode> Methods Add(IItemContainer, Prefab, Vector3) Adds a garage to the map. public static Garage Add(IItemContainer map, Prefab parent, Vector3 position) Parameters map IItemContainer The map. parent Prefab The prefab this item is linked to. position Vector3 The position of the node. Returns Garage The newly created garage. Init() Sets the item's properties to its default values. protected override void Init() Move(Vector3) Moves the item to a different location. public override void Move(Vector3 newPos) Parameters newPos Vector3 The new position. Translate(Vector3) Translates the item by the given vector. public override void Translate(Vector3 translation) Parameters translation Vector3 The translation vector."
  },
  "api/TruckLib.ScsMap.Gate.html": {
    "href": "api/TruckLib.ScsMap.Gate.html",
    "title": "Class Gate | TruckLib",
    "keywords": "Class Gate Namespace TruckLib.ScsMap Assembly TruckLib.dll A gate which can be activated in various different ways. public class Gate : SingleNodeItem, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem Gate Implements IMapItem IMapObject Inherited Members SingleNodeItem.Node SingleNodeItem.Move(Vector3) SingleNodeItem.Translate(Vector3) MapItem.ItemFile MapItem.Uid MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Gate() public Gate() Properties ActivationPoints Activation points of the gate. Only used if Type is TriggerActivated. public GateActivationPointList ActivationPoints { get; set; } Property Value GateActivationPointList DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Model Unit name of the model, as defined in /def/world/gate_model.sii. public Token Model { get; set; } Property Value Token Type The activation type of the gate. If the type is changed from TriggerActivated to AlwaysOpen or AlwaysClosed, the activation points will be cleared. public GateType Type { get; set; } Property Value GateType ViewDistance Gets or sets the view distance of the item in meters. public ushort ViewDistance { get; set; } Property Value ushort Methods Add(IItemContainer, Vector3, Token, GateType) Adds a gate to the map. public static Gate Add(IItemContainer map, Vector3 position, Token model, GateType type) Parameters map IItemContainer The map. position Vector3 The position of the new gate. model Token Unit name of the gate model. type GateType The gate activation type. Returns Gate The newly created gate. Init() Sets the item's properties to its default values. protected override void Init()"
  },
  "api/TruckLib.ScsMap.GateActivationPoint.html": {
    "href": "api/TruckLib.ScsMap.GateActivationPoint.html",
    "title": "Struct GateActivationPoint | TruckLib",
    "keywords": "Struct GateActivationPoint Namespace TruckLib.ScsMap Assembly TruckLib.dll Properties of an activation point of a Gate item. public struct GateActivationPoint Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors GateActivationPoint(INode, string) public GateActivationPoint(INode node, string trigger) Parameters node INode trigger string Properties Node Position of the trigger. public readonly INode Node { get; } Property Value INode Trigger Name of the trigger type. public string Trigger { readonly get; set; } Property Value string"
  },
  "api/TruckLib.ScsMap.GateType.html": {
    "href": "api/TruckLib.ScsMap.GateType.html",
    "title": "Enum GateType | TruckLib",
    "keywords": "Enum GateType Namespace TruckLib.ScsMap Assembly TruckLib.dll The behavior of a Gate. public enum GateType Fields AlwaysClosed = 2 AlwaysOpen = 1 TriggerActivated = 0"
  },
  "api/TruckLib.ScsMap.Header.html": {
    "href": "api/TruckLib.ScsMap.Header.html",
    "title": "Class Header | TruckLib",
    "keywords": "Class Header Namespace TruckLib.ScsMap Assembly TruckLib.dll Represents the header of .mbd, .base, .aux, .snd, .data, .layer, and .sbd files. public class Header : IBinarySerializable Inheritance object Header Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CoreMapVersion Version number of the map format. public uint CoreMapVersion { get; } Property Value uint GameId Game ID token. The ID euro2 is used for both Euro Truck Simulator 2 and American Truck Simulator. public Token GameId { get; set; } Property Value Token GameMapVersion Game map version. Not sure what this value affects. public uint GameMapVersion { get; set; } Property Value uint Methods Deserialize(BinaryReader, uint?) public virtual void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Exceptions UnsupportedVersionException Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.ScsMap.Hinge.html": {
    "href": "api/TruckLib.ScsMap.Hinge.html",
    "title": "Class Hinge | TruckLib",
    "keywords": "Class Hinge Namespace TruckLib.ScsMap Assembly TruckLib.dll According to the wiki: \"Currently unused. It defined object that could be placed on map and be swung by player truck e.g. swing doors.\" [Obsolete] public class Hinge : SingleNodeItem, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem Hinge Implements IMapItem IMapObject Inherited Members SingleNodeItem.Node SingleNodeItem.Move(Vector3) SingleNodeItem.Translate(Vector3) MapItem.ItemFile MapItem.Uid MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks In the editor, trying to open the properties dialog for this item will cause it to crash. Constructors Hinge() public Hinge() Properties DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Look Look of the model. public Token Look { get; set; } Property Value Token MaxRotation public float MaxRotation { get; set; } Property Value float MinRotation public float MinRotation { get; set; } Property Value float Model Unit name of the model, as defined in /def/world/hinge.sii. public Token Model { get; set; } Property Value Token ViewDistance Gets or sets the view distance of the item in meters. public ushort ViewDistance { get; set; } Property Value ushort Methods Add(IItemContainer, Vector3, Token) Adds a hinge to the map. public static Hinge Add(IItemContainer map, Vector3 position, Token model) Parameters map IItemContainer The map. position Vector3 The position of the hinge. model Token The unit name of the model. Returns Hinge The newly created hinge. Init() Sets the item's properties to its default values. protected override void Init()"
  },
  "api/TruckLib.ScsMap.Hookup.html": {
    "href": "api/TruckLib.ScsMap.Hookup.html",
    "title": "Class Hookup | TruckLib",
    "keywords": "Class Hookup Namespace TruckLib.ScsMap Assembly TruckLib.dll Defines a point where a random vehicle model is placed at runtime. public class Hookup : SingleNodeItem, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem Hookup Implements IMapItem IMapObject Inherited Members SingleNodeItem.Node SingleNodeItem.Move(Vector3) SingleNodeItem.Translate(Vector3) MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Hookup() public Hookup() Properties DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort FixedSeed Gets or sets if the seed for the RNG is based on the item's position, meaning that the chosen model therefore only changes if the item is moved or the model pool changes. public bool FixedSeed { get; set; } Property Value bool IgnoreCutPlanes Gets or sets if this item will render behind a cut plane. public bool IgnoreCutPlanes { get; set; } Property Value bool ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType MirrorReflection Gets or sets if this item is visible in mirrors. public bool MirrorReflection { get; set; } Property Value bool ModelDetail The LOD of the model. public HookupModelDetail ModelDetail { get; set; } Property Value HookupModelDetail Name Name of the model pool. public string Name { get; set; } Property Value string NodeAlignment Determines where the model is placed relative to the item's node. public HookupNodeAlignment NodeAlignment { get; set; } Property Value HookupNodeAlignment Physics Gets or sets if physics are enabled for this item. public bool Physics { get; set; } Property Value bool Shadows Gets or sets if the item casts shadows. public bool Shadows { get; set; } Property Value bool SpawnProbability Tthe likelihood in percent that a model will be spawned. public HookupSpawnProbability SpawnProbability { get; set; } Property Value HookupSpawnProbability WaterReflection Gets or sets if the item is reflected on water surfaces. public bool WaterReflection { get; set; } Property Value bool Methods Add(IItemContainer, Vector3, string) Adds a hookup to the map. public static Hookup Add(IItemContainer map, Vector3 position, string name) Parameters map IItemContainer The map. position Vector3 The position of the hookup. name string The name of the model pool. Returns Hookup The newly created hookup. Init() Sets the item's properties to its default values. protected override void Init()"
  },
  "api/TruckLib.ScsMap.HookupModelDetail.html": {
    "href": "api/TruckLib.ScsMap.HookupModelDetail.html",
    "title": "Enum HookupModelDetail | TruckLib",
    "keywords": "Enum HookupModelDetail Namespace TruckLib.ScsMap Assembly TruckLib.dll The LOD of the spawned model of a Hookup. public enum HookupModelDetail Fields Average = 1 Default = 0 Low = 2 VeryLow = 3"
  },
  "api/TruckLib.ScsMap.HookupNodeAlignment.html": {
    "href": "api/TruckLib.ScsMap.HookupNodeAlignment.html",
    "title": "Enum HookupNodeAlignment | TruckLib",
    "keywords": "Enum HookupNodeAlignment Namespace TruckLib.ScsMap Assembly TruckLib.dll The node alignment of a Hookup. public enum HookupNodeAlignment Fields Front = 1 The hookup node is the position of the front end of the model. None = 0 The model is placed in its default position. Rear = 2 The hookup node is the position of the rear end of the model."
  },
  "api/TruckLib.ScsMap.HookupSpawnProbability.html": {
    "href": "api/TruckLib.ScsMap.HookupSpawnProbability.html",
    "title": "Enum HookupSpawnProbability | TruckLib",
    "keywords": "Enum HookupSpawnProbability Namespace TruckLib.ScsMap Assembly TruckLib.dll The likelihood in percent that a Hookup will spawn a model. public enum HookupSpawnProbability Fields Default = 0 Percent25 = 1 Percent50 = 2 Percent75 = 3"
  },
  "api/TruckLib.ScsMap.IItemContainer.html": {
    "href": "api/TruckLib.ScsMap.IItemContainer.html",
    "title": "Interface IItemContainer | TruckLib",
    "keywords": "Interface IItemContainer Namespace TruckLib.ScsMap Assembly TruckLib.dll Interface for classes that hold map items and nodes: Map, Compound and Selection. public interface IItemContainer Properties MapItems The map items parented by this container. Dictionary<ulong, MapItem> MapItems { get; } Property Value Dictionary<ulong, MapItem> Nodes The nodes parented by this container. IDictionary<ulong, INode> Nodes { get; } Property Value IDictionary<ulong, INode> Methods AddNode(Vector3) Adds a node to the container. Node AddNode(Vector3 position) Parameters position Vector3 The position of the node. Returns Node The new node. AddNode(Vector3, bool) Adds a node to the container. Node AddNode(Vector3 position, bool isRed) Parameters position Vector3 The position of the node. isRed bool Whether the node is red. Returns Node The new node. Delete(INode) Deletes a node from the container. void Delete(INode node) Parameters node INode The node. Delete(MapItem) Deletes an item from the container. void Delete(MapItem item) Parameters item MapItem The item."
  },
  "api/TruckLib.ScsMap.IMapItem.html": {
    "href": "api/TruckLib.ScsMap.IMapItem.html",
    "title": "Interface IMapItem | TruckLib",
    "keywords": "Interface IMapItem Namespace TruckLib.ScsMap Assembly TruckLib.dll public interface IMapItem : IMapObject Inherited Members IMapObject.Uid Properties DefaultItemFile ItemFile DefaultItemFile { get; } Property Value ItemFile ItemFile ItemFile ItemFile { get; } Property Value ItemFile ItemType ItemType ItemType { get; } Property Value ItemType Methods Move(Vector3) void Move(Vector3 newPos) Parameters newPos Vector3 Translate(Vector3) void Translate(Vector3 translation) Parameters translation Vector3"
  },
  "api/TruckLib.ScsMap.IMapObject.html": {
    "href": "api/TruckLib.ScsMap.IMapObject.html",
    "title": "Interface IMapObject | TruckLib",
    "keywords": "Interface IMapObject Namespace TruckLib.ScsMap Assembly TruckLib.dll An interface implemented by both types of objects in a map: items and nodes. public interface IMapObject Properties Uid Gets or sets the UID of the object. ulong Uid { get; set; } Property Value ulong"
  },
  "api/TruckLib.ScsMap.INode.html": {
    "href": "api/TruckLib.ScsMap.INode.html",
    "title": "Interface INode | TruckLib",
    "keywords": "Interface INode Namespace TruckLib.ScsMap Assembly TruckLib.dll public interface INode : IMapObject Inherited Members IMapObject.Uid Properties BackwardCountry byte BackwardCountry { get; set; } Property Value byte BackwardItem IMapObject BackwardItem { get; set; } Property Value IMapObject ForwardCountry byte ForwardCountry { get; set; } Property Value byte ForwardItem IMapObject ForwardItem { get; set; } Property Value IMapObject FreeRotation bool FreeRotation { get; set; } Property Value bool IsCountryBorder bool IsCountryBorder { get; set; } Property Value bool IsCurveLocator bool IsCurveLocator { get; set; } Property Value bool IsRed bool IsRed { get; set; } Property Value bool Locked bool Locked { get; set; } Property Value bool Parent IItemContainer Parent { get; set; } Property Value IItemContainer Position Vector3 Position { get; set; } Property Value Vector3 Rotation Quaternion Rotation { get; set; } Property Value Quaternion Methods Deserialize(BinaryReader, uint?) void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? IsOrphaned() bool IsOrphaned() Returns bool Merge(INode) void Merge(INode n2) Parameters n2 INode Move(Vector3) void Move(Vector3 newPos) Parameters newPos Vector3 Serialize(BinaryWriter) void Serialize(BinaryWriter w) Parameters w BinaryWriter Split() INode Split() Returns INode ToString() string ToString() Returns string Translate(Vector3) void Translate(Vector3 translation) Parameters translation Vector3 UpdateItemReferences(Dictionary<ulong, MapItem>) void UpdateItemReferences(Dictionary<ulong, MapItem> allItems) Parameters allItems Dictionary<ulong, MapItem>"
  },
  "api/TruckLib.ScsMap.ISignOverrideAttribute.html": {
    "href": "api/TruckLib.ScsMap.ISignOverrideAttribute.html",
    "title": "Interface ISignOverrideAttribute | TruckLib",
    "keywords": "Interface ISignOverrideAttribute Namespace TruckLib.ScsMap Assembly TruckLib.dll An interface for storing SignOverrideAttributes of any type in a collection. public interface ISignOverrideAttribute Properties Index uint Index { get; set; } Property Value uint Type Type Type { get; } Property Value Type Methods GetValue() object GetValue() Returns object SetValue(object) void SetValue(object value) Parameters value object"
  },
  "api/TruckLib.ScsMap.ItemFile.html": {
    "href": "api/TruckLib.ScsMap.ItemFile.html",
    "title": "Enum ItemFile | TruckLib",
    "keywords": "Enum ItemFile Namespace TruckLib.ScsMap Assembly TruckLib.dll Sector files that can hold map items. public enum ItemFile Fields Aux = 1 Base = 0 Snd = 2"
  },
  "api/TruckLib.ScsMap.ItemType.html": {
    "href": "api/TruckLib.ScsMap.ItemType.html",
    "title": "Enum ItemType | TruckLib",
    "keywords": "Enum ItemType Namespace TruckLib.ScsMap Assembly TruckLib.dll Item type IDs in .base/.aux/.snd files. public enum ItemType Fields AnimatedModel = 15 BezierPatch = 39 Buildings = 2 BusStop = 37 CameraPath = 45 CameraPoint = 23 CityArea = 12 Company = 6 Compound = 40 Curve = 44 CutPlane = 8 Cutscene = 46 EnvironmentArea = 11 FarModel = 43 Ferry = 19 FuelPump = 35 Garage = 22 Gate = 49 Hinge = 13 Hookup = 47 MapArea = 42 MapOverlay = 18 Model = 5 Mover = 9 Prefab = 4 Road = 3 Service = 7 Sign = 36 Sound = 21 Terrain = 1 TrafficArea = 38 Trajectory = 41 Trigger = 34 VisibilityArea = 48 Walker = 28"
  },
  "api/TruckLib.ScsMap.KdopBounds.html": {
    "href": "api/TruckLib.ScsMap.KdopBounds.html",
    "title": "Class KdopBounds | TruckLib",
    "keywords": "Class KdopBounds Namespace TruckLib.ScsMap Assembly TruckLib.dll Represents the k-DOP bounding box of a map item. public class KdopBounds Inheritance object KdopBounds Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors KdopBounds() Instantiates a KdopBounds object. public KdopBounds() Properties Maximums Maximums of the k-DOP bounding box. public float[] Maximums { get; set; } Property Value float[] Minimums Minimums of the k-DOP bounding box. public float[] Minimums { get; set; } Property Value float[] Methods Init() Sets the arrays to safe default values. If too many items with all 0s are loaded, the game will crash. protected void Init()"
  },
  "api/TruckLib.ScsMap.Keyframe.html": {
    "href": "api/TruckLib.ScsMap.Keyframe.html",
    "title": "Class Keyframe | TruckLib",
    "keywords": "Class Keyframe Namespace TruckLib.ScsMap Assembly TruckLib.dll Represents the properties of one keyframe of a camera path. public class Keyframe : IBinarySerializable Inheritance object Keyframe Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ControlPoint1Position Position of the forward control point of the node this keyframe belongs to. public Vector3 ControlPoint1Position { get; set; } Property Value Vector3 ControlPoint2Position Position of the backward control point of the subsequent node. public Vector3 ControlPoint2Position { get; set; } Property Value Vector3 Fov FOV of the camera for this keyframe. public float Fov { get; set; } Property Value float RotationChange Easing function to use for rotation changes between keyframes. public EasingFunction RotationChange { get; set; } Property Value EasingFunction SpeedChange Easing function to use for speed changes between keyframes. public EasingFunction SpeedChange { get; set; } Property Value EasingFunction SpeedCoefficient Multiplier for the main camera speed. public float SpeedCoefficient { get; set; } Property Value float Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.ScsMap.Lookup.CountryId.Ats.html": {
    "href": "api/TruckLib.ScsMap.Lookup.CountryId.Ats.html",
    "title": "Class CountryId.Ats | TruckLib",
    "keywords": "Class CountryId.Ats Namespace TruckLib.ScsMap.Lookup Assembly TruckLib.dll Country IDs used or recommended for use in American Truck Simulator. public static class CountryId.Ats Inheritance object CountryId.Ats Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Alabama public static readonly byte Alabama Field Value byte Alaska public static readonly byte Alaska Field Value byte AntiguaAndBarbuda public static readonly byte AntiguaAndBarbuda Field Value byte Argentina public static readonly byte Argentina Field Value byte Arizona public static readonly byte Arizona Field Value byte Arkansas public static readonly byte Arkansas Field Value byte Bahamas public static readonly byte Bahamas Field Value byte Barbados public static readonly byte Barbados Field Value byte Belize public static readonly byte Belize Field Value byte Bolivia public static readonly byte Bolivia Field Value byte Brazil public static readonly byte Brazil Field Value byte California public static readonly byte California Field Value byte Canada public static readonly byte Canada Field Value byte CaymanIslands public static readonly byte CaymanIslands Field Value byte Chile public static readonly byte Chile Field Value byte Colombia public static readonly byte Colombia Field Value byte Colorado public static readonly byte Colorado Field Value byte Connecticut public static readonly byte Connecticut Field Value byte CostaRica public static readonly byte CostaRica Field Value byte Cuba public static readonly byte Cuba Field Value byte Delaware public static readonly byte Delaware Field Value byte Dominica public static readonly byte Dominica Field Value byte DominicanRepublic public static readonly byte DominicanRepublic Field Value byte Ecuador public static readonly byte Ecuador Field Value byte ElSalvador public static readonly byte ElSalvador Field Value byte Florida public static readonly byte Florida Field Value byte FrenchGuiana public static readonly byte FrenchGuiana Field Value byte Georgia public static readonly byte Georgia Field Value byte Greenland public static readonly byte Greenland Field Value byte Grenada public static readonly byte Grenada Field Value byte Guatemala public static readonly byte Guatemala Field Value byte Guyana public static readonly byte Guyana Field Value byte Haiti public static readonly byte Haiti Field Value byte Hawaii public static readonly byte Hawaii Field Value byte Honduras public static readonly byte Honduras Field Value byte Idaho public static readonly byte Idaho Field Value byte Illinois public static readonly byte Illinois Field Value byte Indiana public static readonly byte Indiana Field Value byte Iowa public static readonly byte Iowa Field Value byte Jamaica public static readonly byte Jamaica Field Value byte Kansas public static readonly byte Kansas Field Value byte Kentucky public static readonly byte Kentucky Field Value byte Louisiana public static readonly byte Louisiana Field Value byte Maine public static readonly byte Maine Field Value byte Maryland public static readonly byte Maryland Field Value byte Massachusetts public static readonly byte Massachusetts Field Value byte Mexico public static readonly byte Mexico Field Value byte Michigan public static readonly byte Michigan Field Value byte Minnesota public static readonly byte Minnesota Field Value byte Mississippi public static readonly byte Mississippi Field Value byte Missouri public static readonly byte Missouri Field Value byte Montana public static readonly byte Montana Field Value byte Nebraska public static readonly byte Nebraska Field Value byte Nevada public static readonly byte Nevada Field Value byte NewHampshire public static readonly byte NewHampshire Field Value byte NewJersey public static readonly byte NewJersey Field Value byte NewMexico public static readonly byte NewMexico Field Value byte NewYork public static readonly byte NewYork Field Value byte Nicaragua public static readonly byte Nicaragua Field Value byte NorthCarolina public static readonly byte NorthCarolina Field Value byte NorthDakota public static readonly byte NorthDakota Field Value byte Ohio public static readonly byte Ohio Field Value byte Oklahoma public static readonly byte Oklahoma Field Value byte Oregon public static readonly byte Oregon Field Value byte Panama public static readonly byte Panama Field Value byte Paraguay public static readonly byte Paraguay Field Value byte Pennsylvania public static readonly byte Pennsylvania Field Value byte Peru public static readonly byte Peru Field Value byte PuertoRico public static readonly byte PuertoRico Field Value byte RhodeIsland public static readonly byte RhodeIsland Field Value byte SaintKittsAndNevis public static readonly byte SaintKittsAndNevis Field Value byte SaintLucia public static readonly byte SaintLucia Field Value byte SaintVincentAndTheGrenadines public static readonly byte SaintVincentAndTheGrenadines Field Value byte SouthCarolina public static readonly byte SouthCarolina Field Value byte SouthDakota public static readonly byte SouthDakota Field Value byte Suriname public static readonly byte Suriname Field Value byte Tennessee public static readonly byte Tennessee Field Value byte Texas public static readonly byte Texas Field Value byte TrinidadAndTobago public static readonly byte TrinidadAndTobago Field Value byte TurksAndCaicos public static readonly byte TurksAndCaicos Field Value byte Uruguay public static readonly byte Uruguay Field Value byte Utah public static readonly byte Utah Field Value byte Venezuela public static readonly byte Venezuela Field Value byte Vermont public static readonly byte Vermont Field Value byte Virginia public static readonly byte Virginia Field Value byte Washington public static readonly byte Washington Field Value byte WestVirginia public static readonly byte WestVirginia Field Value byte Wisconsin public static readonly byte Wisconsin Field Value byte Wyoming public static readonly byte Wyoming Field Value byte"
  },
  "api/TruckLib.ScsMap.Lookup.CountryId.Ets2.html": {
    "href": "api/TruckLib.ScsMap.Lookup.CountryId.Ets2.html",
    "title": "Class CountryId.Ets2 | TruckLib",
    "keywords": "Class CountryId.Ets2 Namespace TruckLib.ScsMap.Lookup Assembly TruckLib.dll Country IDs used or recommended for use in Euro Truck Simulator 2. public static class CountryId.Ets2 Inheritance object CountryId.Ets2 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Afghanistan public static readonly byte Afghanistan Field Value byte Albania public static readonly byte Albania Field Value byte Algeria public static readonly byte Algeria Field Value byte Andorra public static readonly byte Andorra Field Value byte Angola public static readonly byte Angola Field Value byte AntiguaAndBarbuda public static readonly byte AntiguaAndBarbuda Field Value byte Argentina public static readonly byte Argentina Field Value byte Armenia public static readonly byte Armenia Field Value byte Australia public static readonly byte Australia Field Value byte Austria public static readonly byte Austria Field Value byte Azerbaijan public static readonly byte Azerbaijan Field Value byte Bahamas public static readonly byte Bahamas Field Value byte Bahrain public static readonly byte Bahrain Field Value byte Bangladesh public static readonly byte Bangladesh Field Value byte Barbados public static readonly byte Barbados Field Value byte Belarus public static readonly byte Belarus Field Value byte Belgium public static readonly byte Belgium Field Value byte Belize public static readonly byte Belize Field Value byte Benin public static readonly byte Benin Field Value byte Bhutan public static readonly byte Bhutan Field Value byte Bolivia public static readonly byte Bolivia Field Value byte BosniaAndHerzegovina public static readonly byte BosniaAndHerzegovina Field Value byte Botswana public static readonly byte Botswana Field Value byte Brazil public static readonly byte Brazil Field Value byte Brunei public static readonly byte Brunei Field Value byte Bulgaria public static readonly byte Bulgaria Field Value byte BurkinaFaso public static readonly byte BurkinaFaso Field Value byte Burundi public static readonly byte Burundi Field Value byte Cambodia public static readonly byte Cambodia Field Value byte Cameroon public static readonly byte Cameroon Field Value byte Canada public static readonly byte Canada Field Value byte CapeVerde public static readonly byte CapeVerde Field Value byte CaymanIslands public static readonly byte CaymanIslands Field Value byte CentralAfricanRepublic public static readonly byte CentralAfricanRepublic Field Value byte Chad public static readonly byte Chad Field Value byte Chile public static readonly byte Chile Field Value byte China public static readonly byte China Field Value byte Colombia public static readonly byte Colombia Field Value byte Comoros public static readonly byte Comoros Field Value byte CostaRica public static readonly byte CostaRica Field Value byte CoteDIvoire public static readonly byte CoteDIvoire Field Value byte Croatia public static readonly byte Croatia Field Value byte Cuba public static readonly byte Cuba Field Value byte Cyprus public static readonly byte Cyprus Field Value byte Czechia public static readonly byte Czechia Field Value byte DemocraticRepublicOfTheCongo public static readonly byte DemocraticRepublicOfTheCongo Field Value byte Denmark public static readonly byte Denmark Field Value byte Djibouti public static readonly byte Djibouti Field Value byte Dominica public static readonly byte Dominica Field Value byte DominicanRepublic public static readonly byte DominicanRepublic Field Value byte EastTimor public static readonly byte EastTimor Field Value byte Ecuador public static readonly byte Ecuador Field Value byte Egypt public static readonly byte Egypt Field Value byte ElSalvador public static readonly byte ElSalvador Field Value byte EquatorialGuinea public static readonly byte EquatorialGuinea Field Value byte Eritrea public static readonly byte Eritrea Field Value byte Estonia public static readonly byte Estonia Field Value byte Ethiopia public static readonly byte Ethiopia Field Value byte Fiji public static readonly byte Fiji Field Value byte Finland public static readonly byte Finland Field Value byte France public static readonly byte France Field Value byte FrenchGuiana public static readonly byte FrenchGuiana Field Value byte Gabon public static readonly byte Gabon Field Value byte Georgia public static readonly byte Georgia Field Value byte Germany public static readonly byte Germany Field Value byte Ghana public static readonly byte Ghana Field Value byte Greece public static readonly byte Greece Field Value byte Greenland public static readonly byte Greenland Field Value byte Grenada public static readonly byte Grenada Field Value byte Guatemala public static readonly byte Guatemala Field Value byte Guinea public static readonly byte Guinea Field Value byte GuineaBissau public static readonly byte GuineaBissau Field Value byte Guyana public static readonly byte Guyana Field Value byte Haiti public static readonly byte Haiti Field Value byte Honduras public static readonly byte Honduras Field Value byte Hungary public static readonly byte Hungary Field Value byte Iceland public static readonly byte Iceland Field Value byte India public static readonly byte India Field Value byte Indonesia public static readonly byte Indonesia Field Value byte Iran public static readonly byte Iran Field Value byte Iraq public static readonly byte Iraq Field Value byte Israel public static readonly byte Israel Field Value byte Italy public static readonly byte Italy Field Value byte Jamaica public static readonly byte Jamaica Field Value byte Japan public static readonly byte Japan Field Value byte Jordan public static readonly byte Jordan Field Value byte Kazakhstan public static readonly byte Kazakhstan Field Value byte Kenya public static readonly byte Kenya Field Value byte Kiribati public static readonly byte Kiribati Field Value byte Kuwait public static readonly byte Kuwait Field Value byte Kyrgyzstan public static readonly byte Kyrgyzstan Field Value byte Laos public static readonly byte Laos Field Value byte Latvia public static readonly byte Latvia Field Value byte Lebanon public static readonly byte Lebanon Field Value byte Lesotho public static readonly byte Lesotho Field Value byte Liberia public static readonly byte Liberia Field Value byte Libya public static readonly byte Libya Field Value byte Liechtenstein public static readonly byte Liechtenstein Field Value byte Lithuania public static readonly byte Lithuania Field Value byte Luxembourg public static readonly byte Luxembourg Field Value byte Madagascar public static readonly byte Madagascar Field Value byte Malawi public static readonly byte Malawi Field Value byte Malaysia public static readonly byte Malaysia Field Value byte Maldives public static readonly byte Maldives Field Value byte Mali public static readonly byte Mali Field Value byte Malta public static readonly byte Malta Field Value byte MarshallIslands public static readonly byte MarshallIslands Field Value byte Mauritania public static readonly byte Mauritania Field Value byte Mauritius public static readonly byte Mauritius Field Value byte Mexico public static readonly byte Mexico Field Value byte Micronesia public static readonly byte Micronesia Field Value byte Moldova public static readonly byte Moldova Field Value byte Monaco public static readonly byte Monaco Field Value byte Mongolia public static readonly byte Mongolia Field Value byte Montenegro public static readonly byte Montenegro Field Value byte Morocco public static readonly byte Morocco Field Value byte Mozambique public static readonly byte Mozambique Field Value byte Myanmar public static readonly byte Myanmar Field Value byte Namibia public static readonly byte Namibia Field Value byte Nauru public static readonly byte Nauru Field Value byte Nepal public static readonly byte Nepal Field Value byte Netherlands public static readonly byte Netherlands Field Value byte NewZealand public static readonly byte NewZealand Field Value byte Nicaragua public static readonly byte Nicaragua Field Value byte Niger public static readonly byte Niger Field Value byte Nigeria public static readonly byte Nigeria Field Value byte NorthKorea public static readonly byte NorthKorea Field Value byte Norway public static readonly byte Norway Field Value byte Oman public static readonly byte Oman Field Value byte Pakistan public static readonly byte Pakistan Field Value byte Palau public static readonly byte Palau Field Value byte Palestine public static readonly byte Palestine Field Value byte Panama public static readonly byte Panama Field Value byte PapuaNewGuinea public static readonly byte PapuaNewGuinea Field Value byte Paraguay public static readonly byte Paraguay Field Value byte Peru public static readonly byte Peru Field Value byte Philippines public static readonly byte Philippines Field Value byte Poland public static readonly byte Poland Field Value byte Portugal public static readonly byte Portugal Field Value byte PuertoRico public static readonly byte PuertoRico Field Value byte Qatar public static readonly byte Qatar Field Value byte RepublicOfIreland public static readonly byte RepublicOfIreland Field Value byte RepublicOfMacedonia public static readonly byte RepublicOfMacedonia Field Value byte RepublicOfTheCongo public static readonly byte RepublicOfTheCongo Field Value byte Romania public static readonly byte Romania Field Value byte Russia public static readonly byte Russia Field Value byte Rwanda public static readonly byte Rwanda Field Value byte SaintKittsAndNevis public static readonly byte SaintKittsAndNevis Field Value byte SaintLucia public static readonly byte SaintLucia Field Value byte SaintVincentAndTheGrenadines public static readonly byte SaintVincentAndTheGrenadines Field Value byte Samoa public static readonly byte Samoa Field Value byte SanMarino public static readonly byte SanMarino Field Value byte SaoTomeAndPrincipe public static readonly byte SaoTomeAndPrincipe Field Value byte SaudiArabia public static readonly byte SaudiArabia Field Value byte Senegal public static readonly byte Senegal Field Value byte Serbia public static readonly byte Serbia Field Value byte Seychelles public static readonly byte Seychelles Field Value byte SierraLeone public static readonly byte SierraLeone Field Value byte Singapore public static readonly byte Singapore Field Value byte Slovakia public static readonly byte Slovakia Field Value byte Slovenia public static readonly byte Slovenia Field Value byte SolomonIslands public static readonly byte SolomonIslands Field Value byte Somalia public static readonly byte Somalia Field Value byte SouthAfrica public static readonly byte SouthAfrica Field Value byte SouthKorea public static readonly byte SouthKorea Field Value byte SouthSudan public static readonly byte SouthSudan Field Value byte Spain public static readonly byte Spain Field Value byte SriLanka public static readonly byte SriLanka Field Value byte Sudan public static readonly byte Sudan Field Value byte Suriname public static readonly byte Suriname Field Value byte Swaziland public static readonly byte Swaziland Field Value byte Sweden public static readonly byte Sweden Field Value byte Switzerland public static readonly byte Switzerland Field Value byte Syria public static readonly byte Syria Field Value byte Taiwan public static readonly byte Taiwan Field Value byte Tajikistan public static readonly byte Tajikistan Field Value byte Tanzania public static readonly byte Tanzania Field Value byte Thailand public static readonly byte Thailand Field Value byte TheGambia public static readonly byte TheGambia Field Value byte Tibet public static readonly byte Tibet Field Value byte Togo public static readonly byte Togo Field Value byte Tonga public static readonly byte Tonga Field Value byte TrinidadAndTobago public static readonly byte TrinidadAndTobago Field Value byte Tunisia public static readonly byte Tunisia Field Value byte Turkey public static readonly byte Turkey Field Value byte Turkmenistan public static readonly byte Turkmenistan Field Value byte TurksAndCaicos public static readonly byte TurksAndCaicos Field Value byte Tuvalu public static readonly byte Tuvalu Field Value byte Uganda public static readonly byte Uganda Field Value byte Ukraine public static readonly byte Ukraine Field Value byte UnitedArabEmirates public static readonly byte UnitedArabEmirates Field Value byte UnitedKingdom public static readonly byte UnitedKingdom Field Value byte UnitedStates public static readonly byte UnitedStates Field Value byte Uruguay public static readonly byte Uruguay Field Value byte Uzbekistan public static readonly byte Uzbekistan Field Value byte Vanuatu public static readonly byte Vanuatu Field Value byte Venezuela public static readonly byte Venezuela Field Value byte Vietnam public static readonly byte Vietnam Field Value byte WesternSahara public static readonly byte WesternSahara Field Value byte Yemen public static readonly byte Yemen Field Value byte Zaire public static readonly byte Zaire Field Value byte Zambia public static readonly byte Zambia Field Value byte Zimbabwe public static readonly byte Zimbabwe Field Value byte"
  },
  "api/TruckLib.ScsMap.Lookup.CountryId.html": {
    "href": "api/TruckLib.ScsMap.Lookup.CountryId.html",
    "title": "Class CountryId | TruckLib",
    "keywords": "Class CountryId Namespace TruckLib.ScsMap.Lookup Assembly TruckLib.dll Country IDs as defined by SCS. Mods may use other IDs. public static class CountryId Inheritance object CountryId Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/TruckLib.ScsMap.Lookup.DlcGuard.Ats.html": {
    "href": "api/TruckLib.ScsMap.Lookup.DlcGuard.Ats.html",
    "title": "Class DlcGuard.Ats | TruckLib",
    "keywords": "Class DlcGuard.Ats Namespace TruckLib.ScsMap.Lookup Assembly TruckLib.dll DLC guard values used in American Truck Simulator. public static class DlcGuard.Ats Inheritance object DlcGuard.Ats Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Arizona public static readonly byte Arizona Field Value byte Arkansas public static readonly byte Arkansas Field Value byte ArkansasAndOklahoma public static readonly byte ArkansasAndOklahoma Field Value byte ArkansasAndTexas public static readonly byte ArkansasAndTexas Field Value byte Colorado public static readonly byte Colorado Field Value byte ColoradoAndNewMexico public static readonly byte ColoradoAndNewMexico Field Value byte ColoradoAndUtah public static readonly byte ColoradoAndUtah Field Value byte ColoradoAndWyoming public static readonly byte ColoradoAndWyoming Field Value byte Idaho public static readonly byte Idaho Field Value byte IdahoAndOregon public static readonly byte IdahoAndOregon Field Value byte IdahoAndUtah public static readonly byte IdahoAndUtah Field Value byte IdahoAndWashington public static readonly byte IdahoAndWashington Field Value byte IdahoAndWyoming public static readonly byte IdahoAndWyoming Field Value byte Kansas public static readonly byte Kansas Field Value byte KansasAndColorado public static readonly byte KansasAndColorado Field Value byte KansasAndOklahoma public static readonly byte KansasAndOklahoma Field Value byte Montana public static readonly byte Montana Field Value byte MontanaAndIdaho public static readonly byte MontanaAndIdaho Field Value byte MontanaAndWyoming public static readonly byte MontanaAndWyoming Field Value byte Nebraska public static readonly byte Nebraska Field Value byte NebraskaAndColorado public static readonly byte NebraskaAndColorado Field Value byte NebraskaAndKansas public static readonly byte NebraskaAndKansas Field Value byte NebraskaAndWyoming public static readonly byte NebraskaAndWyoming Field Value byte Nevada public static readonly byte Nevada Field Value byte NewMexico public static readonly byte NewMexico Field Value byte NewMexicoAndUtah public static readonly byte NewMexicoAndUtah Field Value byte None public static readonly byte None Field Value byte Oklahoma public static readonly byte Oklahoma Field Value byte OklahomaAndColorado public static readonly byte OklahomaAndColorado Field Value byte OklahomaAndNewMexico public static readonly byte OklahomaAndNewMexico Field Value byte OklahomaAndTexas public static readonly byte OklahomaAndTexas Field Value byte Oregon public static readonly byte Oregon Field Value byte OregonAndWashington public static readonly byte OregonAndWashington Field Value byte Texas public static readonly byte Texas Field Value byte TexasAndNewMexico public static readonly byte TexasAndNewMexico Field Value byte Utah public static readonly byte Utah Field Value byte UtahAndWyoming public static readonly byte UtahAndWyoming Field Value byte Washington public static readonly byte Washington Field Value byte Wyoming public static readonly byte Wyoming Field Value byte"
  },
  "api/TruckLib.ScsMap.Lookup.DlcGuard.Ets2.html": {
    "href": "api/TruckLib.ScsMap.Lookup.DlcGuard.Ets2.html",
    "title": "Class DlcGuard.Ets2 | TruckLib",
    "keywords": "Class DlcGuard.Ets2 Namespace TruckLib.ScsMap.Lookup Assembly TruckLib.dll DLC guard values used in Euro Truck Simulator 2. public static class DlcGuard.Ets2 Inheritance object DlcGuard.Ets2 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Baltic public static readonly byte Baltic Field Value byte BalticAndEast public static readonly byte BalticAndEast Field Value byte BalticAndRussia public static readonly byte BalticAndRussia Field Value byte BalticAndScandinavia public static readonly byte BalticAndScandinavia Field Value byte BlackSea public static readonly byte BlackSea Field Value byte BlackSeaAndEast public static readonly byte BlackSeaAndEast Field Value byte East public static readonly byte East Field Value byte Feldbinder public static readonly byte Feldbinder Field Value byte France public static readonly byte France Field Value byte FranceAndItaly public static readonly byte FranceAndItaly Field Value byte Greece public static readonly byte Greece Field Value byte GreeceAndEastBalkans public static readonly byte GreeceAndEastBalkans Field Value byte GreeceAndWestBalkans public static readonly byte GreeceAndWestBalkans Field Value byte Ibera public static readonly byte Ibera Field Value byte IberaAndFrance public static readonly byte IberaAndFrance Field Value byte Italy public static readonly byte Italy Field Value byte Krone public static readonly byte Krone Field Value byte None public static readonly byte None Field Value byte Russia public static readonly byte Russia Field Value byte Scandinavia public static readonly byte Scandinavia Field Value byte WestBalkans public static readonly byte WestBalkans Field Value byte WestBalkansAndBlackSea public static readonly byte WestBalkansAndBlackSea Field Value byte WestBalkansAndEast public static readonly byte WestBalkansAndEast Field Value byte"
  },
  "api/TruckLib.ScsMap.Lookup.DlcGuard.html": {
    "href": "api/TruckLib.ScsMap.Lookup.DlcGuard.html",
    "title": "Class DlcGuard | TruckLib",
    "keywords": "Class DlcGuard Namespace TruckLib.ScsMap.Lookup Assembly TruckLib.dll DLC guard values used in ETS2 and ATS. public static class DlcGuard Inheritance object DlcGuard Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/TruckLib.ScsMap.Lookup.html": {
    "href": "api/TruckLib.ScsMap.Lookup.html",
    "title": "Namespace TruckLib.ScsMap.Lookup | TruckLib",
    "keywords": "Namespace TruckLib.ScsMap.Lookup Classes CountryId Country IDs as defined by SCS. Mods may use other IDs. CountryId.Ats Country IDs used or recommended for use in American Truck Simulator. CountryId.Ets2 Country IDs used or recommended for use in Euro Truck Simulator 2. DlcGuard DLC guard values used in ETS2 and ATS. DlcGuard.Ats DLC guard values used in American Truck Simulator. DlcGuard.Ets2 DLC guard values used in Euro Truck Simulator 2."
  },
  "api/TruckLib.ScsMap.Map.html": {
    "href": "api/TruckLib.ScsMap.Map.html",
    "title": "Class Map | TruckLib",
    "keywords": "Class Map Namespace TruckLib.ScsMap Assembly TruckLib.dll A map for Euro Truck Simulator 2 or American Truck Simulator. public class Map : IItemContainer Inheritance object Map Implements IItemContainer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Map(string) Creates an empty map. public Map(string name) Parameters name string The name of the map. Fields SectorSize The size of a sector in engine units (= meters). public static readonly int SectorSize Field Value int Properties CityScale Scale and time compression of the game inside cities. public float CityScale { get; set; } Property Value float EditorMapId public ulong EditorMapId { get; set; } Property Value ulong EuropeMapUiCorrections Gets or sets if SCS's Europe map UI corrections are enabled. Nobody seems to know definitively what this does, but it might have something to do with the scale of the UK in europe.mbd. public bool EuropeMapUiCorrections { get; set; } Property Value bool MapItems Contains the map's items. public Dictionary<ulong, MapItem> MapItems { get; } Property Value Dictionary<ulong, MapItem> Name The name of the map, which is used for file and directory names. public string Name { get; set; } Property Value string Nodes Contains the map's nodes. public NodeDictionary Nodes { get; } Property Value NodeDictionary NormalScale Scale and time compression of the game outside cities. public float NormalScale { get; set; } Property Value float Sectors Metadata of the map's sectors. public Dictionary<SectorCoordinate, Sector> Sectors { get; set; } Property Value Dictionary<SectorCoordinate, Sector> StartPosition Editor start position. public Vector3 StartPosition { get; set; } Property Value Vector3 StartRotation Editor start rotation. public Quaternion StartRotation { get; set; } Property Value Quaternion Methods AddNode(Vector3) Creates a new node. public Node AddNode(Vector3 position) Parameters position Vector3 The position of the node. Returns Node The new node. AddNode(Vector3, bool) Creates a new node. public Node AddNode(Vector3 position, bool isRed) Parameters position Vector3 The position of the node. isRed bool Whether the node is red. Returns Node The new node. AddNode(Vector3, bool, MapItem) Creates a new node. public Node AddNode(Vector3 position, bool isRed, MapItem forwardItem) Parameters position Vector3 The position of the node. isRed bool Whether the node is red. forwardItem MapItem The forward item which the node will be assigned to. Returns Node The new node. AddSector(int, int) Creates a new sector. public Sector AddSector(int x, int z) Parameters x int The X coordinate of the sector. z int The Z coordinate of the sector. Returns Sector The new sector. AddSector(SectorCoordinate) Creates a new sector. public Sector AddSector(SectorCoordinate coord) Parameters coord SectorCoordinate The coordinate of the sector. Returns Sector The new sector. CompoundItems(IEnumerable<MapItem>) Creates a Compound item and makes it the parent of the given map items. Note that only aux items are compoundable. public Compound CompoundItems(IEnumerable<MapItem> items) Parameters items IEnumerable<MapItem> The items to compound. Returns Compound The newly created compound item. Exceptions InvalidOperationException Thrown if any of the map items or nodes are not parented by this map. ArgumentException Thrown if any of the map items is not an aux item. Delete(INode) Deletes a node and the items attached to it. public void Delete(INode node) Parameters node INode The node to delete. Delete(MapItem) Deletes an item. Nodes that are only used by this item will also be deleted. public void Delete(MapItem item) Parameters item MapItem The item to delete. GetSectorOfCoordinate(Vector3) Returns the index of the sector the given coordinate falls into. public static SectorCoordinate GetSectorOfCoordinate(Vector3 c) Parameters c Vector3 The coordinate to check. Returns SectorCoordinate The index of the sector the coordinate is in. Import(Selection, Vector3) Imports the contents of a Selection (.sbd) file into this map. public void Import(Selection selection, Vector3 position) Parameters selection Selection The Selection to import. position Vector3 The point relative to which the items will be inserted. Open(string, IList<SectorCoordinate>) Opens a map. public static Map Open(string mbdPath, IList<SectorCoordinate> sectors = null) Parameters mbdPath string Path to the .mbd file of the map. sectors IList<SectorCoordinate> If set, only the given sectors will be loaded. Returns Map A Map object. Open(string, IFileSystem, IList<SectorCoordinate>) Opens a map. public static Map Open(string mbdPath, IFileSystem fs, IList<SectorCoordinate> sectors = null) Parameters mbdPath string Path to the .mbd file of the map. fs IFileSystem The file system to load the map from. This accepts a HashFS reader. sectors IList<SectorCoordinate> If set, only the given sectors will be loaded. Returns Map A Map object. Save(string, bool) Saves the map in binary format. If the sector directory does not yet exist, it will be created. public void Save(string mapDirectory, bool cleanSectorDirectory = true) Parameters mapDirectory string The path of the directory to save the map into. cleanSectorDirectory bool If true, the sector directory will be emptied before saving the map. UncompoundItems(Compound) Deletes the given Compound item and adds its child items to the map itself. public void UncompoundItems(Compound compound) Parameters compound Compound The compound item. Exceptions InvalidOperationException Thrown if the compound is not parented by this map."
  },
  "api/TruckLib.ScsMap.MapArea.html": {
    "href": "api/TruckLib.ScsMap.MapArea.html",
    "title": "Class MapArea | TruckLib",
    "keywords": "Class MapArea Namespace TruckLib.ScsMap Assembly TruckLib.dll Defines a polygon which is drawn onto the UI map. public class MapArea : PolygonItem, IMapItem, IMapObject Inheritance object MapItem PolygonItem MapArea Implements IMapItem IMapObject Inherited Members PolygonItem.Nodes PolygonItem.Move(Vector3) PolygonItem.Move(Vector3, int) PolygonItem.Translate(Vector3) MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MapArea() public MapArea() Properties Color The color of the map area, as an index for the map_area_* arrays defined in /def/map_data.sii. public uint Color { get; set; } Property Value uint DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort DlcGuard public byte DlcGuard { get; set; } Property Value byte DrawOutline TODO: What does this even do? public bool DrawOutline { get; set; } Property Value bool DrawOver Gets or sets if this map area is drawn on top of other items. public bool DrawOver { get; set; } Property Value bool ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Secret Gets or sets if this area is only visible in the UI map once discovered. public bool Secret { get; set; } Property Value bool Type The map area type. public MapAreaType Type { get; set; } Property Value MapAreaType Methods Add(IItemContainer, IList<Vector3>, MapAreaType) Adds a map area to the map. public static MapArea Add(IItemContainer map, IList<Vector3> positions, MapAreaType type) Parameters map IItemContainer The map. positions IList<Vector3> The points of the polygon. type MapAreaType The map area type. Returns MapArea The newly created map area. Init() Sets the item's properties to its default values. protected override void Init()"
  },
  "api/TruckLib.ScsMap.MapAreaType.html": {
    "href": "api/TruckLib.ScsMap.MapAreaType.html",
    "title": "Enum MapAreaType | TruckLib",
    "keywords": "Enum MapAreaType Namespace TruckLib.ScsMap Assembly TruckLib.dll The type of a Map Area. public enum MapAreaType Fields Navigation = 1 TODO: What on earth does this do? Visual = 0 The map area will be drawn onto the UI map as a polygon."
  },
  "api/TruckLib.ScsMap.MapItem.html": {
    "href": "api/TruckLib.ScsMap.MapItem.html",
    "title": "Class MapItem | TruckLib",
    "keywords": "Class MapItem Namespace TruckLib.ScsMap Assembly TruckLib.dll The base class for all map items. public abstract class MapItem : IMapItem, IMapObject Inheritance object MapItem Implements IMapItem IMapObject Derived FarModel PathItem PolygonItem PolylineItem Prefab SingleNodeItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MapItem() Instantiates a new item and generates a UID for it. protected MapItem() Fields DefaultLayer The default editor layer for map items. public const int DefaultLayer = 0 Field Value int Properties DefaultItemFile Gets the default location for the item type. public abstract ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected abstract ushort DefaultViewDistance { get; } Property Value ushort ItemFile Gets which sector file the item is written to. public virtual ItemFile ItemFile { get; } Property Value ItemFile ItemType The item type ID used as identifier in the map format. public abstract ItemType ItemType { get; } Property Value ItemType Layer Gets or sets the editor layer to which this item belongs. public byte Layer { get; set; } Property Value byte Uid Gets or sets the UID of this item. public ulong Uid { get; set; } Property Value ulong ViewDistance Gets or sets the view distance of the item in meters. protected ushort ViewDistance { get; set; } Property Value ushort Methods Init() Sets the item's properties to its default values. protected virtual void Init() Move(Vector3) Moves the item to a different location. public abstract void Move(Vector3 newPos) Parameters newPos Vector3 The new position. ResolveNodeReference(INode, IDictionary<ulong, INode>) Attempts to resolve the given TruckLib.ScsMap.UnresolvedNode and returns the resolved node. If the node is not an TruckLib.ScsMap.UnresolvedNode or allNodes does not contain it, node is returned unmodified. protected static INode ResolveNodeReference(INode node, IDictionary<ulong, INode> allNodes) Parameters node INode The node to resolve. allNodes IDictionary<ulong, INode> A dictionary of all nodes in the entire map. Returns INode The resolved node if it could be resolved; returns node unmodified otherwise. ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) Attempts to resolve the given list of TruckLib.ScsMap.UnresolvedNodes and returns the resolved nodes. Any node which is not an TruckLib.ScsMap.UnresolvedNode or not contained in allNodes is not modified. protected static void ResolveNodeReferences(IList<INode> nodes, IDictionary<ulong, INode> allNodes) Parameters nodes IList<INode> The nodes to resolve. allNodes IDictionary<ulong, INode> A dictionary of all nodes in the entire map. Translate(Vector3) Translates the item by the given vector. public abstract void Translate(Vector3 translation) Parameters translation Vector3 The translation vector."
  },
  "api/TruckLib.ScsMap.MapOverlay.html": {
    "href": "api/TruckLib.ScsMap.MapOverlay.html",
    "title": "Class MapOverlay | TruckLib",
    "keywords": "Class MapOverlay Namespace TruckLib.ScsMap Assembly TruckLib.dll Overlays an image or text onto the UI map. public class MapOverlay : SingleNodeItem, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem MapOverlay Implements IMapItem IMapObject Inherited Members SingleNodeItem.Node SingleNodeItem.Move(Vector3) SingleNodeItem.Translate(Vector3) MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MapOverlay() public MapOverlay() Properties DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort DlcGuard public byte DlcGuard { get; set; } Property Value byte HideForZoomLevel Determines which zoom levels the overlay will be visible for. (Not yet implemented; will throw NotImplementedException.) public bool[] HideForZoomLevel { get; set; } Property Value bool[] ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Look Unit name of the image or city. public Token Look { get; set; } Property Value Token Secret Gets or sets if this overlay is only visible in the UI map once discovered. public bool Secret { get; set; } Property Value bool Type The overlay type. public OverlayType Type { get; set; } Property Value OverlayType Methods Add(IItemContainer, Vector3, OverlayType) Adds a map overlay to the map. public static MapOverlay Add(IItemContainer map, Vector3 position, OverlayType type) Parameters map IItemContainer The map. position Vector3 Position of the center of the overlay. type OverlayType The overlay type. Returns MapOverlay The newly created map overlay. Init() Sets the item's properties to its default values. protected override void Init()"
  },
  "api/TruckLib.ScsMap.Material.html": {
    "href": "api/TruckLib.ScsMap.Material.html",
    "title": "Struct Material | TruckLib",
    "keywords": "Struct Material Namespace TruckLib.ScsMap Assembly TruckLib.dll Represents a terrain quad material. public struct Material : IBinarySerializable Implements IBinarySerializable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Material(Token) public Material(Token name) Parameters name Token Material(Token, float) public Material(Token name, float rotation) Parameters name Token rotation float Properties Name public Token Name { readonly get; set; } Property Value Token Rotation UV rotation in degrees. public float Rotation { readonly get; set; } Property Value float Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.ScsMap.Model.html": {
    "href": "api/TruckLib.ScsMap.Model.html",
    "title": "Class Model | TruckLib",
    "keywords": "Class Model Namespace TruckLib.ScsMap Assembly TruckLib.dll A static model. public class Model : SingleNodeItem, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem Model Implements IMapItem IMapObject Inherited Members SingleNodeItem.Node SingleNodeItem.Move(Vector3) SingleNodeItem.Translate(Vector3) MapItem.ItemFile MapItem.Uid MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Model() public Model() Properties AdditionalParts Unit names of additional parts used by the model. public List<Token> AdditionalParts { get; set; } Property Value List<Token> Collision Gets or sets if collision is enabled. public bool Collision { get; set; } Property Value bool ColorVariant 1-indexed color variant of the model. Set to 0 if there aren't any. public Nibble ColorVariant { get; set; } Property Value Nibble DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort DetailVegetation Gets or sets if detail vegetation (small clumps of grass etc.) is rendered if the selected terrain material supports it. public bool DetailVegetation { get; set; } Property Value bool IgnoreCutPlanes Gets or sets if this item will render behind a cut plane. public bool IgnoreCutPlanes { get; set; } Property Value bool ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType LeftHandTraffic Enables the LHT variant of the model (?). public bool LeftHandTraffic { get; set; } Property Value bool Lod LOD setting, if applicable. Must be between 0 and 3. If 0, the LOD of the model will change dynamically. The other indices, if supported by the model, will keep the model at one specific LOD. public byte Lod { get; set; } Property Value byte Look The model look. public Token Look { get; set; } Property Value Token MirrorReflection Gets or sets if this item is visible in mirrors. public bool MirrorReflection { get; set; } Property Value bool ModelHookups public bool ModelHookups { get; set; } Property Value bool Name The unit name of the model, as defined in /def/world/model.sii. public Token Name { get; set; } Property Value Token Scale The relative scale of the model. public Vector3 Scale { get; set; } Property Value Vector3 Shadows Gets or sets if the item casts shadows. public bool Shadows { get; set; } Property Value bool ShowTerrain Gets or sets if the terrain part of the model is rendered. public bool ShowTerrain { get; set; } Property Value bool TerrainColor Color tint of the terrain. public Color TerrainColor { get; set; } Property Value Color TerrainMaterial public Token TerrainMaterial { get; set; } Property Value Token TerrainRotation UV rotation of the terrain texture. public float TerrainRotation { get; set; } Property Value float Variant The model variant. public Token Variant { get; set; } Property Value Token ViewDistance Gets or sets the view distance of the item in meters. public ushort ViewDistance { get; set; } Property Value ushort WaterReflection Gets or sets if the item is reflected on water surfaces. public bool WaterReflection { get; set; } Property Value bool Methods Add(IItemContainer, Vector3, Token, Token, Token) Adds a model to the map. public static Model Add(IItemContainer map, Vector3 position, Token name, Token variant, Token look) Parameters map IItemContainer The map the model will be added to. position Vector3 The position of the model. name Token The name of the model. variant Token The variant of the model. look Token The look of the model. Returns Model The newly created model. Init() Sets the item's properties to its default values. protected override void Init()"
  },
  "api/TruckLib.ScsMap.Mover.html": {
    "href": "api/TruckLib.ScsMap.Mover.html",
    "title": "Class Mover | TruckLib",
    "keywords": "Class Mover Namespace TruckLib.ScsMap Assembly TruckLib.dll An animated model which can optionally be moved along a path. public class Mover : PathItem, IMapItem, IMapObject Inheritance object MapItem PathItem Mover Implements IMapItem IMapObject Inherited Members PathItem.Nodes PathItem.Move(Vector3, int) PathItem.CreateNodes(IList<Vector3>) PathItem.Recalculate() PathItem.RecalculateRotation(int) MapItem.ItemFile MapItem.Uid MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Mover() public Mover() Properties ActiveDuringBadWeather Gets or sets if the mover is active during bad weather. public bool ActiveDuringBadWeather { get; set; } Property Value bool ActiveDuringDay Gets or sets if the mover is active when street lamps are off. public bool ActiveDuringDay { get; set; } Property Value bool ActiveDuringNiceWeather Gets or sets if the mover is active during nice weather. public bool ActiveDuringNiceWeather { get; set; } Property Value bool ActiveDuringNight Gets or sets if the mover is active when street lamps are on. public bool ActiveDuringNight { get; set; } Property Value bool BounceAtEnd Gets or sets if models turn around when they reach the end of the path rather than respawning at the start. public bool BounceAtEnd { get; set; } Property Value bool Count The amount of models that will appear on the path. public uint Count { get; set; } Property Value uint DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort EndDelay The duration in seconds a model will pause at the end of the path, in seconds. public float EndDelay { get; set; } Property Value float FollowDir Gets or sets if the rotation of the model follows the path. public bool FollowDir { get; set; } Property Value bool IgnoreCutPlanes Gets or sets if this item will render behind a cut plane. public bool IgnoreCutPlanes { get; set; } Property Value bool ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType KeepOrientationOnBounce Gets or sets if models keep ther rotation rather than turn 180° when BounceAtEnd is enabled. public bool KeepOrientationOnBounce { get; set; } Property Value bool Lengths Cached lengths of the segments. public List<float> Lengths { get; } Property Value List<float> Look Look of the model. public Token Look { get; set; } Property Value Token Model Unit name of the model, as defined in /def/world/mover.sii. public Token Model { get; set; } Property Value Token PreferNonMovableAnimation public bool PreferNonMovableAnimation { get; set; } Property Value bool Speed Movement speed of the model. public float Speed { get; set; } Property Value float Tags Tags. public List<Token> Tags { get; set; } Property Value List<Token> UniformItemPlacement Gets or sets if models are evenly spaced. public bool UniformItemPlacement { get; set; } Property Value bool UseCurvedPath Gets or sets if the item uses a curved path rather than a linear path. public bool UseCurvedPath { get; set; } Property Value bool UseSound Gets or sets if sound is enabled. public bool UseSound { get; set; } Property Value bool Variant Variant of the model. public Token Variant { get; set; } Property Value Token ViewDistance Gets or sets the view distance of the item in meters. public ushort ViewDistance { get; set; } Property Value ushort WaterReflection Gets or sets if the item is reflected on water surfaces. public bool WaterReflection { get; set; } Property Value bool Width Width of the area along the path in which models will be spawned. public float Width { get; set; } Property Value float Methods Add(IItemContainer, IList<Vector3>, Token, Token, Token) Adds a mover to the map. public static Mover Add(IItemContainer map, IList<Vector3> positions, Token model, Token look, Token variant) Parameters map IItemContainer The map. positions IList<Vector3> The points of the path. model Token Unit name of the model. look Token The look of the model. variant Token The variant of the model. Returns Mover The newly created mover. Init() Sets the item's properties to its default values. protected override void Init() Move(Vector3) Moves the item, where the given position will be the new position of the node at index 0, and all other nodes will be moved relative to it. public override void Move(Vector3 newPos) Parameters newPos Vector3 The new position of the node. Translate(Vector3) Translates the item by the given vector. public override void Translate(Vector3 translation) Parameters translation Vector3 The translation vector."
  },
  "api/TruckLib.ScsMap.Node.html": {
    "href": "api/TruckLib.ScsMap.Node.html",
    "title": "Class Node | TruckLib",
    "keywords": "Class Node Namespace TruckLib.ScsMap Assembly TruckLib.dll Represents a map node. public class Node : INode, IMapObject, IBinarySerializable, ISpatialData Inheritance object Node Implements INode IMapObject IBinarySerializable ISpatialData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Node() Instantiates a new node with a random UID. public Node() Properties BackwardCountry The country of the backward item if this node is a country border. public byte BackwardCountry { get; set; } Property Value byte BackwardItem The backward item belonging to this node. public IMapObject BackwardItem { get; set; } Property Value IMapObject ForwardCountry The country of the forward item if this node is a country border. public byte ForwardCountry { get; set; } Property Value byte ForwardItem The forward item belonging to this node. public IMapObject ForwardItem { get; set; } Property Value IMapObject FreeRotation Gets or sets if the game will use whichever rotation is specified without reverting to its default rotation when the node is updated. public bool FreeRotation { get; set; } Property Value bool IsCountryBorder Gets or sets if this node is a country border. public bool IsCountryBorder { get; set; } Property Value bool IsCurveLocator Gets or sets if this node represents a curve locator. public bool IsCurveLocator { get; set; } Property Value bool IsRed Gets or sets if this node is red or green. public bool IsRed { get; set; } Property Value bool Locked Gets or sets if this node can be moved or deleted in the editor. public bool Locked { get; set; } Property Value bool Parent The map, selection or compound which contains this node. public IItemContainer Parent { get; set; } Property Value IItemContainer Position Position of the node. Note that this will be serialized as fixed point values. public Vector3 Position { get; set; } Property Value Vector3 Rotation Rotation of the node. public Quaternion Rotation { get; set; } Property Value Quaternion Uid The UID of this node. public ulong Uid { get; set; } Property Value ulong Methods Deserialize(BinaryReader, uint?) Reads the node from a BinaryReader whose position is at the start of the object. public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader A BinaryReader whose position is at the start of a Node. version uint? Init() Sets the node's properties to its default values. protected virtual void Init() IsOrphaned() Returns whether the node has no ForwardItem and no BackwardItem. public bool IsOrphaned() Returns bool Whether the node has no ForwardItem and no BackwardItem. Merge(INode) Merges the node n2 into this one, if possible, and then deletes n2. Note that the flags and rotation of n2 will not be preserved. public void Merge(INode n2) Parameters n2 INode The node to merge into this one. Exceptions InvalidOperationException Thrown if the nodes can't be merged. Move(Vector3) Moves the node to another position. public void Move(Vector3 newPos) Parameters newPos Vector3 The new position of the node. RecalculateItems() Recalculates the items attached to this node. protected virtual void RecalculateItems() Serialize(BinaryWriter) Writes the node to a BinaryWriter. public void Serialize(BinaryWriter w) Parameters w BinaryWriter A BinaryWriter. Split() Splits this node into one node holding the backward item and one node holding the forward item. This method is the opposite of Merge. public INode Split() Returns INode The newly created node. If no action was performed because this node is already only used by one item, the method returns null. Exceptions InvalidOperationException Thrown if the node can't be split. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Translate(Vector3) Translates the node by the given vector. public void Translate(Vector3 translation) Parameters translation Vector3 The translation vector. UpdateItemReferences(Dictionary<ulong, MapItem>) Searches a list of all map items for the map items referenced by UID by this node and updates the respective references. public void UpdateItemReferences(Dictionary<ulong, MapItem> allItems) Parameters allItems Dictionary<ulong, MapItem> A dictionary of all items in the entire map."
  },
  "api/TruckLib.ScsMap.OverlayType.html": {
    "href": "api/TruckLib.ScsMap.OverlayType.html",
    "title": "Enum OverlayType | TruckLib",
    "keywords": "Enum OverlayType Namespace TruckLib.ScsMap Assembly TruckLib.dll The type of a Map Overlay. public enum OverlayType Fields CityName = 2 The item will display the name of a city specified in Look. Landmark = 4 TODO: What does this do? Parking = 1 The item will display a rest area symbol. RoadName = 0 The item will display an image specified in Look. UserText = 3 TODO: What does this do?"
  },
  "api/TruckLib.ScsMap.PathItem.html": {
    "href": "api/TruckLib.ScsMap.PathItem.html",
    "title": "Class PathItem | TruckLib",
    "keywords": "Class PathItem Namespace TruckLib.ScsMap Assembly TruckLib.dll Base class for map items which define a polyline or spline that is fully contained in one item rather than being one piece of it. public abstract class PathItem : MapItem, IMapItem, IMapObject Inheritance object MapItem PathItem Implements IMapItem IMapObject Derived CameraPath CutPlane Mover Trajectory Walker Inherited Members MapItem.ItemType MapItem.ItemFile MapItem.DefaultItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PathItem() protected PathItem() Properties Nodes The nodes of the item. public PathNodeList Nodes { get; set; } Property Value PathNodeList Methods CreateNodes(IList<Vector3>) Creates map nodes for this item. protected void CreateNodes(IList<Vector3> positions) Parameters positions IList<Vector3> The positions of the nodes. Init() Sets the item's properties to its default values. protected override void Init() Move(Vector3) Moves the item, where the given position will be the new position of the node at index 0, and all other nodes will be moved relative to it. public override void Move(Vector3 newPos) Parameters newPos Vector3 The new position of the node. Move(Vector3, int) Moves the item, where the given position will be the new position of the node at index n, and all other nodes will be moved relative to it. public void Move(Vector3 newPos, int n) Parameters newPos Vector3 The new position of the node. n int The index of the node which will be moved to this position. Recalculate() Recalculates properties that may need to be recalculated. public virtual void Recalculate() RecalculateRotation(int) Recalculates the rotation of one node. protected virtual void RecalculateRotation(int i) Parameters i int The index of the node. Translate(Vector3) Translates the item by the given vector. public override void Translate(Vector3 translation) Parameters translation Vector3 The translation vector."
  },
  "api/TruckLib.ScsMap.PolygonItem.html": {
    "href": "api/TruckLib.ScsMap.PolygonItem.html",
    "title": "Class PolygonItem | TruckLib",
    "keywords": "Class PolygonItem Namespace TruckLib.ScsMap Assembly TruckLib.dll Base class for map items which define a polygonal area. public abstract class PolygonItem : MapItem, IMapItem, IMapObject Inheritance object MapItem PolygonItem Implements IMapItem IMapObject Derived MapArea TrafficArea Trigger Inherited Members MapItem.ItemType MapItem.ItemFile MapItem.DefaultItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PolygonItem() protected PolygonItem() Properties Nodes The nodes of the item. public PolygonNodeList Nodes { get; set; } Property Value PolygonNodeList Methods Init() Sets the item's properties to its default values. protected override void Init() Move(Vector3) Moves the item, where the given position will be the new position of the node at index 0, and all other nodes will be moved relative to it. public override void Move(Vector3 newPos) Parameters newPos Vector3 The new position of the node. Move(Vector3, int) Moves the item, where the given position will be the new position of the node at index n, and all other nodes will be moved relative to it. public void Move(Vector3 newPos, int n) Parameters newPos Vector3 The new position of the node. n int The index of the node which will be moved to this position. Translate(Vector3) Translates the item by the given vector. public override void Translate(Vector3 translation) Parameters translation Vector3 The translation vector."
  },
  "api/TruckLib.ScsMap.PolylineItem.html": {
    "href": "api/TruckLib.ScsMap.PolylineItem.html",
    "title": "Class PolylineItem | TruckLib",
    "keywords": "Class PolylineItem Namespace TruckLib.ScsMap Assembly TruckLib.dll Base class for map items which form a polyline with other items of the same type, such as roads and buildings. public abstract class PolylineItem : MapItem, IMapItem, IMapObject Inheritance object MapItem PolylineItem Implements IMapItem IMapObject Derived Buildings Curve Road Terrain Inherited Members MapItem.ItemType MapItem.ItemFile MapItem.DefaultItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.Init() MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PolylineItem() public PolylineItem() Properties BackwardItem The item attached to this item in backward direction. public IMapItem BackwardItem { get; } Property Value IMapItem ForwardItem The item attached to this item in forward direction. public IMapItem ForwardItem { get; } Property Value IMapItem ForwardNode The forward node (= the one which is green on a single segment of this item). public INode ForwardNode { get; set; } Property Value INode Length Cached length of the item's path. public float Length { get; set; } Property Value float Node The backward node / the node which holds this item as ForwardItem (= the node which highlights the item if you mouse over it). public INode Node { get; set; } Property Value INode Methods FindFirstItem() Returns the first item of the polyline chain this item is a part of. public PolylineItem FindFirstItem() Returns PolylineItem The first item of the polyline chain this item is a part of. FindLastItem() Returns the last item of the polyline chain this item is a part of. public PolylineItem FindLastItem() Returns PolylineItem The last item of the polyline chain this item is a part of. Move(Vector3) Moves the item to a different location. public override void Move(Vector3 newPos) Parameters newPos Vector3 The new position. Recalculate() Recalculates this item's length and adjusts properties based on it. public virtual void Recalculate() Translate(Vector3) Translates the item by the given vector. public override void Translate(Vector3 translation) Parameters translation Vector3 The translation vector."
  },
  "api/TruckLib.ScsMap.Prefab.html": {
    "href": "api/TruckLib.ScsMap.Prefab.html",
    "title": "Class Prefab | TruckLib",
    "keywords": "Class Prefab Namespace TruckLib.ScsMap Assembly TruckLib.dll A model with associated game logic which attaches to the road network. public class Prefab : MapItem, IMapItem, IMapObject Inheritance object MapItem Prefab Implements IMapItem IMapObject Inherited Members MapItem.ItemFile MapItem.Uid MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Prefab() public Prefab() Properties Activation Gets or sets if activation points are enabled. public bool Activation { get; set; } Property Value bool AdditionalParts Unit names of enabled additional parts. public List<Token> AdditionalParts { get; set; } Property Value List<Token> AiVehicles Gets or sets if AI traffic can spawn on this prefab. public bool AiVehicles { get; set; } Property Value bool Boundary Gets or sets if this prefab has invisible walls around roads. public bool Boundary { get; set; } Property Value bool Collision Gets or sets if collision is enabled. public bool Collision { get; set; } Property Value bool CustomSemaphores Allows customization of selected semaphore profile by removing unwanted semaphore instances at complex crossroads consisting of multiple prefabs. public bool CustomSemaphores { get; set; } Property Value bool DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort DetailVegetation Gets or sets if detail vegetation (small clumps of grass etc.) is rendered if the selected terrain material supports it. public bool DetailVegetation { get; set; } Property Value bool DlcGuard public byte DlcGuard { get; set; } Property Value byte Ferry The Ferry item this prefab is connected to, if applicable. public IMapItem Ferry { get; set; } Property Value IMapItem IgnoreCutPlanes Gets or sets if this item will render behind a cut plane. public bool IgnoreCutPlanes { get; set; } Property Value bool IsFerryEntrance Gets or sets if this prefab is the last prefab before a Ferry. public bool IsFerryEntrance { get; set; } Property Value bool IsStateBorder Obsolete flag which was used to mark the prefab as a state border. [Obsolete] public bool IsStateBorder { get; set; } Property Value bool IsTunnel Gets or sets if the prefab is a tunnel. This will make AI vehicles turn on their headlights. public bool IsTunnel { get; set; } Property Value bool ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType LeftHandTraffic Gets or sets if the prefab uses left hand traffic. public bool LeftHandTraffic { get; set; } Property Value bool Look The model look. public Token Look { get; set; } Property Value Token LowPolyVegetation Gets or sets if only flat textures are used as vegetation. public bool LowPolyVegetation { get; set; } Property Value bool Model The unit name of the prefab, as defined in /def/world/prefab.sii. public Token Model { get; set; } Property Value Token Nodes The map nodes of this prefab. The origin node will always be the first entry in this list. public List<INode> Nodes { get; set; } Property Value List<INode> Origin The index of the origin node. This defines which of the ppd nodes is the origin node. It is not an index for the Nodes property, as the origin node is always the first node in that list. public ushort Origin { get; } Property Value ushort PrefabNodes Vegetation, terrain, and corner model properties for each prefab node. public PrefabNode[] PrefabNodes { get; set; } Property Value PrefabNode[] RandomSeed public uint RandomSeed { get; set; } Property Value uint Secret Gets or sets if this prefab is only visible in the UI map once discovered. public bool Secret { get; set; } Property Value bool SemaphoreProfile public Token SemaphoreProfile { get; set; } Property Value Token ShowInUiMap Gets or sets if this prefab is displayed in the UI map. public bool ShowInUiMap { get; set; } Property Value bool SlaveItems A list of slave items owned by this prefab instance. public List<IMapItem> SlaveItems { get; set; } Property Value List<IMapItem> TerrainShadows public bool TerrainShadows { get; set; } Property Value bool Variant The model variant. public Token Variant { get; set; } Property Value Token VegetationParts public List<VegetationPart> VegetationParts { get; set; } Property Value List<VegetationPart> VegetationSpheres Vegetation spheres of this prefab. public List<VegetationSphere> VegetationSpheres { get; set; } Property Value List<VegetationSphere> ViewDistance Gets or sets the view distance of the item in meters. public ushort ViewDistance { get; set; } Property Value ushort WaterReflection Gets or sets if the item is reflected on water surfaces. public bool WaterReflection { get; set; } Property Value bool Methods Add(IItemContainer, Vector3, Token, PrefabDescriptor, Quaternion?) Creates a prefab item from a prefab descriptor file and adds it to the map. public static Prefab Add(IItemContainer map, Vector3 position, Token unitName, PrefabDescriptor ppd, Quaternion? rotation = null) Parameters map IItemContainer The map. position Vector3 The position of node 0. unitName Token The unit name of the prefab. ppd PrefabDescriptor The prefab descriptor file defining the prefab. rotation Quaternion? The rotation of the prefab. Returns Prefab The newly created prefab. AppendRoad(ushort, Vector3, Token, float, float) Appends a new road segment to a node of this prefab. (If the node is the origin node, it will be prepended instead.) public Road AppendRoad(ushort node, Vector3 forwardPos, Token type, float leftTerrainSize = 0, float rightTerrainSize = 0) Parameters node ushort The index of the prefab node (in Nodes, not the .ppd file) to attach to. forwardPos Vector3 The position of the road's forward node. type Token The unit name of the road. leftTerrainSize float The left terrain size. rightTerrainSize float The right terrain size. Returns Road The newly created road. Attach(ushort, INode) Attaches a node of a polyline item to the specified node of this prefab. public void Attach(ushort prefabNode, INode itemNode) Parameters prefabNode ushort The index of the prefab node (in Nodes, not the .ppd file) to attach to. itemNode INode The node of the polyline item to attach. This node will be deleted. Exceptions IndexOutOfRangeException Thrown if the index exceeds the number of nodes. InvalidOperationException Thrown when attempting to merge the backward node of a road into the origin node of the prefab, which is not allowed. Attach(ushort, Prefab, ushort) Attaches the prefab p2 to a node of this prefab. p2 will be moved such that the nodes which will be merged have the same position. public void Attach(ushort p1NodeIdx, Prefab p2, ushort p2NodeIdx) Parameters p1NodeIdx ushort The index of the node of this prefab to which p2 will be attached. p2 Prefab The prefab to attach to this one. p2NodeIdx ushort The index of the node of p2 which will be attached to this prefab. Exceptions IndexOutOfRangeException Thrown if one of the indices exceeds the number of nodes. InvalidOperationException Thrown if the nodes can't be connected. Attach(PolylineItem) Finds the two closest nodes of this prefab and the given polyline item and attaches the polyline item to the prefab node. The leftover node of the polyline item will be deleted. public void Attach(PolylineItem item) Parameters item PolylineItem The polyline item to attach. Attach(Prefab) Finds the two closest nodes of this prefab and p2, moves p2 such that the two nodes have the same position, and attaches it to this prefab. public void Attach(Prefab p2) Parameters p2 Prefab The prefab to attach to this one. Exceptions InvalidOperationException Thrown if the nodes can't be connected. ChangeOrigin(ushort) Changes the origin of the prefab. public void ChangeOrigin(ushort newOrigin) Parameters newOrigin ushort The index (in the ppd file, not Nodes) of the new origin. Exceptions IndexOutOfRangeException Thrown if the index exceeds the number of nodes. InvalidOperationException Thrown if one or both of the nodes which would be affected by the opertation already have an item attached to them. Init() Sets the item's properties to its default values. protected override void Init() Move(Vector3) Moves the prefab to a different location. All other prefabs attached to this one will also be moved. public override void Move(Vector3 newPos) Parameters newPos Vector3 The new position of node 0. Move(Vector3, ushort) Moves the prefab to a different location. All other prefabs attached to this one will also be moved. public void Move(Vector3 newPos, ushort nodeIdx) Parameters newPos Vector3 The new position of the specified node. nodeIdx ushort The index of the node which will assume the given position. Translate(Vector3) Translates the prefab by the given vector. All other prefabs attached to this one will also be moved. public override void Translate(Vector3 translation) Parameters translation Vector3 The translation vector. UpdateItemReferences(Dictionary<ulong, MapItem>) Searches a list of all map items for the map items referenced by UID in this map item and updates the respective references. This is used for loading a map and does not need to be called by the user at any point. public void UpdateItemReferences(Dictionary<ulong, MapItem> allItems) Parameters allItems Dictionary<ulong, MapItem> A dictionary of all items in the entire map."
  },
  "api/TruckLib.ScsMap.PrefabNode.html": {
    "href": "api/TruckLib.ScsMap.PrefabNode.html",
    "title": "Class PrefabNode | TruckLib",
    "keywords": "Class PrefabNode Namespace TruckLib.ScsMap Assembly TruckLib.dll Holds vegetation, terrain, and corner model properties for one node of a prefab. public class PrefabNode Inheritance object PrefabNode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PrefabNode() Instantiates a PrefabNode with its default values. public PrefabNode() Properties DetailVegetationFrom Distance from the edge of the node, in meters, where the band in which detail vegetation will be placed begins. public float DetailVegetationFrom { get; set; } Property Value float DetailVegetationTo Distance from the edge of the node, in meters, where the band in which detail vegetation will be placed ends. public float DetailVegetationTo { get; set; } Property Value float Look The look of the corner model. public Token Look { get; set; } Property Value Token Model The unit name of the corner model, as defined in /def/world/prefab_corner.sii. public Token Model { get; set; } Property Value Token Terrain The terrain of this node. public PrefabTerrain Terrain { get; set; } Property Value PrefabTerrain Variant The variant of the corner model. public Token Variant { get; set; } Property Value Token Vegetation The vegetation of this node. public RoadVegetation[] Vegetation { get; set; } Property Value RoadVegetation[] Methods Init() Sets the properties of this object to its default values. protected void Init()"
  },
  "api/TruckLib.ScsMap.PrefabSlaveItem.html": {
    "href": "api/TruckLib.ScsMap.PrefabSlaveItem.html",
    "title": "Class PrefabSlaveItem | TruckLib",
    "keywords": "Class PrefabSlaveItem Namespace TruckLib.ScsMap Assembly TruckLib.dll Base class for prefab slave items, which is a type of item that is placed for certain spawn point types of a prefab. public abstract class PrefabSlaveItem : SingleNodeItem, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem PrefabSlaveItem Implements IMapItem IMapObject Derived BusStop Company Garage Service Inherited Members SingleNodeItem.Node MapItem.ItemType MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PrefabSlaveItem() public PrefabSlaveItem() Properties DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort Prefab The prefab which owns this item. public IMapItem Prefab { get; set; } Property Value IMapItem Methods Add<T>(IItemContainer, Prefab, Vector3) Adds a new prefab slave item of type T to the map. public static T Add<T>(IItemContainer map, Prefab parent, Vector3 position) where T : PrefabSlaveItem, new() Parameters map IItemContainer The map. parent Prefab The prefab this item is linked to. position Vector3 The (global) position of the node. Returns T The newly created prefab slave item. Type Parameters T The item type. Init() Sets the item's properties to its default values. protected override void Init() Move(Vector3) Moves the item to a different location. public override void Move(Vector3 newPos) Parameters newPos Vector3 The new position. Translate(Vector3) Translates the item by the given vector. public override void Translate(Vector3 translation) Parameters translation Vector3 The translation vector. UpdateItemReferences(Dictionary<ulong, MapItem>) Searches a list of all map items for the map items referenced by UID in this map item and updates the respective references. This is used for loading a map and does not need to be called by the user at any point. public void UpdateItemReferences(Dictionary<ulong, MapItem> allItems) Parameters allItems Dictionary<ulong, MapItem> A dictionary of all items in the entire map."
  },
  "api/TruckLib.ScsMap.PrefabTerrain.html": {
    "href": "api/TruckLib.ScsMap.PrefabTerrain.html",
    "title": "Class PrefabTerrain | TruckLib",
    "keywords": "Class PrefabTerrain Namespace TruckLib.ScsMap Assembly TruckLib.dll Properties of procedurally generated terrain of one edge of a Prefab. public class PrefabTerrain : EdgeTerrain Inheritance object EdgeTerrain PrefabTerrain Inherited Members EdgeTerrain.RowWidthSequence EdgeTerrain.Size EdgeTerrain.Profile EdgeTerrain.Coefficient EdgeTerrain.QuadData EdgeTerrain.GetRowWidthAt(int) EdgeTerrain.CalculateQuadRows(float) EdgeTerrain.UpdateQuadAmount() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PrefabTerrain() Instantiates a PrefabTerrain with its default values. public PrefabTerrain() Methods Init() Sets the PrefabTerrain's properties to its default values. protected override void Init()"
  },
  "api/TruckLib.ScsMap.QuadVegetation.html": {
    "href": "api/TruckLib.ScsMap.QuadVegetation.html",
    "title": "Enum QuadVegetation | TruckLib",
    "keywords": "Enum QuadVegetation Namespace TruckLib.ScsMap Assembly TruckLib.dll Vegetation modes for terrain quads. public enum QuadVegetation Fields HighPolyVegetation = 3 LowPolyVegetation = 2 NoVegetation = 1 Normal = 0"
  },
  "api/TruckLib.ScsMap.Railing.html": {
    "href": "api/TruckLib.ScsMap.Railing.html",
    "title": "Struct Railing | TruckLib",
    "keywords": "Struct Railing Namespace TruckLib.ScsMap Assembly TruckLib.dll Represents one railing model of a road. public struct Railing Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Model Unit name of the model, as defined in /def/world/railing.sii. public Token Model { readonly get; set; } Property Value Token Offset Offset from the center of the road, in meters. public float Offset { get; set; } Property Value float"
  },
  "api/TruckLib.ScsMap.Railings.html": {
    "href": "api/TruckLib.ScsMap.Railings.html",
    "title": "Class Railings | TruckLib",
    "keywords": "Class Railings Namespace TruckLib.ScsMap Assembly TruckLib.dll Represents the railings of a Terrain. public class Railings Inheritance object Railings Derived RoadRailings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Railings() public Railings() Properties InvertRailing Gets or sets whether the models are mirrored along the road axis. Only applies to the first railing. public bool InvertRailing { get; set; } Property Value bool Models The railings. public Railing[] Models { get; set; } Property Value Railing[]"
  },
  "api/TruckLib.ScsMap.Road.html": {
    "href": "api/TruckLib.ScsMap.Road.html",
    "title": "Class Road | TruckLib",
    "keywords": "Class Road Namespace TruckLib.ScsMap Assembly TruckLib.dll A road item. public class Road : PolylineItem, IMapItem, IMapObject Inheritance object MapItem PolylineItem Road Implements IMapItem IMapObject Inherited Members PolylineItem.BackwardItem PolylineItem.ForwardItem PolylineItem.Node PolylineItem.ForwardNode PolylineItem.Length PolylineItem.FindFirstItem() PolylineItem.FindLastItem() PolylineItem.Move(Vector3) PolylineItem.Translate(Vector3) MapItem.ItemFile MapItem.Uid MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Road() public Road() Fields MaxLength The maximum length of a road item. public static readonly float MaxLength Field Value float Properties AiVehicles Gets or sets if AI traffic can use this road. If not, AI vehicles will choose a different route. If there isn't one, they will despawn instead. public bool AiVehicles { get; set; } Property Value bool Boundary Gets or sets if the road has invisible walls on both sides of it. public bool Boundary { get; set; } Property Value bool CenterDetailVegetation Gets or sets if detail vegetation is used in the center of dual carriageways. public bool CenterDetailVegetation { get; set; } Property Value bool CenterMaterial Unit name of the terrain material used in the center of dual carriageways. public Token CenterMaterial { get; set; } Property Value Token CenterMaterialColor Color tint of the material used in the center of dual carriageways. public Color CenterMaterialColor { get; set; } Property Value Color CenterMaterialRotation UV rotation of the material in the center of dual carriageways. public ushort CenterMaterialRotation { get; set; } Property Value ushort CenterVegetation Vegetation in the center of dual carriageways. public CenterVegetation CenterVegetation { get; set; } Property Value CenterVegetation Collision Gets or sets if collision is enabled. public bool Collision { get; set; } Property Value bool DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort DlcGuard public byte DlcGuard { get; set; } Property Value byte GpsAvoid Gets or sets if the satnav should avoid this road item. public bool GpsAvoid { get; set; } Property Value bool IgnoreCutPlanes Gets or sets if this item will render behind a cut plane. public bool IgnoreCutPlanes { get; set; } Property Value bool IsCityRoad Legacy only. Gets or sets whether a pre-template road is a city road and can therefore have a sidewalk. [Obsolete] public bool IsCityRoad { get; set; } Property Value bool ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Left Terrain, models, railings, sidewalk on the left side of this road. public RoadSide Left { get; set; } Property Value RoadSide LeftHandTraffic Gets or sets if the item uses left hand traffic. public bool LeftHandTraffic { get; set; } Property Value bool LowPolyVegetation Gets or sets if only flat textures are used as vegetation. public bool LowPolyVegetation { get; set; } Property Value bool Material The unit name of the road material for legacy, pre-template roads. public Token Material { get; set; } Property Value Token MinLength Returns the minimum length of a road item with the current resolution setting. public float MinLength { get; } Property Value float Overlay Unit name of the overlay texture. public Token Overlay { get; set; } Property Value Token RandomSeed The seed for the RNG which determines which vegetation models to place. The position of the models does not appear to be affected by this. public uint RandomSeed { get; set; } Property Value uint Resolution For pre-template roads, this sets the quad step size of the road itself. For template roads, only Normal and HighPoly are supported, and it only affects the step size of terrain quads. public RoadResolution Resolution { get; set; } Property Value RoadResolution Right Terrain, models, railings, sidewalk on the right side of this road. public RoadSide Right { get; set; } Property Value RoadSide RoadType The unit name of the road type, as defined in /def/world/road_look.sii (legacy) or /def/world/road_look.template.sii (template). public Token RoadType { get; set; } Property Value Token Secret Gets or sets if this road is only visible in the UI map once discovered. public bool Secret { get; set; } Property Value bool ShowInUiMap Gets or sets if this road is displayed in the UI map. public bool ShowInUiMap { get; set; } Property Value bool SmoothDetailVegetation Gets or sets if detail vegetation transitions smoothly in places where it is affected by brushes. public bool SmoothDetailVegetation { get; set; } Property Value bool StretchTerrain [Obsolete] public bool StretchTerrain { get; set; } Property Value bool TerrainShadows public bool TerrainShadows { get; set; } Property Value bool Unknown public bool Unknown { get; set; } Property Value bool Unknown2 public bool Unknown2 { get; set; } Property Value bool Unknown3 public bool Unknown3 { get; set; } Property Value bool VegetationSpheres Vegetation spheres on this road. public List<VegetationSphere> VegetationSpheres { get; set; } Property Value List<VegetationSphere> ViewDistance Gets or sets the view distance of the item in meters. public ushort ViewDistance { get; set; } Property Value ushort WaterReflection Gets or sets if the item is reflected on water surfaces. public bool WaterReflection { get; set; } Property Value bool Methods Add(IItemContainer, Vector3, Vector3, Token, float, float) Adds a road item to the map. public static Road Add(IItemContainer map, Vector3 backwardPos, Vector3 forwardPos, Token type, float leftTerrainSize = 0, float rightTerrainSize = 0) Parameters map IItemContainer The map . backwardPos Vector3 The position of the backward (red) node. forwardPos Vector3 The position of the forward (green) node. type Token The unit name of the road. leftTerrainSize float The terrain size on the left side. rightTerrainSize float The terrain size on the right side. Returns Road The newly created road item. Append(Vector3, bool) Appends a road item to this road. public Road Append(Vector3 position, bool cloneSettings = true) Parameters position Vector3 The position of the ForwardNode of the new road. cloneSettings bool Whether the new item should have the same settings as this one. Returns Road The newly created road item. Append(Vector3, Token, float, float) Appends a road item to this road. public Road Append(Vector3 position, Token type, float leftTerrainSize = 0, float rightTerrainSize = 0) Parameters position Vector3 The position of the ForwardNode of the new road. type Token The unit name of the road. leftTerrainSize float The terrain size on the left side. rightTerrainSize float The terrain size on the right side. Returns Road The newly created road item. Init() Sets the item's properties to its default values. protected override void Init() Prepend(Vector3) Prepends a road item to this road. public Road Prepend(Vector3 position) Parameters position Vector3 The position of the backward node of the new road. Returns Road The newly created road item. Prepend(Vector3, Token, float, float) Prepends a road item to this road. public Road Prepend(Vector3 position, Token type, float leftTerrainSize = 0, float rightTerrainSize = 0) Parameters position Vector3 The position of the backward node of the new road. type Token The unit name of the road. leftTerrainSize float The terrain size on the left side. rightTerrainSize float The terrain size on the right side. Returns Road The newly created road item. Recalculate() Recalculates this item's length and adjusts properties based on it. public override void Recalculate()"
  },
  "api/TruckLib.ScsMap.RoadModel.html": {
    "href": "api/TruckLib.ScsMap.RoadModel.html",
    "title": "Class RoadModel | TruckLib",
    "keywords": "Class RoadModel Namespace TruckLib.ScsMap Assembly TruckLib.dll Properties of a road model. public class RoadModel Inheritance object RoadModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Distance The spacing at which the model repeats, in meters. public float Distance { get; set; } Property Value float Flip Gets or sets whether the model is rotated by 180°. public bool Flip { get; set; } Property Value bool Name Unit name of the model, as defined in /def/world/sign.sii. public Token Name { get; set; } Property Value Token Offset Offset from the center of the road, in meters. public float Offset { get; set; } Property Value float Shift Gets or sets whether the models are shifted by 1/2 of Distance. public bool Shift { get; set; } Property Value bool Methods Clone() Makes a deep copy of this object. public RoadModel Clone() Returns RoadModel A deep copy of this object."
  },
  "api/TruckLib.ScsMap.RoadRailings.html": {
    "href": "api/TruckLib.ScsMap.RoadRailings.html",
    "title": "Class RoadRailings | TruckLib",
    "keywords": "Class RoadRailings Namespace TruckLib.ScsMap Assembly TruckLib.dll Represents the railings of a Road. public class RoadRailings : Railings Inheritance object Railings RoadRailings Inherited Members Railings.Models Railings.InvertRailing object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CenterPartOnly Gets or sets whether only the center part of the model is placed. Only applies to the second railing. public bool CenterPartOnly { get; set; } Property Value bool DoubleSided Gets or sets whether a mirrored version of the models is placed on the opposite side of the road. Only applies to the first railing. public bool DoubleSided { get; set; } Property Value bool Methods Clone() Makes a deep copy of this object. public RoadRailings Clone() Returns RoadRailings A deep copy of this object."
  },
  "api/TruckLib.ScsMap.RoadResolution.html": {
    "href": "api/TruckLib.ScsMap.RoadResolution.html",
    "title": "Enum RoadResolution | TruckLib",
    "keywords": "Enum RoadResolution Namespace TruckLib.ScsMap Assembly TruckLib.dll The resolution / step size of a road. public enum RoadResolution Fields HighPoly = 1 5 m Normal = 0 15 m Superfine = 2 1 m (non-template only)"
  },
  "api/TruckLib.ScsMap.RoadSide.html": {
    "href": "api/TruckLib.ScsMap.RoadSide.html",
    "title": "Class RoadSide | TruckLib",
    "keywords": "Class RoadSide Namespace TruckLib.ScsMap Assembly TruckLib.dll Properties of one side of a road, such as vegetation and railings. public class RoadSide Inheritance object RoadSide Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RoadSide() Instantiates a new RoadSide object with default values. public RoadSide() Properties AdditionalParts Unit names of enabled additional parts. public List<Token> AdditionalParts { get; set; } Property Value List<Token> DetailVegetation Gets or sets if detail vegetation (small clumps of grass etc.) is rendered if the selected terrain material supports it. public bool DetailVegetation { get; set; } Property Value bool EdgeOverrides Edge model overrides on this side of the road. public List<EdgeOverride> EdgeOverrides { get; set; } Property Value List<EdgeOverride> HeightOffset Height offset of this side in meters. public float HeightOffset { get; set; } Property Value float LeftEdge Unit name of the left edge model, as defined in /def/world/road_edge.sii. public Token LeftEdge { get; set; } Property Value Token Look Unit name of the road look. public Token Look { get; set; } Property Value Token Models Models on this side of the road. public RoadModel[] Models { get; set; } Property Value RoadModel[] NoDetailVegetationFrom The start of the band, in meters, in which detail vegetation is not rendered. public float NoDetailVegetationFrom { get; set; } Property Value float NoDetailVegetationTo The end of the band, in meters, in which detail vegetation is not rendered. public float NoDetailVegetationTo { get; set; } Property Value float Railings Railings on this side the road. public RoadRailings Railings { get; set; } Property Value RoadRailings RightEdge Unit name of the right edge model, as defined in /def/world/road_edge.sii. public Token RightEdge { get; set; } Property Value Token ShoulderBlocked Gets or sets if visual details in shoulders cannot spawn on this side. public bool ShoulderBlocked { get; set; } Property Value bool Sidewalk Sidewalk for legacy city roads. public Sidewalk Sidewalk { get; set; } Property Value Sidewalk Terrain Terrain on this side of the road. public RoadTerrain Terrain { get; set; } Property Value RoadTerrain TrafficRule Unit name of the traffic rule variant. public Token TrafficRule { get; set; } Property Value Token Variant Unit name of the road variant. public Token Variant { get; set; } Property Value Token VariantOverrides Model variant override on this side of the road. public List<VariantOverride> VariantOverrides { get; set; } Property Value List<VariantOverride> Vegetation Vegetation on this side of the road. public RoadVegetation[] Vegetation { get; set; } Property Value RoadVegetation[] VegetationCollision Gets or sets if vegetation has collision. public bool VegetationCollision { get; set; } Property Value bool Methods Clone() Makes a deep copy of this object. public RoadSide Clone() Returns RoadSide A deep copy of this object. Init() Sets the object to its default values. protected void Init()"
  },
  "api/TruckLib.ScsMap.RoadTerrain.html": {
    "href": "api/TruckLib.ScsMap.RoadTerrain.html",
    "title": "Class RoadTerrain | TruckLib",
    "keywords": "Class RoadTerrain Namespace TruckLib.ScsMap Assembly TruckLib.dll Properties of the procedurally generated terrain of one side of a Road or Terrain. public class RoadTerrain : EdgeTerrain Inheritance object EdgeTerrain RoadTerrain Inherited Members EdgeTerrain.RowWidthSequence EdgeTerrain.Size EdgeTerrain.Profile EdgeTerrain.Coefficient EdgeTerrain.QuadData EdgeTerrain.GetRowWidthAt(int) EdgeTerrain.CalculateQuadRows(float) EdgeTerrain.UpdateQuadAmount() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RoadTerrain() Instantiates a RoadTerrain with its default values. public RoadTerrain() Properties Noise Gets or sets the strength of random noise applied to the vertices of the terrain. public TerrainNoise Noise { get; set; } Property Value TerrainNoise Transition Length of the terain transition from the profile of the backward road item to this one, given as the number of quads. public TerrainTransition Transition { get; set; } Property Value TerrainTransition Remarks Note that the RoadResolution flag affects this. Methods CalculateQuadGrid(RoadResolution, float) Updates the amount of quad columns and rows of this terrain. public void CalculateQuadGrid(RoadResolution resolution, float length) Parameters resolution RoadResolution The resolution of the road. length float The length of the road. CalculateQuadGrid(StepSize, float) Updates the amount of quad columns and rows of this terrain. public void CalculateQuadGrid(StepSize stepSize, float length) Parameters stepSize StepSize The step size of the standalone terrain. length float The length of the standalone terrain. Clone() Makes a deep copy of this object. public RoadTerrain Clone() Returns RoadTerrain A deep copy of this object. Init() Sets the RoadTerrain's properties to its default values. protected override void Init()"
  },
  "api/TruckLib.ScsMap.RoadVegetation.html": {
    "href": "api/TruckLib.ScsMap.RoadVegetation.html",
    "title": "Class RoadVegetation | TruckLib",
    "keywords": "Class RoadVegetation Namespace TruckLib.ScsMap Assembly TruckLib.dll Properties of vegetation on the side of a road. public class RoadVegetation : Vegetation, IBinarySerializable Inheritance object Vegetation RoadVegetation Implements IBinarySerializable Inherited Members Vegetation.Name Vegetation.Scale Vegetation.Density object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties From Where vegetation will start appearing, in meters from the center. public float From { get; set; } Property Value float HighPolyDistance Cutoff point for high poly models, in meters from the center. public byte HighPolyDistance { get; set; } Property Value byte To Where vegetation will stop appearing, in meters from the center. public float To { get; set; } Property Value float Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.ScsMap.Sector.html": {
    "href": "api/TruckLib.ScsMap.Sector.html",
    "title": "Class Sector | TruckLib",
    "keywords": "Class Sector Namespace TruckLib.ScsMap Assembly TruckLib.dll Represents metadata of one sector of a Map. public class Sector Inheritance object Sector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Sector() public Sector() Sector(int, int, Map) Instantiates a sector with default metadata. public Sector(int x, int z, Map map) Parameters x int The X coordinate. z int The Z coordinate. map Map The map this sector belongs to. Sector(SectorCoordinate, Map) Instantiates a sector with default metadata. public Sector(SectorCoordinate coord, Map map) Parameters coord SectorCoordinate The coordinate of the sector. map Map The map this sector belongs to. Properties Climate Unit name of the climate profile of this sector. public Token Climate { get; set; } Property Value Token Coordinate The coordinate of this sector. public SectorCoordinate Coordinate { get; set; } Property Value SectorCoordinate Map The map the sector belongs to. public Map Map { get; set; } Property Value Map MaxBoundary public Vector2 MaxBoundary { get; set; } Property Value Vector2 MinBoundary public Vector2 MinBoundary { get; set; } Property Value Vector2 Methods SectorCoordsFromSectorFilePath(string) Parses sector coordinates from the path to a sector file. public static SectorCoordinate SectorCoordsFromSectorFilePath(string path) Parameters path string The file path. Returns SectorCoordinate The coordinates of the sector. SectorFileNameFromSectorCoords(SectorCoordinate) public static string SectorFileNameFromSectorCoords(SectorCoordinate coord) Parameters coord SectorCoordinate Returns string ToString() Returns the name of this sector as used in filenames and the editor's map overlay. public override string ToString() Returns string The name of this sector."
  },
  "api/TruckLib.ScsMap.SectorCoordinate.html": {
    "href": "api/TruckLib.ScsMap.SectorCoordinate.html",
    "title": "Struct SectorCoordinate | TruckLib",
    "keywords": "Struct SectorCoordinate Namespace TruckLib.ScsMap Assembly TruckLib.dll Represents a map sector coordinate. public record struct SectorCoordinate : IEquatable<SectorCoordinate> Implements IEquatable<SectorCoordinate> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors SectorCoordinate(int, int) Represents a map sector coordinate. public SectorCoordinate(int X, int Z) Parameters X int The X coordinate. Z int The Z coordinate. Properties X The X coordinate. public int X { readonly get; set; } Property Value int Z The Z coordinate. public int Z { readonly get; set; } Property Value int"
  },
  "api/TruckLib.ScsMap.Selection.html": {
    "href": "api/TruckLib.ScsMap.Selection.html",
    "title": "Class Selection | TruckLib",
    "keywords": "Class Selection Namespace TruckLib.ScsMap Assembly TruckLib.dll A selection (.sbd) file. public class Selection : IItemContainer Inheritance object Selection Implements IItemContainer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Selection() public Selection() Fields KdopBounds protected KdopBounds KdopBounds Field Value KdopBounds Properties MapItems Map items in this selection. public Dictionary<ulong, MapItem> MapItems { get; set; } Property Value Dictionary<ulong, MapItem> Nodes Nodes in this selection. public Dictionary<ulong, INode> Nodes { get; set; } Property Value Dictionary<ulong, INode> Origin The origin point of the items, which the official editor will subtract from all node positions upon import. This is typically the center of the nodes. public Vector3 Origin { get; set; } Property Value Vector3 Methods AddNode(Vector3) Adds a node to the selection. public Node AddNode(Vector3 position) Parameters position Vector3 The position of the node. Returns Node The new node. AddNode(Vector3, bool) Adds a node to the selection. public Node AddNode(Vector3 position, bool isRed) Parameters position Vector3 The position of the node. isRed bool Whether the node is red. Returns Node The new node. CenterOrigin() Sets the Origin of the selection to the center of its nodes. public void CenterOrigin() Delete(INode) Deletes a node from the selection. public void Delete(INode node) Parameters node INode The node. Delete(MapItem) Deletes an item from the selection. public void Delete(MapItem item) Parameters item MapItem The item. Open(string) Reads a selection file from disk. public static Selection Open(string sbdPath) Parameters sbdPath string Path to the .sbd file. Returns Selection A Selection object. Open(string, IFileSystem) Reads a selection file from disk. public static Selection Open(string sbdPath, IFileSystem fs) Parameters sbdPath string Path to the .sbd file. fs IFileSystem The file system to load the map from. This accepts a HashFS reader. Returns Selection A Selection object. Save(string) Saves the selection in binary format. public void Save(string sbdPath) Parameters sbdPath string The output path."
  },
  "api/TruckLib.ScsMap.Service.html": {
    "href": "api/TruckLib.ScsMap.Service.html",
    "title": "Class Service | TruckLib",
    "keywords": "Class Service Namespace TruckLib.ScsMap Assembly TruckLib.dll A prefab slave item which is placed for several spawn point types of a prefab. public class Service : PrefabSlaveItem, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem PrefabSlaveItem Service Implements IMapItem IMapObject Derived FuelPump Inherited Members PrefabSlaveItem.DefaultItemFile PrefabSlaveItem.DefaultViewDistance PrefabSlaveItem.Prefab PrefabSlaveItem.Add<T>(IItemContainer, Prefab, Vector3) PrefabSlaveItem.UpdateItemReferences(Dictionary<ulong, MapItem>) SingleNodeItem.Node MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Service() public Service() Properties ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Nodes public List<INode> Nodes { get; set; } Property Value List<INode> ServiceType The spawn point type. public ServiceType ServiceType { get; set; } Property Value ServiceType Methods Add(IItemContainer, Prefab, Vector3) Adds a Service item to the map. public static Service Add(IItemContainer map, Prefab parent, Vector3 position) Parameters map IItemContainer The map. parent Prefab The prefab this item is linked to. position Vector3 The position of the node. Returns Service The newly created Service item. Init() Sets the item's properties to its default values. protected override void Init() Move(Vector3) Moves the item to a different location. public override void Move(Vector3 newPos) Parameters newPos Vector3 The new position. Translate(Vector3) Translates the item by the given vector. public override void Translate(Vector3 translation) Parameters translation Vector3 The translation vector."
  },
  "api/TruckLib.ScsMap.ServiceType.html": {
    "href": "api/TruckLib.ScsMap.ServiceType.html",
    "title": "Enum ServiceType | TruckLib",
    "keywords": "Enum ServiceType Namespace TruckLib.ScsMap Assembly TruckLib.dll The spawn point type of a Service item. public enum ServiceType Fields GasStation = 0 Parking = 4 Recruitment = 5 ServiceStation = 1 TruckDealer = 2 WeighStation = 7 WeighStationCat = 8"
  },
  "api/TruckLib.ScsMap.Sidewalk.html": {
    "href": "api/TruckLib.ScsMap.Sidewalk.html",
    "title": "Class Sidewalk | TruckLib",
    "keywords": "Class Sidewalk Namespace TruckLib.ScsMap Assembly TruckLib.dll Sidewalk properties for legacy, pre-template roads. public class Sidewalk Inheritance object Sidewalk Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Material Unit name of the sidewalk material. public Token Material { get; set; } Property Value Token Size The size of the sidewalk. public SidewalkSize Size { get; set; } Property Value SidewalkSize Methods Clone() Makes a deep copy of this object. public Sidewalk Clone() Returns Sidewalk A deep copy of this object."
  },
  "api/TruckLib.ScsMap.SidewalkSize.html": {
    "href": "api/TruckLib.ScsMap.SidewalkSize.html",
    "title": "Enum SidewalkSize | TruckLib",
    "keywords": "Enum SidewalkSize Namespace TruckLib.ScsMap Assembly TruckLib.dll Allowed values for sidewalk size in meters in the legacy pre-edge system. public enum SidewalkSize Fields Meters0 = 3 Meters2 = 2 Meters4 = 1 Meters8 = 0"
  },
  "api/TruckLib.ScsMap.Sign.SignBoard.html": {
    "href": "api/TruckLib.ScsMap.Sign.SignBoard.html",
    "title": "Struct Sign.SignBoard | TruckLib",
    "keywords": "Struct Sign.SignBoard Namespace TruckLib.ScsMap Assembly TruckLib.dll Sign text for legacy navigation signs. public struct Sign.SignBoard Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields City1 public Token City1 Field Value Token City2 public Token City2 Field Value Token Road public Token Road Field Value Token"
  },
  "api/TruckLib.ScsMap.Sign.html": {
    "href": "api/TruckLib.ScsMap.Sign.html",
    "title": "Class Sign | TruckLib",
    "keywords": "Class Sign Namespace TruckLib.ScsMap Assembly TruckLib.dll A traffic sign or navigation sign. public class Sign : SingleNodeItem, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem Sign Implements IMapItem IMapObject Inherited Members SingleNodeItem.Node SingleNodeItem.Move(Vector3) SingleNodeItem.Translate(Vector3) MapItem.Uid MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Sign() public Sign() Properties DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort FollowRoadDir Gets or sets if the game will rotate this sign to align with the direction of the closest lane of a road. public bool FollowRoadDir { get; set; } Property Value bool IgnoreCutPlanes Gets or sets if this item will render behind a cut plane. public bool IgnoreCutPlanes { get; set; } Property Value bool ItemFile Gets or sets the sector file this sign should be written to. If it has a traffic rule associated with it, set it to Base. Otherwise, set it to Aux. public ItemFile ItemFile { get; set; } Property Value ItemFile ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Look The look of the model. public Token Look { get; set; } Property Value Token Model The unit name of the sign model, as defined in /def/world/sign.sii. public Token Model { get; set; } Property Value Token SignBoards Sign text for legacy navigation signs. public Sign.SignBoard[] SignBoards { get; set; } Property Value SignBoard[] SignOverrides The attribute overrides used on the sign template. public List<SignOverride> SignOverrides { get; set; } Property Value List<SignOverride> SignTemplate Full name of the sign template on this sign, as defined in /def/sign/templates.sii. public string SignTemplate { get; set; } Property Value string Variant The variant of the model. public Token Variant { get; set; } Property Value Token ViewDistance Gets or sets the view distance of the item in meters. public ushort ViewDistance { get; set; } Property Value ushort WaterReflection Gets or sets if the item is reflected on water surfaces. public bool WaterReflection { get; set; } Property Value bool Methods Add(IItemContainer, Vector3, Token, string) Adds a sign to the map. public static Sign Add(IItemContainer map, Vector3 position, Token model, string template) Parameters map IItemContainer The map. position Vector3 The position of the sign. model Token The unit name of the model. template string The full name of the sign template. Returns Sign The newly created sign. Init() Sets the item's properties to its default values. protected override void Init()"
  },
  "api/TruckLib.ScsMap.SignOverride.html": {
    "href": "api/TruckLib.ScsMap.SignOverride.html",
    "title": "Class SignOverride | TruckLib",
    "keywords": "Class SignOverride Namespace TruckLib.ScsMap Assembly TruckLib.dll A sign override, which overrides attributes of a sign template object. public class SignOverride : IBinarySerializable Inheritance object SignOverride Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AreaName The name of the sign area the object is placed on, as defined in the sign's model. public Token AreaName { get; set; } Property Value Token Attributes The overridden attributes of this object. public List<ISignOverrideAttribute> Attributes { get; set; } Property Value List<ISignOverrideAttribute> Id The ID of the sign template object. public uint Id { get; set; } Property Value uint Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.ScsMap.SignOverrideAttribute-1.html": {
    "href": "api/TruckLib.ScsMap.SignOverrideAttribute-1.html",
    "title": "Class SignOverrideAttribute<T> | TruckLib",
    "keywords": "Class SignOverrideAttribute<T> Namespace TruckLib.ScsMap Assembly TruckLib.dll A sign override attribute, used to define which attributes of an object in a sign template have been changed. public class SignOverrideAttribute<T> : ISignOverrideAttribute Type Parameters T Inheritance object SignOverrideAttribute<T> Implements ISignOverrideAttribute Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Index The index of the attribute in the attribute list of the object. public uint Index { get; set; } Property Value uint Value The value which will override the template default. public T Value { get; set; } Property Value T"
  },
  "api/TruckLib.ScsMap.SingleNodeItem.html": {
    "href": "api/TruckLib.ScsMap.SingleNodeItem.html",
    "title": "Class SingleNodeItem | TruckLib",
    "keywords": "Class SingleNodeItem Namespace TruckLib.ScsMap Assembly TruckLib.dll Base class for map items which only have one node. public abstract class SingleNodeItem : MapItem, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem Implements IMapItem IMapObject Derived AnimatedModel BezierPatch CameraPoint CityArea Compound Cutscene EnvironmentArea Ferry Gate Hinge Hookup MapOverlay Model PrefabSlaveItem Sign Sound VisibilityArea Inherited Members MapItem.ItemType MapItem.ItemFile MapItem.DefaultItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.Init() MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SingleNodeItem() public SingleNodeItem() Properties Node The node of the item. public INode Node { get; set; } Property Value INode Methods Move(Vector3) Moves the item to a different location. public override void Move(Vector3 newPos) Parameters newPos Vector3 The new position. Translate(Vector3) Translates the item by the given vector. public override void Translate(Vector3 translation) Parameters translation Vector3 The translation vector."
  },
  "api/TruckLib.ScsMap.Sound.html": {
    "href": "api/TruckLib.ScsMap.Sound.html",
    "title": "Class Sound | TruckLib",
    "keywords": "Class Sound Namespace TruckLib.ScsMap Assembly TruckLib.dll A sound which is played when the player is in range. public class Sound : SingleNodeItem, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem Sound Implements IMapItem IMapObject Inherited Members SingleNodeItem.Node SingleNodeItem.Move(Vector3) SingleNodeItem.Translate(Vector3) MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Sound() public Sound() Properties DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort Height Height of the area if the sound is an ambient area or reverb area. public float Height { get; set; } Property Value float ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Name Unit name of the sound, as defined in /def/world/sound_item_data.sii. public Token Name { get; set; } Property Value Token Reverb Unit name of the reverb type, as defined in /def/world/sound_item_reverb.sii. public Token Reverb { get; set; } Property Value Token Type The sound type. public SoundType Type { get; set; } Property Value SoundType Width Width of the area if the sound is an ambient area or reverb area. public float Width { get; set; } Property Value float Methods Add(IItemContainer, Vector3, Token) Adds a sound to the map. public static Sound Add(IItemContainer map, Vector3 position, Token name) Parameters map IItemContainer The map. position Vector3 The center point of the sound. name Token The unit name of the sound. Returns Sound The newly created sound. Init() Sets the item's properties to its default values. protected override void Init()"
  },
  "api/TruckLib.ScsMap.SoundType.html": {
    "href": "api/TruckLib.ScsMap.SoundType.html",
    "title": "Enum SoundType | TruckLib",
    "keywords": "Enum SoundType Namespace TruckLib.ScsMap Assembly TruckLib.dll The type of a Sound item. public enum SoundType Fields AmbientArea = 1 ReverbArea = 2 ThreeDSound = 0"
  },
  "api/TruckLib.ScsMap.StepSize.html": {
    "href": "api/TruckLib.ScsMap.StepSize.html",
    "title": "Enum StepSize | TruckLib",
    "keywords": "Enum StepSize Namespace TruckLib.ScsMap Assembly TruckLib.dll Quad resolution of a Terrain item. public enum StepSize Fields Meters12 = 2 Meters16 = 1 Meters2 = 3 Meters4 = 0"
  },
  "api/TruckLib.ScsMap.Terrain.html": {
    "href": "api/TruckLib.ScsMap.Terrain.html",
    "title": "Class Terrain | TruckLib",
    "keywords": "Class Terrain Namespace TruckLib.ScsMap Assembly TruckLib.dll A standalone terrain item which acts like a terrain-only road. public class Terrain : PolylineItem, IMapItem, IMapObject Inheritance object MapItem PolylineItem Terrain Implements IMapItem IMapObject Inherited Members PolylineItem.BackwardItem PolylineItem.ForwardItem PolylineItem.Node PolylineItem.ForwardNode PolylineItem.Length PolylineItem.FindFirstItem() PolylineItem.FindLastItem() PolylineItem.Move(Vector3) PolylineItem.Translate(Vector3) MapItem.ItemFile MapItem.Uid MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Terrain() public Terrain() Properties Boundary Gets or sets if the terrain has invisible walls on both sides of it. public bool Boundary { get; set; } Property Value bool Collision Gets or sets if collision is enabled. public bool Collision { get; set; } Property Value bool DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort ForwardNodeOffset public Vector3 ForwardNodeOffset { get; set; } Property Value Vector3 IgnoreCutPlanes Gets or sets if this item will render behind cut planes. public bool IgnoreCutPlanes { get; set; } Property Value bool ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Left Terrain and vegetation on the left side. public TerrainSide Left { get; set; } Property Value TerrainSide LowPolyVegetation Gets or sets if only flat textures are used as vegetation. public bool LowPolyVegetation { get; set; } Property Value bool MaxLength The maximum length of a terrain item. public float MaxLength { get; } Property Value float MinLength Returns the minimum length of a terrain item with the current step size setting. public float MinLength { get; } Property Value float NodeOffset public Vector3 NodeOffset { get; set; } Property Value Vector3 Railings The railings of this terrain. public Railings Railings { get; set; } Property Value Railings RandomSeed The seed for the RNG which determines which vegetation models to place. The position of the models does not appear to be affected by this. public uint RandomSeed { get; set; } Property Value uint Right Terrain and vegetation on the right side. public TerrainSide Right { get; set; } Property Value TerrainSide SmoothDetailVegetation Gets or sets if detail vegetation transitions smoothly in places where it is affected by brushes. public bool SmoothDetailVegetation { get; set; } Property Value bool StepSize The length of one terrain quad. public StepSize StepSize { get; set; } Property Value StepSize StretchTerrain [Obsolete] public bool StretchTerrain { get; set; } Property Value bool TerrainShadows public bool TerrainShadows { get; set; } Property Value bool Unknown public bool Unknown { get; set; } Property Value bool Unknown2 public bool Unknown2 { get; set; } Property Value bool VegetationSpheres The vegetation spheres on this terrain. public List<VegetationSphere> VegetationSpheres { get; set; } Property Value List<VegetationSphere> ViewDistance Gets or sets the view distance of the item in meters. public ushort ViewDistance { get; set; } Property Value ushort WaterReflection Gets or sets if the item is reflected on water surfaces. public bool WaterReflection { get; set; } Property Value bool Methods Add(IItemContainer, Vector3, Vector3, Token, float, float) Adds a single terrain item to the map. public static Terrain Add(IItemContainer map, Vector3 backwardPos, Vector3 forwardPos, Token material, float leftSize, float rightSize) Parameters map IItemContainer The map. backwardPos Vector3 The position of the backward (red) node. forwardPos Vector3 The position of the forward (green) node. material Token The unit name of the terrain material. leftSize float The terrain size on the left side. rightSize float The terrain size on the right side. Returns Terrain The newly created terrain item. Append(Vector3, Token, float, float) Appends a terrain item to this terrain. public Terrain Append(Vector3 position, Token material, float leftSize, float rightSize) Parameters position Vector3 The position of the forward node of the new terrain item. material Token The unit name of the terrain material. leftSize float The terrain size on the left side. rightSize float The terrain size on the right side. Returns Terrain The newly created terrain item. Init() Sets the item's properties to its default values. protected override void Init() Recalculate() Recalculates this item's length and adjusts properties based on it. public override void Recalculate()"
  },
  "api/TruckLib.ScsMap.TerrainNoise.html": {
    "href": "api/TruckLib.ScsMap.TerrainNoise.html",
    "title": "Enum TerrainNoise | TruckLib",
    "keywords": "Enum TerrainNoise Namespace TruckLib.ScsMap Assembly TruckLib.dll Allowed terrain noise values in percent. public enum TerrainNoise Fields Percent0 = 2 Percent100 = 0 Percent50 = 1"
  },
  "api/TruckLib.ScsMap.TerrainQuad.html": {
    "href": "api/TruckLib.ScsMap.TerrainQuad.html",
    "title": "Struct TerrainQuad | TruckLib",
    "keywords": "Struct TerrainQuad Namespace TruckLib.ScsMap Assembly TruckLib.dll Properties of an individual terrain quad. public struct TerrainQuad : IBinarySerializable Implements IBinarySerializable Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties BlendMaterial An additional material which will be drawn on top with the specified opacity value. public Nibble BlendMaterial { get; set; } Property Value Nibble ColorBottomLeft Texture color in the bottom left corner. public Nibble ColorBottomLeft { get; set; } Property Value Nibble ColorBottomRight Texture color in the bottom right corner. public Nibble ColorBottomRight { get; set; } Property Value Nibble ColorTopLeft Texture color in the top left corner. public Nibble ColorTopLeft { get; set; } Property Value Nibble ColorTopRight Texture color in the top right corner. public Nibble ColorTopRight { get; set; } Property Value Nibble MainMaterial Index of the main terrain material of this quad. public Nibble MainMaterial { get; set; } Property Value Nibble NoDetailVegetation Gets or sets whether detail vegetation will not be rendered on this quad. public bool NoDetailVegetation { get; set; } Property Value bool Opacity Opacity for the blend material. public Nibble Opacity { get; set; } Property Value Nibble Vegetation Vegetation setting for this quad. public QuadVegetation Vegetation { get; set; } Property Value QuadVegetation Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter Operators operator ==(TerrainQuad, TerrainQuad) public static bool operator ==(TerrainQuad left, TerrainQuad right) Parameters left TerrainQuad right TerrainQuad Returns bool operator !=(TerrainQuad, TerrainQuad) public static bool operator !=(TerrainQuad left, TerrainQuad right) Parameters left TerrainQuad right TerrainQuad Returns bool"
  },
  "api/TruckLib.ScsMap.TerrainQuadData.html": {
    "href": "api/TruckLib.ScsMap.TerrainQuadData.html",
    "title": "Class TerrainQuadData | TruckLib",
    "keywords": "Class TerrainQuadData Namespace TruckLib.ScsMap Assembly TruckLib.dll Represents the terrain configuration of one side of a road or prefab. public class TerrainQuadData : IBinarySerializable Inheritance object TerrainQuadData Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TerrainQuadData() public TerrainQuadData() Fields QuadErase public static readonly Token QuadErase Field Value Token Properties BrushColors Brush colors used on terrain quads. public List<Color> BrushColors { get; set; } Property Value List<Color> BrushMaterials Brush materials used on terrain quads. public List<Material> BrushMaterials { get; set; } Property Value List<Material> Cols Amount of terrain quad columns. public ushort Cols { get; set; } Property Value ushort Normals TODO: What is this? public List<VertexData> Normals { get; set; } Property Value List<VertexData> Offsets Offsets of terrain vertices. public List<VertexData> Offsets { get; set; } Property Value List<VertexData> Quads Terrain quads in this terrain. Indexing begins in the bottom left corner in forward direction. public List<TerrainQuad> Quads { get; set; } Property Value List<TerrainQuad> Rows Amount of terrain quad rows. public ushort Rows { get; set; } Property Value ushort Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Init() protected void Init() Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.ScsMap.TerrainSide.html": {
    "href": "api/TruckLib.ScsMap.TerrainSide.html",
    "title": "Class TerrainSide | TruckLib",
    "keywords": "Class TerrainSide Namespace TruckLib.ScsMap Assembly TruckLib.dll Properties of one side of a Terrain item. public class TerrainSide Inheritance object TerrainSide Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TerrainSide() Instantiates a new TerrainSide object with default values. public TerrainSide() Fields DetailVegetation Gets or sets if detail vegetation (small clumps of grass etc.) is rendered if the selected terrain material supports it. public bool DetailVegetation Field Value bool VegetationCollision Gets or sets if vegetation has collision. public bool VegetationCollision Field Value bool Properties Edge Unit name of the edge model on this side. public Token Edge { get; set; } Property Value Token EdgeLook The look of the edge model. public Token EdgeLook { get; set; } Property Value Token NoDetailVegetationFrom The start of the band, in meters, in which detail vegetation is not rendered. public float NoDetailVegetationFrom { get; set; } Property Value float NoDetailVegetationTo The end of the band, in meters, in which detail vegetation is not rendered. public float NoDetailVegetationTo { get; set; } Property Value float Terrain The terrain on this side. public RoadTerrain Terrain { get; set; } Property Value RoadTerrain Vegetation The vegetation on this side. public RoadVegetation[] Vegetation { get; set; } Property Value RoadVegetation[] Methods Init() Sets the object to its default values. protected void Init()"
  },
  "api/TruckLib.ScsMap.TerrainTransition.html": {
    "href": "api/TruckLib.ScsMap.TerrainTransition.html",
    "title": "Enum TerrainTransition | TruckLib",
    "keywords": "Enum TerrainTransition Namespace TruckLib.ScsMap Assembly TruckLib.dll Allowed transition values for terrain in number of quads. public enum TerrainTransition Fields Quads16 = 0 Quads32 = 3 Quads4 = 2 Quads8 = 1"
  },
  "api/TruckLib.ScsMap.TrafficArea.html": {
    "href": "api/TruckLib.ScsMap.TrafficArea.html",
    "title": "Class TrafficArea | TruckLib",
    "keywords": "Class TrafficArea Namespace TruckLib.ScsMap Assembly TruckLib.dll Applies a traffic rule inside a polygon. public class TrafficArea : PolygonItem, IMapItem, IMapObject Inheritance object MapItem PolygonItem TrafficArea Implements IMapItem IMapObject Inherited Members PolygonItem.Nodes PolygonItem.Move(Vector3) PolygonItem.Move(Vector3, int) PolygonItem.Translate(Vector3) MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TrafficArea() public TrafficArea() Properties CrossroadArea public bool CrossroadArea { get; set; } Property Value bool DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Range If greater than 0, the traffic area is limited to a polyhedron with this height. The polygon created by the nodes of this item is the bottom face. public float Range { get; set; } Property Value float RemoveSemaphores public bool RemoveSemaphores { get; set; } Property Value bool Rule Unit name of the traffic rule, as defined in /def/world/traffic_rules.sii. public Token Rule { get; set; } Property Value Token Tags public List<Token> Tags { get; set; } Property Value List<Token> Methods Add(IItemContainer, IList<Vector3>, Token) Adds a traffic area to the map. public static TrafficArea Add(IItemContainer map, IList<Vector3> positions, Token rule) Parameters map IItemContainer The map. positions IList<Vector3> The points of the polygon. rule Token The unit name of the traffic rule. Returns TrafficArea The newly created traffic area. Init() Sets the item's properties to its default values. protected override void Init()"
  },
  "api/TruckLib.ScsMap.Trajectory.html": {
    "href": "api/TruckLib.ScsMap.Trajectory.html",
    "title": "Class Trajectory | TruckLib",
    "keywords": "Class Trajectory Namespace TruckLib.ScsMap Assembly TruckLib.dll Used for Special Transport DLC. TODO: Figure out how this works public class Trajectory : PathItem, IMapItem, IMapObject Inheritance object MapItem PathItem Trajectory Implements IMapItem IMapObject Inherited Members PathItem.Nodes PathItem.Move(Vector3) PathItem.Move(Vector3, int) PathItem.Translate(Vector3) PathItem.CreateNodes(IList<Vector3>) PathItem.Recalculate() PathItem.RecalculateRotation(int) MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Trajectory() public Trajectory() Properties AccessRule public Token AccessRule { get; set; } Property Value Token BlinkerType public BlinkerType BlinkerType { get; set; } Property Value BlinkerType Checkpoints public List<TrajectoryCheckpoint> Checkpoints { get; set; } Property Value List<TrajectoryCheckpoint> DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort ForceThisWay public bool ForceThisWay { get; set; } Property Value bool IgnoreCutPlanes Gets or sets if this item will render behind a cut plane. public bool IgnoreCutPlanes { get; set; } Property Value bool ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType LimitDisplacement public bool LimitDisplacement { get; set; } Property Value bool LowProbability public bool LowProbability { get; set; } Property Value bool OneWayBonus public bool OneWayBonus { get; set; } Property Value bool ParkingSpot public bool ParkingSpot { get; set; } Property Value bool PriorityModifier public Nibble PriorityModifier { get; set; } Property Value Nibble Public public bool Public { get; set; } Property Value bool Rules public List<TrajectoryRule> Rules { get; set; } Property Value List<TrajectoryRule> Spawning public bool Spawning { get; set; } Property Value bool Tags public List<Token> Tags { get; set; } Property Value List<Token> Methods Add(IItemContainer, IList<Vector3>) Adds a trajectory to the map. public static Trajectory Add(IItemContainer map, IList<Vector3> positions) Parameters map IItemContainer The map. positions IList<Vector3> The points of the path. Returns Trajectory The newly created trajectory. Init() Sets the item's properties to its default values. protected override void Init()"
  },
  "api/TruckLib.ScsMap.TrajectoryCheckpoint.html": {
    "href": "api/TruckLib.ScsMap.TrajectoryCheckpoint.html",
    "title": "Class TrajectoryCheckpoint | TruckLib",
    "keywords": "Class TrajectoryCheckpoint Namespace TruckLib.ScsMap Assembly TruckLib.dll public class TrajectoryCheckpoint Inheritance object TrajectoryCheckpoint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Checkpoint public Token Checkpoint { get; set; } Property Value Token Route public Token Route { get; set; } Property Value Token Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/TruckLib.ScsMap.TrajectoryRule.html": {
    "href": "api/TruckLib.ScsMap.TrajectoryRule.html",
    "title": "Class TrajectoryRule | TruckLib",
    "keywords": "Class TrajectoryRule Namespace TruckLib.ScsMap Assembly TruckLib.dll public class TrajectoryRule : IBinarySerializable Inheritance object TrajectoryRule Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties NodeIndex public uint NodeIndex { get; set; } Property Value uint Rule public Token Rule { get; set; } Property Value Token RuleParameters public List<float> RuleParameters { get; set; } Property Value List<float> Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/TruckLib.ScsMap.Trigger.html": {
    "href": "api/TruckLib.ScsMap.Trigger.html",
    "title": "Class Trigger | TruckLib",
    "keywords": "Class Trigger Namespace TruckLib.ScsMap Assembly TruckLib.dll Defines a trigger area. public class Trigger : PolygonItem, IMapItem, IMapObject Inheritance object MapItem PolygonItem Trigger Implements IMapItem IMapObject Inherited Members PolygonItem.Nodes PolygonItem.Move(Vector3) PolygonItem.Move(Vector3, int) PolygonItem.Translate(Vector3) MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Note that, if only two nodes are used, the area is a sphere, with the first node defining the center and the second node defining the radius. Constructors Trigger() public Trigger() Properties Actions public List<TriggerAction> Actions { get; set; } Property Value List<TriggerAction> CollisionActivation public bool CollisionActivation { get; set; } Property Value bool ConnectedTrailerActivation public bool ConnectedTrailerActivation { get; set; } Property Value bool DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort DisconnectedTrailerActivation public bool DisconnectedTrailerActivation { get; set; } Property Value bool DlcGuard public byte DlcGuard { get; set; } Property Value byte FarViewDistance public bool FarViewDistance { get; set; } Property Value bool InitDisabled public bool InitDisabled { get; set; } Property Value bool ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType OrientedActivation Gets or sets if the trigger requires a specific orientation to activate(?). The orientation for the trigger is defined by the yaw of the 0th node. public bool OrientedActivation { get; set; } Property Value bool PartialActivation public bool PartialActivation { get; set; } Property Value bool Range Legacy parameter. Do not use. [Obsolete] public float Range { get; set; } Property Value float Secret Gets or sets if this trigger's icon, if one exists, is only visible in the UI map once discovered. public bool Secret { get; set; } Property Value bool Tags public List<Token> Tags { get; set; } Property Value List<Token> VehicleActivation public bool VehicleActivation { get; set; } Property Value bool Methods Add(IItemContainer, IList<Vector3>) Adds a trigger to the map. public static Trigger Add(IItemContainer map, IList<Vector3> positions) Parameters map IItemContainer The map. positions IList<Vector3> The points of the polygon. Returns Trigger The newly created trigger. Init() Sets the item's properties to its default values. protected override void Init()"
  },
  "api/TruckLib.ScsMap.TriggerAction.html": {
    "href": "api/TruckLib.ScsMap.TriggerAction.html",
    "title": "Class TriggerAction | TruckLib",
    "keywords": "Class TriggerAction Namespace TruckLib.ScsMap Assembly TruckLib.dll Action properties of a Trigger. public class TriggerAction : ActionBase, IBinarySerializable Inheritance object ActionBase TriggerAction Implements IBinarySerializable Inherited Members ActionBase.NumParams ActionBase.StringParams ActionBase.TargetTags ActionBase.TargetRange ActionBase.ActionFlags object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Unit name of the action. public Token Name { get; set; } Property Value Token Type The type of the action. public ActionType Type { get; set; } Property Value ActionType Methods Deserialize(BinaryReader, uint?) public override void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public override void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.ScsMap.VariantOverride.html": {
    "href": "api/TruckLib.ScsMap.VariantOverride.html",
    "title": "Struct VariantOverride | TruckLib",
    "keywords": "Struct VariantOverride Namespace TruckLib.ScsMap Assembly TruckLib.dll Represents a variant override of a Road. public struct VariantOverride : IBinarySerializable Implements IBinarySerializable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors VariantOverride(Token, ushort, ushort) Instantiates a VariantOverride. public VariantOverride(Token variant, ushort offset, ushort length) Parameters variant Token Unit name of the edge model. offset ushort Offset of the section at which the override begins, counted in forward direction. length ushort Number of road sections for which the override will repeat. Properties Length Number of sections for which the override will repeat. public ushort Length { readonly get; set; } Property Value ushort Remarks One section spans three road quads. Offset Offset of the section at which the override begins, counted in forward direction. public ushort Offset { readonly get; set; } Property Value ushort Remarks One section spans three road quads. Variant Unit name of the road variant. public Token Variant { readonly get; set; } Property Value Token Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.ScsMap.Vegetation.html": {
    "href": "api/TruckLib.ScsMap.Vegetation.html",
    "title": "Class Vegetation | TruckLib",
    "keywords": "Class Vegetation Namespace TruckLib.ScsMap Assembly TruckLib.dll Properties of procedurally placed vegetation. public class Vegetation Inheritance object Vegetation Derived CenterVegetation RoadVegetation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Density The density of vegetation models. public float Density { get; set; } Property Value float Name Unit name of the vegetation type. public Token Name { get; set; } Property Value Token Scale The scale of vegetation models. public VegetationScale Scale { get; set; } Property Value VegetationScale"
  },
  "api/TruckLib.ScsMap.VegetationPart.html": {
    "href": "api/TruckLib.ScsMap.VegetationPart.html",
    "title": "Class VegetationPart | TruckLib",
    "keywords": "Class VegetationPart Namespace TruckLib.ScsMap Assembly TruckLib.dll public class VegetationPart : IBinarySerializable Inheritance object VegetationPart Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VegetationPart() public VegetationPart() Properties PartName public Token PartName { get; set; } Property Value Token Vegetation public Vegetation[] Vegetation { get; set; } Property Value Vegetation[] Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.ScsMap.VegetationScale.html": {
    "href": "api/TruckLib.ScsMap.VegetationScale.html",
    "title": "Enum VegetationScale | TruckLib",
    "keywords": "Enum VegetationScale Namespace TruckLib.ScsMap Assembly TruckLib.dll Scale of vegetation models in percent. public enum VegetationScale Fields Percent100 = 5 Percent100to140 = 3 Percent35to50 = 4 Percent50to80 = 2 Percent60 = 7 Percent60to100 = 1 Percent80 = 6 Percent80to120 = 0"
  },
  "api/TruckLib.ScsMap.VegetationSphere.html": {
    "href": "api/TruckLib.ScsMap.VegetationSphere.html",
    "title": "Class VegetationSphere | TruckLib",
    "keywords": "Class VegetationSphere Namespace TruckLib.ScsMap Assembly TruckLib.dll A vegetation sphere. public class VegetationSphere : IBinarySerializable Inheritance object VegetationSphere Implements IBinarySerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Position The position of the sphere. X is the position along the road in percent (so 0.75 means 3/4 of the way towards the forward node). Y describes the Y position of the sphere in meters relative to the terrain height at the sphere's X/Z coordinates (so 1 means 1 meter above ground). Z describes the position on the axis perpendicular to the road in meters (so 20 means 20 meters into the terrain at X). public Vector3 Position { get; set; } Property Value Vector3 Radius The radius of the sphere. public float Radius { get; set; } Property Value float Type The modifier which is applied to the vegetation inside the sphere. public VegetationSphereType Type { get; set; } Property Value VegetationSphereType Methods Deserialize(BinaryReader, uint?) public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader version uint? Serialize(BinaryWriter) public void Serialize(BinaryWriter w) Parameters w BinaryWriter"
  },
  "api/TruckLib.ScsMap.VegetationSphereType.html": {
    "href": "api/TruckLib.ScsMap.VegetationSphereType.html",
    "title": "Enum VegetationSphereType | TruckLib",
    "keywords": "Enum VegetationSphereType Namespace TruckLib.ScsMap Assembly TruckLib.dll Defines the behavior of a vegetation sphere. public enum VegetationSphereType Fields HighPolyVegetation = 3 LowPolyVegetation = 2 NoVegetation = 1"
  },
  "api/TruckLib.ScsMap.VertexData.html": {
    "href": "api/TruckLib.ScsMap.VertexData.html",
    "title": "Struct VertexData | TruckLib",
    "keywords": "Struct VertexData Namespace TruckLib.ScsMap Assembly TruckLib.dll public struct VertexData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Data public Vector3 Data Field Value Vector3 X public ushort X Field Value ushort Y public ushort Y Field Value ushort"
  },
  "api/TruckLib.ScsMap.VisibilityArea.html": {
    "href": "api/TruckLib.ScsMap.VisibilityArea.html",
    "title": "Class VisibilityArea | TruckLib",
    "keywords": "Class VisibilityArea Namespace TruckLib.ScsMap Assembly TruckLib.dll Defines a rectangular area in which, if the camera is inside it, child items are rendered differently. public class VisibilityArea : SingleNodeItem, IMapItem, IMapObject Inheritance object MapItem SingleNodeItem VisibilityArea Implements IMapItem IMapObject Inherited Members SingleNodeItem.Node SingleNodeItem.Move(Vector3) SingleNodeItem.Translate(Vector3) MapItem.ItemFile MapItem.Uid MapItem.ViewDistance MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VisibilityArea() public VisibilityArea() Properties Behavior The rendering behavior of this visibility area. public VisibilityAreaBehavior Behavior { get; set; } Property Value VisibilityAreaBehavior Children The map items which are affected by this item. public List<IMapItem> Children { get; set; } Property Value List<IMapItem> DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort Height Height of the area. public float Height { get; set; } Property Value float ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Width Width of the area. public float Width { get; set; } Property Value float Methods Add(IItemContainer, Vector3, VisibilityAreaBehavior, float, float) Adds a visibility area to the map. public static VisibilityArea Add(IItemContainer map, Vector3 position, VisibilityAreaBehavior behavior, float width, float height) Parameters map IItemContainer The map. position Vector3 The position of the center of the area. behavior VisibilityAreaBehavior The rendering behavior of the area. width float The width of the area. height float The height of the area. Returns VisibilityArea The newly created visibility area. Init() Sets the item's properties to its default values. protected override void Init() UpdateItemReferences(Dictionary<ulong, MapItem>) Searches a list of all map items for the map items referenced by UID in this map item and updates the respective references. This is used for loading a map and does not need to be called by the user at any point. public void UpdateItemReferences(Dictionary<ulong, MapItem> allItems) Parameters allItems Dictionary<ulong, MapItem> A dictionary of all items in the entire map."
  },
  "api/TruckLib.ScsMap.VisibilityAreaBehavior.html": {
    "href": "api/TruckLib.ScsMap.VisibilityAreaBehavior.html",
    "title": "Enum VisibilityAreaBehavior | TruckLib",
    "keywords": "Enum VisibilityAreaBehavior Namespace TruckLib.ScsMap Assembly TruckLib.dll The rendering behavior of a visibility area. public enum VisibilityAreaBehavior Fields HideObjects = 1 Child objects are invisible inside the area. ShowHiddenObjects = 0 Ignores cut planes for child objects. ShowObjects = 2 Child objects are only visible inside the area."
  },
  "api/TruckLib.ScsMap.Walker.html": {
    "href": "api/TruckLib.ScsMap.Walker.html",
    "title": "Class Walker | TruckLib",
    "keywords": "Class Walker Namespace TruckLib.ScsMap Assembly TruckLib.dll Obsolete item for making pedestrians move along a path. [Obsolete] public class Walker : PathItem, IMapItem, IMapObject Inheritance object MapItem PathItem Walker Implements IMapItem IMapObject Inherited Members PathItem.Nodes PathItem.Move(Vector3, int) PathItem.CreateNodes(IList<Vector3>) PathItem.Recalculate() PathItem.RecalculateRotation(int) MapItem.ItemFile MapItem.Uid MapItem.DefaultLayer MapItem.Layer MapItem.ResolveNodeReference(INode, IDictionary<ulong, INode>) MapItem.ResolveNodeReferences(IList<INode>, IDictionary<ulong, INode>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Walkers have been deprecated in 1.36 and replaced with Movers, but, as of 1.49, have not yet been removed from the game, despite no longer being used in europe.mbd. Constructors Walker() public Walker() Properties ActiveDuringBadWeather public bool ActiveDuringBadWeather { get; set; } Property Value bool ActiveDuringDay public bool ActiveDuringDay { get; set; } Property Value bool ActiveDuringNiceWeather public bool ActiveDuringNiceWeather { get; set; } Property Value bool ActiveDuringNight public bool ActiveDuringNight { get; set; } Property Value bool Angle public float Angle { get; set; } Property Value float BounceAtEnd public bool BounceAtEnd { get; set; } Property Value bool Count public uint Count { get; set; } Property Value uint DefaultItemFile Gets the default location for the item type. public override ItemFile DefaultItemFile { get; } Property Value ItemFile DefaultViewDistance Gets the default view distance of the item. protected override ushort DefaultViewDistance { get; } Property Value ushort EndDelay public float EndDelay { get; set; } Property Value float FollowDir public bool FollowDir { get; set; } Property Value bool ItemType The item type ID used as identifier in the map format. public override ItemType ItemType { get; } Property Value ItemType Lengths Cached lengths of the segments. public List<float> Lengths { get; } Property Value List<float> NamePrefix public Token NamePrefix { get; set; } Property Value Token RandomSpeedFactor public bool RandomSpeedFactor { get; set; } Property Value bool Speed public float Speed { get; set; } Property Value float UseCurvedPath public bool UseCurvedPath { get; set; } Property Value bool ViewDistance public ushort ViewDistance { get; set; } Property Value ushort Width public float Width { get; set; } Property Value float Methods Add(IItemContainer, IList<Vector3>, Token) Adds a walker to the map. public static Walker Add(IItemContainer map, IList<Vector3> positions, Token namePrefix) Parameters map IItemContainer The map. positions IList<Vector3> The points of the path. namePrefix Token The name prefix. Returns Walker The newly created walker. Init() Sets the item's properties to its default values. protected override void Init() Move(Vector3) Moves the item, where the given position will be the new position of the node at index 0, and all other nodes will be moved relative to it. public override void Move(Vector3 newPos) Parameters newPos Vector3 The new position of the node. Translate(Vector3) Translates the item by the given vector. public override void Translate(Vector3 translation) Parameters translation Vector3 The translation vector."
  },
  "api/TruckLib.ScsMap.html": {
    "href": "api/TruckLib.ScsMap.html",
    "title": "Namespace TruckLib.ScsMap | TruckLib",
    "keywords": "Namespace TruckLib.ScsMap Classes ActionBase Base class for CutsceneAction and TriggerAction. AnimatedModel TODO: What even is this? BezierPatch A piece of terrain created by a Bézier surface. Buildings A Buildings segment, which repeats one or more models along a path. BusStop A prefab slave item which is placed for the BusStop spawn point type of a prefab. CameraPath Defines a tracking shot through the map for use in cutscenes. CameraPoint Defines the tracking point for various cutscenes and is also used to create random events. CenterVegetation Properties of vegetation in the center of a dual carriageway road. CityArea A City item, which declares a rectangular area around the item's node as belonging to a city. Company A prefab slave item which is placed for the CompanyPoint spawn point type of company prefabs. Compound A compound item, which groups multiple aux items into one, with an additional parent node to which they are tethered. Curve A curve segment, which repeats one or more models along a path. CutPlane Defines a path creating one or more planes perpendicular to the ground plane. Items which are fully behind these planes from the point of view of the camera are not rendered. Cutscene CutsceneAction EdgeTerrain Base class for RoadTerrain and PrefabTerrain. EnvironmentArea Defines a rectangular area in which FarModel Defines a rectangular area which ignores the usual view distance limit of 1500 m for specific items if the camera is inside it. Ferry The activation point for a ferry. FuelPump A prefab slave item which is placed for the GasStation spawn point type of a prefab. Garage A prefab slave item which is placed for the GaragePoint and BuyPoint spawn point types of a prefab. Gate A gate which can be activated in various different ways. Header Represents the header of .mbd, .base, .aux, .snd, .data, .layer, and .sbd files. Hinge According to the wiki: \"Currently unused. It defined object that could be placed on map and be swung by player truck e.g. swing doors.\" Hookup Defines a point where a random vehicle model is placed at runtime. KdopBounds Represents the k-DOP bounding box of a map item. Keyframe Represents the properties of one keyframe of a camera path. Map A map for Euro Truck Simulator 2 or American Truck Simulator. MapArea Defines a polygon which is drawn onto the UI map. MapItem The base class for all map items. MapOverlay Overlays an image or text onto the UI map. Model A static model. Mover An animated model which can optionally be moved along a path. Node Represents a map node. PathItem Base class for map items which define a polyline or spline that is fully contained in one item rather than being one piece of it. PolygonItem Base class for map items which define a polygonal area. PolylineItem Base class for map items which form a polyline with other items of the same type, such as roads and buildings. Prefab A model with associated game logic which attaches to the road network. PrefabNode Holds vegetation, terrain, and corner model properties for one node of a prefab. PrefabSlaveItem Base class for prefab slave items, which is a type of item that is placed for certain spawn point types of a prefab. PrefabTerrain Properties of procedurally generated terrain of one edge of a Prefab. Railings Represents the railings of a Terrain. Road A road item. RoadModel Properties of a road model. RoadRailings Represents the railings of a Road. RoadSide Properties of one side of a road, such as vegetation and railings. RoadTerrain Properties of the procedurally generated terrain of one side of a Road or Terrain. RoadVegetation Properties of vegetation on the side of a road. Sector Represents metadata of one sector of a Map. Selection A selection (.sbd) file. Service A prefab slave item which is placed for several spawn point types of a prefab. Sidewalk Sidewalk properties for legacy, pre-template roads. Sign A traffic sign or navigation sign. SignOverride A sign override, which overrides attributes of a sign template object. SignOverrideAttribute<T> A sign override attribute, used to define which attributes of an object in a sign template have been changed. SingleNodeItem Base class for map items which only have one node. Sound A sound which is played when the player is in range. Terrain A standalone terrain item which acts like a terrain-only road. TerrainQuadData Represents the terrain configuration of one side of a road or prefab. TerrainSide Properties of one side of a Terrain item. TrafficArea Applies a traffic rule inside a polygon. Trajectory Used for Special Transport DLC. TODO: Figure out how this works TrajectoryCheckpoint TrajectoryRule Trigger Defines a trigger area. TriggerAction Action properties of a Trigger. Vegetation Properties of procedurally placed vegetation. VegetationPart VegetationSphere A vegetation sphere. VisibilityArea Defines a rectangular area in which, if the camera is inside it, child items are rendered differently. Walker Obsolete item for making pedestrians move along a path. Structs CompanySpawnPoint Represents a prefab spawn point belonging to a Company item. CutPlaneNodeAngle EdgeOverride Represents an edge model override of a Road. FarModelData Properties of a model specific to Far Model items. GateActivationPoint Properties of an activation point of a Gate item. Material Represents a terrain quad material. Railing Represents one railing model of a road. SectorCoordinate Represents a map sector coordinate. Sign.SignBoard Sign text for legacy navigation signs. TerrainQuad Properties of an individual terrain quad. VariantOverride Represents a variant override of a Road. VertexData Interfaces IItemContainer Interface for classes that hold map items and nodes: Map, Compound and Selection. IMapItem IMapObject An interface implemented by both types of objects in a map: items and nodes. INode ISignOverrideAttribute An interface for storing SignOverrideAttributes of any type in a collection. Enums ActionType Action type for triggers. BlinkerType Blinker type for Trajectory items. CompanySpawnPointType The spawn point type of a node belonging to a Company item. CutsceneType The type of a Cutscene item. EasingFunction Easing functions used by keyframes. FogMask Fog behavior in a Environment Area. GateType The behavior of a Gate. HookupModelDetail The LOD of the spawned model of a Hookup. HookupNodeAlignment The node alignment of a Hookup. HookupSpawnProbability The likelihood in percent that a Hookup will spawn a model. ItemFile Sector files that can hold map items. ItemType Item type IDs in .base/.aux/.snd files. MapAreaType The type of a Map Area. OverlayType The type of a Map Overlay. QuadVegetation Vegetation modes for terrain quads. RoadResolution The resolution / step size of a road. ServiceType The spawn point type of a Service item. SidewalkSize Allowed values for sidewalk size in meters in the legacy pre-edge system. SoundType The type of a Sound item. StepSize Quad resolution of a Terrain item. TerrainNoise Allowed terrain noise values in percent. TerrainTransition Allowed transition values for terrain in number of quads. VegetationScale Scale of vegetation models in percent. VegetationSphereType Defines the behavior of a vegetation sphere. VisibilityAreaBehavior The rendering behavior of a visibility area."
  },
  "api/TruckLib.Sii.EncryptedSii.html": {
    "href": "api/TruckLib.Sii.EncryptedSii.html",
    "title": "Class EncryptedSii | TruckLib",
    "keywords": "Class EncryptedSii Namespace TruckLib.Sii Assembly TruckLib.Sii.dll Functions for decrypting SII files. public static class EncryptedSii Inheritance object EncryptedSii Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Decrypt(byte[]) Decrypts a SII file. public static byte[] Decrypt(byte[] sii) Parameters sii byte[] The buffer containing the encrypted SII file. Returns byte[] The decrypted SII file. Decrypt(Stream) Decrypts a SII file. public static byte[] Decrypt(Stream sii) Parameters sii Stream The stream containing the encrypted SII file. Returns byte[] The decrypted SII file."
  },
  "api/TruckLib.Sii.LinkPointer.html": {
    "href": "api/TruckLib.Sii.LinkPointer.html",
    "title": "Struct LinkPointer | TruckLib",
    "keywords": "Struct LinkPointer Namespace TruckLib.Sii Assembly TruckLib.Sii.dll public record struct LinkPointer : IEquatable<LinkPointer> Implements IEquatable<LinkPointer> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors LinkPointer(string) public LinkPointer(string Value) Parameters Value string Properties Value public string Value { readonly get; set; } Property Value string Operators implicit operator LinkPointer(string) public static implicit operator LinkPointer(string value) Parameters value string Returns LinkPointer implicit operator string(LinkPointer) public static implicit operator string(LinkPointer lp) Parameters lp LinkPointer Returns string"
  },
  "api/TruckLib.Sii.MatFile.html": {
    "href": "api/TruckLib.Sii.MatFile.html",
    "title": "Class MatFile | TruckLib",
    "keywords": "Class MatFile Namespace TruckLib.Sii Assembly TruckLib.Sii.dll Represents a .mat file. public class MatFile Inheritance object MatFile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Attributes Attributes of the shader. public Dictionary<string, dynamic> Attributes { get; set; } Property Value Dictionary<string, dynamic> Effect Name of the shader, e.g. eut2.dif.spec.rfx. public string Effect { get; set; } Property Value string Textures Textures of the shader. public List<Texture> Textures { get; set; } Property Value List<Texture> Methods Load(string) Deserializes a .mat file. public static MatFile Load(string mat) Parameters mat string The string containing the .mat file. Returns MatFile A MatFile object. Open(string) Opens a .mat file. public static MatFile Open(string path) Parameters path string The path of the file. Returns MatFile A MatFile object. Open(string, IFileSystem) Opens a .mat file. public static MatFile Open(string path, IFileSystem fs) Parameters path string The path of the file. fs IFileSystem The file system to load the file from. Returns MatFile A MatFile object. Save(string, string) Serializes this object and writes it to a file. public void Save(string path, string indentation = \"\\t\") Parameters path string The output path. indentation string The string which will be used as one level of indentation. Serialize(string) Serializes this object to a string. public string Serialize(string indentation = \"\\t\") Parameters indentation string The string which will be used as one level of indentation. Returns string The serialized object."
  },
  "api/TruckLib.Sii.OwnerPointer.html": {
    "href": "api/TruckLib.Sii.OwnerPointer.html",
    "title": "Struct OwnerPointer | TruckLib",
    "keywords": "Struct OwnerPointer Namespace TruckLib.Sii Assembly TruckLib.Sii.dll public record struct OwnerPointer : IEquatable<OwnerPointer> Implements IEquatable<OwnerPointer> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors OwnerPointer(string) public OwnerPointer(string Value) Parameters Value string Properties Value public string Value { readonly get; set; } Property Value string Operators implicit operator OwnerPointer(string) public static implicit operator OwnerPointer(string value) Parameters value string Returns OwnerPointer implicit operator string(OwnerPointer) public static implicit operator string(OwnerPointer op) Parameters op OwnerPointer Returns string"
  },
  "api/TruckLib.Sii.Placement.html": {
    "href": "api/TruckLib.Sii.Placement.html",
    "title": "Struct Placement | TruckLib",
    "keywords": "Struct Placement Namespace TruckLib.Sii Assembly TruckLib.Sii.dll Represents the placement type used in SII files. public struct Placement Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks I don't know what this does, beyond that it's apparently being used for Winter Wonderland portals, so the property names are a complete guess. Constructors Placement(Vector3, Quaternion) public Placement(Vector3 position, Quaternion rotation) Parameters position Vector3 rotation Quaternion Properties Position public Vector3 Position { readonly get; set; } Property Value Vector3 Rotation public Quaternion Rotation { readonly get; set; } Property Value Quaternion"
  },
  "api/TruckLib.Sii.SiiFile.html": {
    "href": "api/TruckLib.Sii.SiiFile.html",
    "title": "Class SiiFile | TruckLib",
    "keywords": "Class SiiFile Namespace TruckLib.Sii Assembly TruckLib.Sii.dll Represents an SII file. public class SiiFile Inheritance object SiiFile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SiiFile() Instantiates an empty SII file. public SiiFile() Properties Units Units in this file. public List<Unit> Units { get; set; } Property Value List<Unit> Methods Decode(byte[]) Decodes a 3nK-encoded or encrypted SII file to its regular text form. public static byte[] Decode(byte[] sii) Parameters sii byte[] The SII file to decode. Returns byte[] The decoded SII file. If the input was already in text form or is unsupported, it is returned unchanged. Load(byte[], string) Deserializes a SII file. public static SiiFile Load(byte[] sii, string siiDirectory = \"\") Parameters sii byte[] The buffer containing the SII file. siiDirectory string The path of the directory in which the SII file is located. Required for inserting @includes. Can be omitted if the file is known not to have @includes. Returns SiiFile A SiiFile object. Load(byte[], string, IFileSystem) Deserializes a SII file. public static SiiFile Load(byte[] sii, string siiDirectory, IFileSystem fs) Parameters sii byte[] The buffer containing the SII file. siiDirectory string The path of the directory in which the SII file is located. Required for inserting @includes. Can be omitted if the file is known not to have @includes. fs IFileSystem The file system to load @included files from. Returns SiiFile A SiiFile object. Load(byte[], string, IFileSystem, bool) Deserializes a SII file. public static SiiFile Load(byte[] sii, string siiDirectory, IFileSystem fs, bool ignoreMissingIncludes) Parameters sii byte[] The buffer containing the SII file. siiDirectory string The path of the directory in which the SII file is located. Required for inserting @includes. Can be omitted if the file is known not to have @includes. fs IFileSystem The file system to load @included files from. ignoreMissingIncludes bool If true, missing @included files are ignored. If false, an exception will be thrown. Returns SiiFile A SiiFile object. Load(string, string) Deserializes a SII file. public static SiiFile Load(string sii, string siiDirectory = \"\") Parameters sii string The string containing the SII file. siiDirectory string The path of the directory in which the SII file is located. Required for inserting @includes. Can be omitted if the file is known not to have @includes. Returns SiiFile A SiiFile object. Load(string, string, IFileSystem) Deserializes a SII file. public static SiiFile Load(string sii, string siiDirectory, IFileSystem fs) Parameters sii string The string containing the SII file. siiDirectory string The path of the directory in which the SII file is located. Required for inserting @includes. Can be omitted if the file is known not to have @includes. fs IFileSystem The file system to load @included files from. Returns SiiFile A SiiFile object. Load(string, string, IFileSystem, bool) Deserializes a SII file. public static SiiFile Load(string sii, string siiDirectory, IFileSystem fs, bool ignoreMissingIncludes) Parameters sii string The string containing the SII file. siiDirectory string The path of the directory in which the SII file is located. Required for inserting @includes. Can be omitted if the file is known not to have @includes. fs IFileSystem The file system to load @included files from. ignoreMissingIncludes bool If true, missing @included files are ignored. If false, an exception will be thrown. Returns SiiFile A SiiFile object. Open(string) Opens a SII file. public static SiiFile Open(string path) Parameters path string The path of the file. Returns SiiFile A SiiFile object. Open(string, IFileSystem) Opens a SII file. public static SiiFile Open(string path, IFileSystem fs) Parameters path string The path of the file. fs IFileSystem The file system to load this file and @included files from. Returns SiiFile A SiiFile object. Open(string, IFileSystem, bool) Opens a SII file. public static SiiFile Open(string path, IFileSystem fs, bool ignoreMissingIncludes) Parameters path string The path of the file. fs IFileSystem The file system to load this file and @included files from. ignoreMissingIncludes bool If true, missing @included files are ignored. If false, an exception will be thrown. Returns SiiFile A SiiFile object. Save(string, string) Serializes this object and writes it to a file. public void Save(string path, string indentation = \"\\t\") Parameters path string The output path. indentation string The string used as indentation inside units. Serialize(string) Serializes this object to a string. public string Serialize(string indentation = \"\\t\") Parameters indentation string The string used as indentation inside units. Returns string"
  },
  "api/TruckLib.Sii.Texture.html": {
    "href": "api/TruckLib.Sii.Texture.html",
    "title": "Class Texture | TruckLib",
    "keywords": "Class Texture Namespace TruckLib.Sii Assembly TruckLib.Sii.dll Represents a texture unit of a .mat file. public class Texture Inheritance object Texture Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Attributes public Dictionary<string, dynamic> Attributes { get; set; } Property Value Dictionary<string, dynamic> Name public string Name { get; set; } Property Value string"
  },
  "api/TruckLib.Sii.ThreeNK.html": {
    "href": "api/TruckLib.Sii.ThreeNK.html",
    "title": "Class ThreeNK | TruckLib",
    "keywords": "Class ThreeNK Namespace TruckLib.Sii Assembly TruckLib.Sii.dll Functions for decoding and encoding the 3nK format. public static class ThreeNK Inheritance object ThreeNK Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Decode(byte[]) Decodes a 3nK-encoded file. public static byte[] Decode(byte[] buffer) Parameters buffer byte[] The buffer containing the encoded file. Returns byte[] The decoded file. Decode(Stream, Stream) Decodes a 3nK-encoded file. public static void Decode(Stream input, Stream output) Parameters input Stream The stream containing the encoded file. output Stream The stream to write the decoded file to. Encode(byte[], byte) Encodes a file to 3nK format. public static byte[] Encode(byte[] buffer, byte seed = 0) Parameters buffer byte[] The buffer containing the file. seed byte The seed to use. Returns byte[] The encoded file. Encode(Stream, Stream, byte) Encodes a file to 3nK format. public static void Encode(Stream input, Stream output, byte seed = 0) Parameters input Stream The stream containing the file. output Stream The stream to write the encoded file to. seed byte The seed to use. Transcode(byte[], byte) Transcodes bytes to or from 3nK. public static void Transcode(byte[] payload, byte seed) Parameters payload byte[] The payload without a 3nK header. seed byte The seed to use. Transcode(Stream, Stream, byte) Transcodes bytes to or from 3nK. public static void Transcode(Stream input, Stream output, byte seed) Parameters input Stream The stream to read from. output Stream The stream to write to. seed byte The seed to use."
  },
  "api/TruckLib.Sii.Unit.html": {
    "href": "api/TruckLib.Sii.Unit.html",
    "title": "Class Unit | TruckLib",
    "keywords": "Class Unit Namespace TruckLib.Sii Assembly TruckLib.Sii.dll Represents an SII unit. public class Unit Inheritance object Unit Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Unit() Instantiates an empty unit. public Unit() Unit(string, string) Instantiates a unit with the given class name and unit name. public Unit(string className, string name) Parameters className string The class name. name string The unit name. Properties Attributes Attributes of this unit. public Dictionary<string, dynamic> Attributes { get; set; } Property Value Dictionary<string, dynamic> Class Class name of this unit. public string Class { get; set; } Property Value string Name Name of this unit. public string Name { get; set; } Property Value string Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/TruckLib.Sii.html": {
    "href": "api/TruckLib.Sii.html",
    "title": "Namespace TruckLib.Sii | TruckLib",
    "keywords": "Namespace TruckLib.Sii Classes EncryptedSii Functions for decrypting SII files. MatFile Represents a .mat file. SiiFile Represents an SII file. Texture Represents a texture unit of a .mat file. ThreeNK Functions for decoding and encoding the 3nK format. Unit Represents an SII unit. Structs LinkPointer OwnerPointer Placement Represents the placement type used in SII files."
  },
  "api/TruckLib.Token.html": {
    "href": "api/TruckLib.Token.html",
    "title": "Struct Token | TruckLib",
    "keywords": "Struct Token Namespace TruckLib Assembly TruckLib.Core.dll A string type used in Prism3D which packs up to 12 characters of a limited character set into 8 bytes. public struct Token : IBinarySerializable Implements IBinarySerializable Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Token(string) Creates a new token from a string. public Token(string str) Parameters str string The string representation of the token. Token(ulong) Creates a new token. public Token(ulong token) Parameters token ulong The integer representation of the token. Fields CharacterSet The character set of this type. public static readonly char[] CharacterSet Field Value char[] MaxLength The maximum number of characters a token can contain. public static readonly int MaxLength Field Value int Properties String Gets or sets the string representation of the token. public string String { readonly get; set; } Property Value string Value Gets or sets the integer representation of the token. public ulong Value { readonly get; set; } Property Value ulong Methods Deserialize(BinaryReader, uint?) Reads the object from a BinaryReader whose position is at the start of the object. public void Deserialize(BinaryReader r, uint? version = null) Parameters r BinaryReader A BinaryReader whose position is at the start of the object. version uint? The version number of the file format. Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. IsValidToken(string) Returns whether the given string contains a valid token. public static bool IsValidToken(string str) Parameters str string The string. Returns bool Whether it contains a valid token. Serialize(BinaryWriter) Writes the object to a BinaryWriter. public void Serialize(BinaryWriter w) Parameters w BinaryWriter A BinaryWriter. StringToToken(string) Converts a string to a token. public static ulong StringToToken(string input) Parameters input string The string representation of the token. Returns ulong The integer representation of the token. ToString() Returns the string representation of the token. public override string ToString() Returns string The string representation of the token. TokenToString(ulong) Converts a token to string. public static string TokenToString(ulong token) Parameters token ulong The integer representation of the token. Returns string The string representation of the token. Operators operator ==(Token, object) public static bool operator ==(Token token, object obj) Parameters token Token obj object Returns bool implicit operator Token(int) public static implicit operator Token(int v) Parameters v int Returns Token implicit operator Token(string) public static implicit operator Token(string s) Parameters s string Returns Token implicit operator Token(ulong) public static implicit operator Token(ulong v) Parameters v ulong Returns Token operator !=(Token, object) public static bool operator !=(Token token, object obj) Parameters token Token obj object Returns bool"
  },
  "api/TruckLib.UnsupportedVersionException.html": {
    "href": "api/TruckLib.UnsupportedVersionException.html",
    "title": "Class UnsupportedVersionException | TruckLib",
    "keywords": "Class UnsupportedVersionException Namespace TruckLib Assembly TruckLib.Core.dll Thrown if the version of a file format is not supported by this library. public class UnsupportedVersionException : Exception, ISerializable Inheritance object Exception UnsupportedVersionException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors UnsupportedVersionException(string) Thrown if the version of a file format is not supported by this library. public UnsupportedVersionException(string message) Parameters message string The message that describes the error."
  },
  "api/TruckLib.html": {
    "href": "api/TruckLib.html",
    "title": "Namespace TruckLib | TruckLib",
    "keywords": "Namespace TruckLib Classes CatmullRomSpline Functions for interpolating Catmull-Rom splines. DiskFileSystem IOExtensions MathExtensions MiscExtensions UnsupportedVersionException Thrown if the version of a file format is not supported by this library. Structs FlagField Represents a 32-bit flag field. Nibble Represents an unsigned half-byte integer. Token A string type used in Prism3D which packs up to 12 characters of a limited character set into 8 bytes. Interfaces IBinarySerializable Interface for classes which can de/serialize themselves to a binary format. IFileSystem Interface which abstracts read-only file system access to enable methods to read from either disk or HashFS."
  },
  "docs/Samples/01-simple.html": {
    "href": "docs/Samples/01-simple.html",
    "title": "Sample #1: Simple example | TruckLib",
    "keywords": "Sample #1: Simple example The following code demonstrates how to create a map, add items to it, and save it. You can find the full source code at Samples/01-SimpleExample/Program.cs. Instantiating the map We begin by instantiating an empty map: using TruckLib.ScsMap; var map = new Map(\"example\"); \"example\" is the filename of the map, meaning that, when the map is saved, it will be named example.mbd, and its sectors will be written to the example directory. Adding a road item Let's create a road. For the sake of simplicity, we will be using hardcoded coordinates. Here's how you can add one individual road item: using System.Numerics; var r = Road.Add(map, new Vector3(19, 0, 19.5f), // position of backward (red) node new Vector3(65, 0, 23), // position of forward (green) node \"ger1\", // unit name of the road type 80, 80 // terrain size on the left and right side ); Each map item class has a static Add method for creating a new item of that type and adding it to the map. In this case, we're adding a road item going from (19, 0, 19.5) to (65, 0, 23) of type ger1 (\"ger road 1 tmpl\") with 80 m wide terrain on both sides. If you were to save the map here, it would look like this: Setting road properties The next lines of code set the appearance of the road. r.Right.Look = \"ger_1\"; r.Right.Variant = \"broken_de\"; r.Right.LeftEdge = \"ger_sh_15\"; r.Right.RightEdge = \"ger_sh_15\"; Note that ger1 is a single carriageway. This means that properties affecting the carriageway itself have to be set on the right side, as the left side is ignored by the game. The following properties, however, do exist on both sides of the road, and we want them to be set on both. foreach (var side in new[]{r.Left, r.Right}) { First, we will define what the terrain will look like: side.Terrain.QuadData.BrushMaterials[0] = new Material(\"34\"); // \"grass_ger_main\" side.Terrain.Profile = \"profile12\"; // \"hills2\" side.Terrain.Noise = TerrainNoise.Percent0; side.Terrain.Coefficient = 0.5f; The following lines add some vegetation to that terrain: side.Vegetation[0].Name = \"v2_1ger\"; // \"ger - mixed forest\" side.Vegetation[0].Density = 200; side.Vegetation[0].From = 15; side.Vegetation[0].To = 80; Lastly, let's place some bollards: side.Models[0].Name = \"219\"; // \"reflective post\" side.Models[0].Distance = 50; side.Models[0].Offset = 6; } The road item now looks like this: Appending to a road We will now continue this road by appending some more items: r.Append(new Vector3(98, 0, 43.5f)) .Append(new Vector3(146.5f, 0, 25)) .Append(new Vector3(216, 0, 25)); Append creates a new road item going from the forward node of the road you called it on to the given coordinate. Note that road items can only have one neighbor in either direction, and therefore can only be appended to once – the reason Append can be chained like this is that the method returns the newly created item. We don't need to set all the properties again like we did with the first road item because, by default, Append copies all properties to the new item. Our map now looks like this: Adding models As the last step, we will place two models. var model1 = Model.Add(map, new Vector3(103.75f, -0.3f, 31.73f), // position \"dlc_no_471\", // unit name of \"house_01_sc\" \"brick\", // variant \"default\" // look ); model1.Node.Rotation = Quaternion.CreateFromYawPitchRoll(-2.99f, 0, 0); var model2 = Model.Add(map, new Vector3(159.64f, -0.1f, 36.91f), \"378\", // \"wood_heap1\" \"default\", \"default\"); model2.Node.Rotation = Quaternion.CreateFromYawPitchRoll(MathF.PI / 2, 0, 0); Saving the map Let's now save the map. The following code will place it in the user_map directory (if you're not on Windows, this will probably need to be adjusted): var documents = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments); var userMap = Path.Combine(documents, \"Euro Truck Simulator 2/mod/user_map/map/\"); map.Save(userMap, true); There should now be an example.mbd and an example directory in mod/user_map/map and you should be able to load the map in the editor. Remember to recompute the map (Map > Recompute map). This is necessary because TruckLib does not calculate the bounding boxes of items. Once you did, this is what the final map should look like: Further reading The Map class Working with polyline items"
  },
  "docs/Samples/02-prefabs.html": {
    "href": "docs/Samples/02-prefabs.html",
    "title": "Sample #2: Prefabs | TruckLib",
    "keywords": "Sample #2: Prefabs In this sample, we will take a look at how to add prefabs to a map. You can find the full source code at Samples/02-Prefabs/Program.cs. Instantiating the map As before, we'll start with an empty map: using TruckLib.ScsMap; var map = new Map(\"example\"); Extracting game assets To be able to place a prefab, its control node positions and spawn points must be to known to the library, so the prefab descriptor (.ppd) file of the prefab model must be opened first. In this sample, we're going to fetch it directly from base.scs using the HashFsReader class: using TruckLib.HashFs; // (modify this path before running) var gameRoot = @\"E:\\SteamLibrary\\steamapps\\common\\Euro Truck Simulator 2\"; var baseScs = HashFsReader.Open(Path.Combine(gameRoot, \"base.scs\")); Note that the game must be closed for this because it locks the file. Placing a prefab Let's now place a company prefab. The first step is to extract the prefab descriptor: using TruckLib.Models.Ppd; var companyDescriptorFile = baseScs.Extract(\"/prefab2/car_dealer/car_dealer_01_fr.ppd\"); var companyDescriptor = PrefabDescriptor.Load(companyDescriptorFile); With this, we can call the Prefab.Add method, which will add a prefab to the map. (This sample, like the first, uses hardcoded coordinates.) var company = Prefab.Add(map, // position of node 0 new Vector3(55, 0, 70), // Unit name \"dlc_fr_14\", // .ppd companyDescriptor, // rotation (90° in this case) Quaternion.CreateFromYawPitchRoll(1.5708f, 0, 0)); company.Variant = \"bhv_fr\"; company.Look = \"green_fr\"; The map now contains a car_dealer_01_fr prefab whose control node 0 is at (55, 0, 70) and which is rotated the same way as it would be if you set the rotation of said node to this value in the editor. The library has also automatically created the necessary Company slave item. Here's our progress so far: Attaching prefabs Secondly, we will place a T junction and attach it to the entrance of the company. As above, we will again extract the .ppd file: var crossingDescriptorFile = baseScs.Extract(\"/prefab2/cross_temp/fr/fr_r1_x_r1_t_narrow_tmpl.ppd\"); var crossingDescriptor = PrefabDescriptor.Load(crossingDescriptorFile); We can now add the junction to the map: var crossing = Prefab.Add(map, company.Nodes[0].Position, \"387\", crossingDescriptor, Quaternion.CreateFromYawPitchRoll(-1.5708f, 0, 0)); crossing.Variant = \"shoul_fr_1\"; crossing.Look = \"gray_fr\"; crossing.AdditionalParts.Add(\"_midlines\"); You will have noticed that we're placing the 0th control node of this prefab at the same coordinate as that of the company – this is because said node of the T junction is the stem, and therefore the arm we want to attach. We also set the rotation to -90° so that these two prefabs line up. We now have our two prefabs in the map and want to attach them. In this particular case, there's one additional step we need to take. Both of the nodes we wish to connect are node 0 of the prefab, and therefore the origin. Since two origin nodes can't be connected, we will change the origin of the junction: crossing.ChangeOrigin(1); Now, the two prefabs can be connected: company.Attach(crossing); In this case, we're using the \"lazy\" version of the Attach method which finds the closest two nodes of the two prefabs and merges them into one. In other scenarios, you will need to specify which nodes you would like to merge. Our map now looks like this: Appending and attaching road As a final step, we will take a look at how prefabs and polyline items can be connected. Something you can do is to grow a road out of a prefab node: var road = crossing.AppendRoad(1, new Vector3(100, 0, 88), \"template22\"); road.Right.Variant = \"broken\"; road.Right.LeftEdge = \"fr_sh_15\"; road.Right.RightEdge = \"fr_sh_15\"; road = road.Append(new Vector3(100, 0, 52)).Append(crossing.Nodes[0].Position); One node of the prefab is still unconnected, so let's attach our road back to it: crossing.Attach(road); This is once again the \"lazy\" method which merges the closest two nodes. Saving the map This concludes the second sample. The following code will place the map in the user_map directory (if you're not on Windows, this will probably need to be adjusted): var documents = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments); var userMap = Path.Combine(documents, \"Euro Truck Simulator 2/mod/user_map/map/\"); map.Save(userMap, true); There should now be an example.mbd and an example directory in mod/user_map/map and you should be able to load the map in the editor. Remember to recompute the map (Map > Recompute map). This is necessary because TruckLib does not calculate the bounding boxes of items. Here's our final result: Further reading Working with prefabs Reading HashFS (.scs) archives"
  },
  "docs/Samples/03-realroad.html": {
    "href": "docs/Samples/03-realroad.html",
    "title": "Sample #3: Real-world data | TruckLib",
    "keywords": "Sample #3: Real-world data This sample demonstrates one possible approach for importing the course of a real road into a map for the purpose of 1:1 mapping. In particular, it deals with the essential steps of fetching elevation data and projecting the points. This page is not a tutorial, but meant to be read alongside the full source code, so I won't go into detail on some of the boring bits. You can find the code at Samples/03-RealRoad/Program.cs. Structs For convenience, we define the structs GeographicCoordinate and ProjectedCoordinate. Loading the data Where you actually get the data from is out of scope for this sample, so I've provided a CSV file containing WGS84 latitude/longitude points describing the course of a road in Germany (© OpenStreetMap contributors). var coordinates = LoadCoordinates(); We'll skip over LoadCoordinates here – it just loads the CSV file into a list of GeographicCoordinates. Elevation The majority of map data you will encounter will not have elevation data present, so we must fetch it ourselves. In this case, we will use the DEM.Net library, which has a simple interface for fetching the elevation of points from several freely available elevation models. DEM.Net uses the Microsoft.Extensions.DependencyInjection package, so to get an instance of the ElevationService class we need, we will create a class ElevationProvider whose constructor takes one as an argument and a static method which requests an instance of this class to be created: using DEM.Net.Core; using Microsoft.Extensions.DependencyInjection; namespace RealRoad { internal class ElevationProvider { private readonly ElevationService elevationService; private readonly DEMDataSet dataset = DEMDataSet.SRTM_GL1; public static ElevationProvider Create() { var serviceCollection = new ServiceCollection(); serviceCollection.AddDemNetCore(); serviceCollection.AddTransient<ElevationProvider>(); var services = serviceCollection.BuildServiceProvider(); return services.GetService<ElevationProvider>(); } public ElevationProvider(ElevationService elevationService) { this.elevationService = elevationService; } } We now add a method to this class which takes in the coordinates we just loaded and fetches the elevation of the road. public List<GeographicCoordinate> GetElevations(List<GeographicCoordinate> points) { elevationService.DownloadMissingFiles(dataset, GetBoundingBoxContainingPoints(points)); var geoPoints = elevationService.GetLineGeometryElevation( points.Select(p => new GeoPoint(p.Latitude, p.Longitude)), dataset).ToList(); return geoPoints.Select( x => new GeographicCoordinate(x.Latitude, x.Longitude, x.Elevation ?? 0)) .ToList(); } This gives us a new set of coordinates which not only has elevation for our input coordinates, but also accounts for all elevation changes along the way. Finally, we'll call it from Main: var elevationProvider = ElevationProvider.Create(); var coordinatesWithElevation = elevationProvider.GetElevations(coordinates); The first time you run this program, this step will take several seconds as DEM.Net needs to download the elevation model for the requested region. On any subsequent run, it will load a cached version from disk. Projection The real world is round, but game worlds are flat, so we need to project our points into that flat world. Here, we will use a transverse Mercator; more specifically, UTM zone 32N, which is the UTM zone most of Germany falls into. The library DotSpatial.Projections will do this for us. The method for projecting our list of coordinates looks like this: using DotSpatial.Projections; static List<ProjectedCoordinate> Project(IList<GeographicCoordinate> coordinates, ProjectionInfo source, ProjectionInfo dest) { // Convert our list into the flat array expected by the library var xy = new double[coordinates.Count * 2]; for (int i = 0; i < coordinates.Count; i++) { xy[i * 2] = coordinates[i].Longitude; xy[(i * 2) + 1] = coordinates[i].Latitude; } // Project the points in-place Reproject.ReprojectPoints(xy, null, source, dest, 0, coordinates.Count); // And convert it back into a list of ProjectedCoordinates var points = new List<ProjectedCoordinate>(coordinates.Count); for (int i = 0; i < coordinates.Count; i++) { var easting = xy[i * 2]; var northing = xy[(i * 2) + 1]; points.Add(new ProjectedCoordinate(easting, northing, coordinates[i].Height)); } return points; } And this is how we call it: var sourceCrs = KnownCoordinateSystems.Geographic.World.WGS1984; var destCrs = KnownCoordinateSystems.Projected.UtmWgs1984.WGS1984UTMZone32N; var points = Project(coordinatesWithElevation, sourceCrs, destCrs); We now have a list of ProjectedCoordinates. Let's also define a center point for our map, which we will subtract from our projected coordinates later: var center = Project(new[] { new GeographicCoordinate(54.744101, 9.799639) }, sourceCrs, destCrs)[0]; One last thing – the game has a minimum length for road segment, which in this case is 1.25 m. Further, segments shorter than 5 m can render quite strangely. Now that we have our projected points and know how long each segment will be in-game, we'll filter out these segments. (This sample has enough LOC as it is, so for the sake of simplicity, we just remove any point for which || ni - ni-1 || < 5.) points = RemoveShortSegments(points); Adding the road to the map We now have everything we need to add the road to a map. For this step, I will assume that you have read Sample #1: Simple example. As with the previous samples, we create an empty map: using TruckLib.ScsMap; var map = new Map(\"example\"); The road items can now be created as follows: var road = Road.Add(map, PointToNodePosition(points[0], center), PointToNodePosition(points[1], center), \"ger1\"); for (int i = 2; i < points.Count; i++) { road = road.Append(PointToNodePosition(points[i], center)); } (The method PointToNodePosition simply subtracts the center point and inverts the Z coordinate.) The first road item needs to be explicitly created with the first and second point of the road. After this, you can call Append in a loop with the remaining points. Remember that a road item can only be appended to once, so make sure that the return value of Append, which is the newly created road item, is assigned back to road. Saving the map Let's save the map: var documents = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments); var userMap = Path.Combine(documents, \"Euro Truck Simulator 2/mod/user_map/map/\"); map.Save(userMap, true); Remember to recompute the map (Map > Recompute map). This is necessary because TruckLib does not calculate the bounding boxes of items. This is what you should see: Further reading Sample #1: Simple example Working with polyline items"
  },
  "docs/TruckLib.HashFs/hashfs.html": {
    "href": "docs/TruckLib.HashFs/hashfs.html",
    "title": "Reading HashFS (.scs) archives | TruckLib",
    "keywords": "Reading HashFS (.scs) archives Euro Truck Simulator 2 and American Truck Simulator store their game assets in HashFS files with the extension .scs. Mods may also be distributed in this format, though a ZIP file renamed to .scs is also allowed. In a HashFS archive, the identifier of the contained files is a CityHash64 hash of its full path (encoded as UTF-8). This means that a file can be retrieved by its path, but it is not possible to list every path in the archive, as the hashes cannot be reversed. To deal with this, archives can optionally contain directory listings, which are special files with the path of a directory, listing the files and subdirectories it contains. All but three of the games' .scs files contain full directory listings, but mods may not – the top level listing in particular can be omitted to prevent the official extractor from extracting anything. HashFS v2, introduced with game version 1.50, is supported. Note that, in this version, .tobj/.dds pairs are dissolved into a packed .tobj entry from which TruckLib will reconstruct the original .tobj and .dds files when such a .tobj entry is requested. Opening an archive To open a HashFS file, call the static Open method of the HashFsReader class: using TruckLib.HashFs; using IHashFsReader reader = HashFsReader.Open(@\"E:\\SteamLibrary\\steamapps\\common\\Euro Truck Simulator 2\\def.scs\"); Depending on the HashFS version of the archive, this will create a HashFsReaderV1 or HashFsReaderV2 instance as IHashFsReader which you can use to extract files. Finding entries Known paths The EntryExists method will tell you if the given path exists in the archive, and if yes, whether it is a directory or a file: EntryType type = reader.EntryExists(\"/def/world/prefab.sii\"); EntryType has the values Directory, File, or NotFound. Directory listings You can retrieve the contents of a directory with the GetDirectoryListing method: // Get the top level of the archive var directory = reader.GetDirectoryListing(\"/\"); Keep in mind that, as mentioned above, directory listings are not required to exist. Extracting entries Use the Extract method to extract an entry: byte[][] data = reader.Extract(\"/def/world/prefab.sii\"); This returns an array containing the extracted file(s) as byte[]. The method will return one file except in one special case: In HashFS v2, extracting a packed .tobj entry will return the reconstructed .tobj and .dds files in that order. Alternatively, you can write the entry to disk with ExtractToFile: reader.ExtractToFile(\"/def/world/prefab.sii\", \"./prefab.sii\"); In HashFS v2, extracting a packed .tobj entry will write both the reconstructed .tobj and .dds file."
  },
  "docs/TruckLib.ScsMap/add-delete-items.html": {
    "href": "docs/TruckLib.ScsMap/add-delete-items.html",
    "title": "Adding and deleting map items | TruckLib",
    "keywords": "Adding and deleting map items Adding a map item To add a map item, call the static Add method of the respective item's class. This will construct the object, add and configure map nodes for the item, add the item to the map, and then return the object. Let's add a Model to the map. The first parameter of any Add method is the map, compound or Selection the item will be added to; what follows next depends on the item type. In this case, it is the position of the item, the unit name of the model, and its variant and look: Model model = Model.Add( map, // container new Vector3(10f, 0f, 10f), // position \"dlc_no_471\", // unit name of \"house_01_sc\" \"brick\", // model variant \"default\" // model look ); The map now contains a node at the specified position and a Model item which references this node. You can use the returned object to further modify the item: model.Node.Rotation = Quaternion.CreateFromYawPitchRoll(1.23f, 0, 0); model.WaterReflection = true; Deleting a map item To delete an item from a map, call the map's Delete method with the item: map.Delete(theItem); Nodes which are exclusively used by this item will also be deleted. When deleting a prefab, the prefab's slave items will be deleted as well."
  },
  "docs/TruckLib.ScsMap/compounds.html": {
    "href": "docs/TruckLib.ScsMap/compounds.html",
    "title": "Working with compounds | TruckLib",
    "keywords": "Working with compounds Creating a compound To compound items, you can either start with an empty compound item and add to it, or you can compound existing items. Starting with an empty compound To create an empty compound, call the static Add method of the class, like with any other map item: Compound compound = Compound.Add(map, new Vector3(42, 0, 84)); The second parameter is the center point of the compound. Adding new items to a compound works the same way as adding them to the map directly – just use the compound item as the first parameter: Model model = Model.Add(compound, new Vector3(40, 0, 80), \"dlc_no_654\", \"default\", \"default\"); Compound existing items The CompoundItems method of a map object takes a list of existing map items and compounds them. Its return value is the newly created compound item. Compound compound = map.CompoundItems(new[] {model1, model2}); Removing an item from a compound Like adding to a compound, removing from a compound also has the same interface as removing from a map: Compound compound = Compound.Add(map, new Vector3(42, 0, 84)); Model model = Model.Add(compound, new Vector3(40, 0, 80), \"dlc_no_654\", \"default\", \"default\"); compound.Delete(model); // The compound is now empty again. Uncompounding Dissolving a compound – moving its items back into the map itself and deleting the compound item – is accomplished with UncompoundItems: map.UncompoundItems(compound);"
  },
  "docs/TruckLib.ScsMap/map-class.html": {
    "href": "docs/TruckLib.ScsMap/map-class.html",
    "title": "The Map class | TruckLib",
    "keywords": "The Map class Creating a map To create a new, empty map, call the constructor of Map. The name parameter is what the .mbd file and the sector directory of the map will be named when it is saved. using TruckLib.ScsMap; Map map = new Map(\"example\"); Opening a map To load an existing map from disk, call the static Map.Open method with the path of the .mbd file. using TruckLib.ScsMap; Map map = Map.Open(@\"E:\\SteamLibrary\\steamapps\\common\\Euro Truck Simulator 2\\extracted\\map\\europe.mbd\"); If you would like to load specific sectors only, use the optional sectors parameter. It expects a list or array of sector coordinates. There is an additional overload which allows loading a map directly from a .scs file using a IHashFsReader: using TruckLib.HashFs; using TruckLib.ScsMap; IHashFsReader reader = HashFsReader.Open(\"base_map.scs\"); Map map = Map.Open(\"/map/europe.mbd\", reader); Saving a map To save a map, call the Save method of the map object. The map will be written to the specified directory. string documents = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments); string userMap = Path.Combine(documents, \"Euro Truck Simulator 2/mod/user_map/map/\"); map.Save(userMap, true); If the optional parameter cleanSectorDirectory is set to true, which it is by default, the sector directory will be emptied before saving the map. Remember to recompute the map in the editor (Map > Recompute map) following this. Map items All map items are stored in the MapItems dictionary, indexed by UID. bool exists = map.MapItems.TryGetValue(0x521CD80FA4000001, out MapItem item); var allMovers = map.MapItems.Where(x => x.Value is Mover); Do not modify this dictionary directly – see \"Adding and deleting map items\" for the intended way to do that. Nodes Similarly, the Nodes property is a dictionary plus R-tree containing all nodes in the map. You can retrieve nodes by UID just like any dictionary: bool exists = map.Nodes.TryGetValue(0x521CD80C53000000, out INode node); To find nodes within a bounding box, use the Within method: var nodes = map.Nodes.Within(0, 0, 4000, 4000); As with MapItems, it is not recommended to add to or remove from this dictionary by hand. To add a node directly, if necessary, call AddNode, and to delete a node, call Delete. Sectors In TruckLib, sectors don't contain any map objects internally: which sector an item or a node should be written to is decided when Save is called. Sector metadata, however, does exist, and is stored in the Sectors dictionary. Map metadata The scale of the map can be set with the NormalScale and CityScale properties. The spawnpoint for the Run Map feature of the editor can be set with StartPosition and StartRotation."
  },
  "docs/TruckLib.ScsMap/move-items.html": {
    "href": "docs/TruckLib.ScsMap/move-items.html",
    "title": "Moving and translating map items | TruckLib",
    "keywords": "Moving and translating map items Items can be moved with their respective Move and Translate methods: var model = Model.Add(map, new Vector3(10, 0, 10), \"dlc_no_654\", \"default\", \"default\"); model.Move(new Vector3(50, 0, 50)); // The model is now at (50, 0, 50). var model = Model.Add(map, new Vector3(10, 0, 10), \"dlc_no_654\", \"default\", \"default\"); model.Translate(new Vector3(40, 0, 40)); // The model is now at (50, 0, 50). The behavior of Move and Translate differs slightly depending on the item type. If the target is a ... single node item such as Models, they simply move the node. polyline item such as Roads, both the backward node and the forward node are moved, since you are moving the whole item. To move only one of its nodes, call the method on the Node or ForwardNode itself. path item such as Movers or polygon item such as Traffic Areas, the 0th node will be moved to the position given to Move, and the other nodes of the item will be translated relative to it. If you would like a different node to be the anchor of the Move method, use the overload Move(Vector3, int) to specify its index. prefab, they will also move all prefabs connected to the target. The slave items of this and any connected prefab will be moved as well. compound, both the parent node and the contained map items are moved."
  },
  "docs/TruckLib.ScsMap/polyline-items.html": {
    "href": "docs/TruckLib.ScsMap/polyline-items.html",
    "title": "Working with polyline items | TruckLib",
    "keywords": "Working with polyline items Polyline items, such as roads, have several methods which simplify working with them. Appending and prepending You can append or prepend to a polyline by calling the Append or Prepend methods: Road road2 = road1.Append(new Vector3(30, 0, 10)); This will create a new Road item road2 whose backward node is the forward node of road1 and whose forward node is at (30, 0, 10). Road road2 = road1.Prepend(new Vector3(30, 0, 10)); This will create a new Road item road2 whose forward node is the backward node of road1 and whose backward node is at (30, 0, 10). In both cases, if there is already an item attached in the direction you wish to extend, an InvalidOperationException is thrown. By default, the properties of item the method is called on are copied to the new item. If you would like it to have its default properties instead, set the optional parameter cloneSettings to false. Connecting two polyline items To connect two unconnected polyline items where one has a free forward node and one has a free backward node, call Merge on the node you wish to keep. Say you have the following two road items: Road road1 = Road.Add(map, new Vector3(10, 0, 10), new Vector3(30, 0, 10), \"ger1\"); Road road2 = Road.Add(map, new Vector3(32, 0, 12), new Vector3(50, 0, 30), \"ger1\"); To connect the roads and keep the node at (30, 0, 10), write the following: road1.ForwardNode.Merge(road2.Node); Alternatively, if you would like to keep the node at (32, 0, 12), call it the other way around: road2.Node.Merge(road1.ForwardNode); Disconnecting two polyline items You can disconnect two polyline items by calling Split on the node which connects them. For example, the following line of code will disconnect road from its forward item: INode newNode = road.ForwardNode.Split(); This method also returns the newly created node. Connecting/disconnecting polyline items to/from prefabs See Prefabs. First and last item To find the first or last item of a polyline chain given one of its members, call FindFirstItem or FindLastItem respectively: PolylineItem start = road.FindFirstItem(); PolylineItem end = road.FindLastItem(); start and end are now the first and last polyline item of the chain road is a part of. Keep in mind that all polyline item types can attach to each other, so start and end are not guaranteed to be of the same type as road."
  },
  "docs/TruckLib.ScsMap/prefabs.html": {
    "href": "docs/TruckLib.ScsMap/prefabs.html",
    "title": "Working with prefabs | TruckLib",
    "keywords": "Working with prefabs Adding prefabs Prefabs are the most complex map item in the game, so adding one requires an extra step. Loading the descriptor To add a prefab to the map, the positions of its control nodes and spawn points must be known to the library so that the map nodes can be placed correctly and slave items, if required, can be created. This means that the prefab descriptor (.ppd) file of the prefab must be opened first, which you can do with the PrefabDescriptor class: using TruckLib.Models.Ppd; PrefabDescriptor ppd = PrefabDescriptor.Open(\"<location of extracted files>/prefab2/car_dealer/car_dealer_01_fr.ppd\"); Alternatively, you can use a HashFsReader to load the descriptor directly from its .scs file without having to extract it: using TruckLib.Models.Ppd; using TruckLib.HashFs; HashFsReader baseScs = HashFsReader.Open(\"<game root>/base.scs\"); byte[] ppdBytes = baseScs.Extract(\"/prefab2/car_dealer/car_dealer_01_fr.ppd\"); PrefabDescriptor ppd = PrefabDescriptor.Load(ppdBytes); Note that this will not work while the game is running because the game locks the file. Creating the prefab Now that we have the prefab descriptor, we can call Prefab.Add to add the prefab to the map: Prefab prefab = Prefab.Add(map, new Vector3(12.3f, 0, 23.4f), \"dlc_fr_14\", ppd, Quaternion.Identity); The position passed to this method will be the position of the 0th control node. Rotation is handled the same way as it is ingame: no matter how the model's geometry is actually oriented, it will always be rotated such that the 0th control node has a direction of (0, 0, -1). This means that if you pass e.g. a yaw of 90°, the model will be rotated the same way as it would be if you specified 90° in the new item dialog of the editor. Changing the origin On occasion, the origin node of a prefab must be changed to allow for connections which would otherwise not be possible. You can do this with the ChangeOrigin method: prefab.ChangeOrigin(2); Unlike other prefab methods, the index expected here is the index of the node in the prefab descriptor, not the Nodes list of the object, because Nodes is always ordered such that the origin node is the 0th entry. If one or both nodes affected by the operation already have an item attached to them, InvalidOperationException is thrown. Attaching prefabs You can attach two prefabs to each other with Attach: prefab1.Attach(3, prefab2, 0); The first parameter is the index of the node of prefab1 the other prefab will be connected to, the second parameter is the prefab, and the third parameter is the index of the node of prefab2 which you want to attach. Note that prefab2 will be moved such that the two specified nodes have the same position – the prefabs can't be connected otherwise. If both specified nodes are the current origin node (which is the case when both index parameters are 0) or one or both of the nodes already have something attached to them, InvalidOperationException is thrown. There is also a \"I'm feeling lucky\" option which will attach the closest nodes of the two prefabs without having to specify what they are: prefab1.Attach(prefab2); In both cases, one of the prefab nodes will become unnecessary and will be deleted. Attaching polyline items There is another overload of Attach for attaching a road or another polyline item to a node of a prefab: prefab.Attach(1, road.ForwardNode); The first parameter is the index of the prefab node to attach the item to, and the second parameter is the item node you want to attach to the prefab. Attempting to attach the backward node of a polyline item to the origin node of a prefab will throw InvalidOperationException. All other configurations will work. As with attaching a prefab, there is another method which attaches the closest nodes of the item and the prefab: prefab.Attach(road); In both cases, the leftover node of the polyline item will be deleted. Appending a road In addition to attaching an existing road, you can append a new road to a prefab node with the AppendRoad method: Road road = prefab.AppendRoad(1, new Vector3(42, 0, 21), \"ger1\"); The given position will be the position of the forward node of the road, unless you are appending to the origin node, in which case it will be the backward node (meaning the road is actually prepended). Disconnecting prefabs or polyline items To disconnect two connected prefabs or a prefab and a polyline item, call Split on the node which connects them. For example, the following line of code will disconnect the item attached to node 1: INode newNode = prefab.Nodes[1].Split(); This method also returns the newly created node."
  },
  "docs/TruckLib.ScsMap/selection-class.html": {
    "href": "docs/TruckLib.ScsMap/selection-class.html",
    "title": "The Selection class | TruckLib",
    "keywords": "The Selection class Selections (.sbd files) can be created with the Selection class. It implements the same interface as Map, so it can be used the same way. Here's a brief example: using System.Numerics; using TruckLib.ScsMap; Selection selection = new(); Model model = Model.Add(selection, new Vector3(10f, 0f, 10f), \"dlc_no_471\", \"brick\", \"default\" ); selection.Save(\"example.sbd\"); Note that, just like with maps, a recalculation (Map > Recompute map) is required when importing this selection with the official editor because TruckLib does not calculate the bounding boxes of items. Origin Selections have an origin point which the editor subtracts from all nodes before adding the items. You can modify this origin point via the Origin property. In addition, there is a CenterOrigin method which sets the origin to the center of all nodes, which is what the official editor does when exporting a selection. Importing to a Map You can import a selection into a map by calling Import: map.Import(selection, new(72.7f, 0f, 27.2f)); This will add a copy of the items in selection to map at the specified offset. UIDs of the nodes and items will differ from the originals in selection."
  },
  "docs/TruckLib.Sii/sii.html": {
    "href": "docs/TruckLib.Sii/sii.html",
    "title": "SII files | TruckLib",
    "keywords": "SII files TruckLib provides the SiiFile class for serializing and deserializing SII files. A SiiFile object contains the units of the file in the Units list. A Unit has a class name, unit name, and a number of key-value attributes stored as Dictionary<string, dynamic>. Deserializing You can deserialize SII files with the static SiiFile.Open method: using TruckLib.Sii; SiiFile sii = SiiFile.Open(\"/foo/bar.sii\"); Alternatively, you can use SiiFile.Load to parse a string. In case the string contains @include directives, you must also pass the directory which the paths of the included files are relative to. (Open resolves this automatically.) SiiFile sii = SiiFile.Load(siiStr, \"/path/where/included/files/are/located\"); If an included file does not exist, FileNotFoundException is thrown unless the ignoreMissingIncludes parameter is set to true. There are additional overloads which allow loading a .sii file directly from a .scs file using a IHashFsReader: using TruckLib.HashFs; using TruckLib.Sii; IHashFsReader reader = HashFsReader.Open(\"def.scs\"); SiiFile sii = SiiFile.Open(\"/def/country.sii\", reader); Data types Numbers which have a decimal component are parsed to float; numbers without will be the smallest of int, long, or ulong which can fit the value. Float tuples become a VectorN; integer tuples become value tuples (such as (int, int) and so on). SCS's documentation for units distinguishes between int2 and fixed2, but it is not possible to identify which type to use from the SII file alone, so they are parsed the same way. If a quaternion has its W component separated with a semicolon, like (1; 0, 0, 0), it becomes a Quaternion. Otherwise, they cannot be distinguished from a float4 and are parsed to Vector4 as stated above. Quoted strings are parsed to string. Again, the library does not differentiate between regular strings and resource_ties as they are written the same way. Unquoted strings are parsed to Token if they are a valid token. If not, they become an OwnerPointer if they start with ., and a LinkPointer otherwise. The values true and false are parsed as bool. If an array is preceded by a length parameter and/or has explicit indices, it is parsed to an array. Otherwise, it is parsed to a list. Serializing To serialize a SiiFile to string, call the Serialize method: SiiFile sii = new(); Unit unit = new(\"prefab_model\", \"prefab.dlc_blke_232\"); unit.Attributes.Add(\"model_desc\", \"/prefab2/fork_temp/blke/blke_road2_no_offset_tram_to_road2_tram.pmd\"); unit.Attributes.Add(\"prefab_desc\", \"/prefab2/fork_temp/blke/blke_road2_no_offset_tram_to_road2_tram.pmd\"); unit.Attributes.Add(\"category\", \"dlc_blke\"); unit.Attributes.Add(\"corner0\", new List<Token>{\"blke383\", \"blke385\"}); unit.Attributes.Add(\"corner1\", new List<Token>{\"blke384\", \"blke386\"}); sii.Units.Add(unit); string siiStr = sii.Serialize(); You can also write it to disk using Save: sii.Save(\"foo.sii\"); Both methods have an optional parameter indentation which sets the indentation inside units. The default is \\t."
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | TruckLib",
    "keywords": "Introduction This is the documentation for TruckLib, a library for the map format of Euro Truck Simulator 2 and American Truck Simulator. Install dotnet add package TruckLib Getting started To get started with the library, check out the Creating and modifying maps section and the sample code. Supported formats Map TruckLib supports map format version 901 (game version 1.51–1.53). Support for more than one version at a time is not planned, so you will need to update existing maps in the editor whenever this library updates to a newer version. HashFS Both HashFS v1 and v2 are supported. Prefab descriptors TruckLib can read .ppd versions 21 to 24."
  },
  "index.html": {
    "href": "index.html",
    "title": "",
    "keywords": ""
  },
  "templates/material/README.html": {
    "href": "templates/material/README.html",
    "title": "| TruckLib",
    "keywords": "Courtesy of https://ovasquez.github.io/docfx-material/."
  }
}